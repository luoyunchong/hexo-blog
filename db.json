{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"576dac0fd2dad5b7cd65e5caed39a1499e3d69fd","modified":1570508473954},{"_id":"themes/material-x/_config.yml","hash":"74a97c279df960225fb4b1d4b47b9650fce9de49","modified":1570508473977},{"_id":"source/categories/index.md","hash":"012d8b570fc0aa028fdb6fbd550b68c93c17df4a","modified":1570508473975},{"_id":"source/mylist/index.md","hash":"a5ffb153388ce5deb2c7bdb4aac5886012c272e7","modified":1570508473976},{"_id":"source/friends/index.md","hash":"f5ef2c2d820055f4b22f4201bebdd6a8acba3ca3","modified":1571928099953},{"_id":"source/tags/index.md","hash":"62c5b86c7986b58ed3e5ded7114799f287a32930","modified":1570508473976},{"_id":"source/about/index.md","hash":"d5529983341aff7809f047523369d637c8ec342c","modified":1570508473974},{"_id":"themes/material-x/languages/en.yml","hash":"c44a0ca9ed1b9d756d74f07d197697bafa5419af","modified":1570508473978},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"39b5cb1b74ee199e105b91693fceca86fd21e303","modified":1570508473978},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"903a3fb9c425da7b19ecdaad9ccda9b873a7175f","modified":1570508473979},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"27d5cbfff335535fcfed5786f1cd715b72f164c7","modified":1570508473979},{"_id":"themes/material-x/layout/index.ejs","hash":"004a2d7e0fff53cb7907e4acd76d1d8a88385fbd","modified":1570508473998},{"_id":"themes/material-x/layout/archive.ejs","hash":"36325688339c59d3c615e7f76558518a854b6448","modified":1570508473996},{"_id":"themes/material-x/layout/category.ejs","hash":"ef7b8f73351625877312305e0bc09b52d6dcbb53","modified":1570508473997},{"_id":"themes/material-x/layout/layout.ejs","hash":"95914e8b45fc2463db79f45bf5d1aa849fc503c7","modified":1570508473998},{"_id":"themes/material-x/layout/links.ejs","hash":"f2e13b3571d30647deca7fe760de670f65f48e9d","modified":1570508473998},{"_id":"themes/material-x/layout/page.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1570508473999},{"_id":"themes/material-x/layout/post.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1570508473999},{"_id":"themes/material-x/layout/list.ejs","hash":"b1cdf7bf3328c6864730b7f96745485d0c53c73f","modified":1570508473999},{"_id":"themes/material-x/layout/tag.ejs","hash":"3a39810164a52646e8b7dfde5d1e2218d108d641","modified":1570508474000},{"_id":"themes/material-x/source/style.less","hash":"ad83c432a6093d8c66998fa211192076943372be","modified":1570508474016},{"_id":"source/_posts/abp/ABP-Base-Code.md","hash":"7d803634c1cf36e9d59598eddf0fa3e6a5b01654","modified":1570508473955},{"_id":"source/_posts/abp/ABP-Code-Generator.md","hash":"1025678283af28e45d0ec43af30495fe3df53d41","modified":1570508473955},{"_id":"source/_posts/abp/MicroServiceDemo-iview.md","hash":"56642fc0acdfbace3ed0e2a135d6a82d60892883","modified":1570508473958},{"_id":"source/_posts/command/Collect-Documents.md","hash":"5ab6c2ba5d1f5fc3bc4d94e8d788c154bd399313","modified":1570508473962},{"_id":"source/_posts/bibilailai/say-what.md","hash":"24f308edab23cdd37286b52e9a4f8e35776f5cd1","modified":1570512161816},{"_id":"source/_posts/command/Daily-Command-Line-Recording.md","hash":"fbc4a08868f0c547a54723b72a557668bff01897","modified":1570508473963},{"_id":"source/_posts/command/Git-how-to-use.md","hash":"7ce34996d90cafdf8734d81c1c217eb38ae91f61","modified":1570508473963},{"_id":"source/_posts/command/Rabbitmq-And-Mongodb.md","hash":"1700530470c692cf33d1768c2b67d806d0586f43","modified":1570508473963},{"_id":"source/_posts/back-end/MySQL-Study.md","hash":"55b3816120f328cd492708639bb4303113a8187f","modified":1570508473959},{"_id":"source/_posts/back-end/Docker-nginx-Learn.md","hash":"d3d524f573fa917c403fef79721a53eea8078e7c","modified":1570508473959},{"_id":"source/_posts/back-end/Navicat-Premium-12-Free-download.md","hash":"e92e368166940ef71d0fe07ffefb775c6cdbcad2","modified":1570508473960},{"_id":"source/_posts/back-end/Node.js-Construction-of-Tree-Structure.md","hash":"c16d1683eddeeab43bd4670887398c946a8d9a6a","modified":1570508473960},{"_id":"source/_posts/back-end/RazorEngine-Code-Generation-Principle.md","hash":"42356e5f28eeaefb4c2ddb06e60cc009f62bf88e","modified":1570508473961},{"_id":"source/_posts/back-end/Rshiny-Framework-How-To-Use.md","hash":"db7b128d0990c9db2cb02d56edb76b165069032b","modified":1570508473961},{"_id":"source/_posts/back-end/Visual-Studio-Increase-Copyright-Information.md","hash":"e82357e6b51965b88e1a52a0f02781aee4045d97","modified":1570508473961},{"_id":"source/_posts/abp/ABP-How-To-Use.md","hash":"498515243be90acf0e005761f36d8681e98b175d","modified":1570508473957},{"_id":"source/_posts/back-end/ssl-nginx-https-in-2-domain.md","hash":"e10d85b3f8ae3a5d9bc90634dbd905927efa8812","modified":1570508473962},{"_id":"source/_posts/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu.md","hash":"bda8b66572e14ed767ec62a2c21a40793c37aefb","modified":1570508473965},{"_id":"source/_posts/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu.md","hash":"4ca051493720ad9c7a4d8ab6cf39a22ea3659995","modified":1570508473965},{"_id":"source/_posts/dotnetcore/ASP.NET-Core-Get-Json-Array-using-IConfiguration.md","hash":"a178ca2ca6345fef617a5ac67753d36fc1969e02","modified":1570508473966},{"_id":"source/_posts/abp/Note-DotNET-interacts-with-R.md","hash":"b4717a3e9901da4c7ee66a651470e905bc874fc3","modified":1570508473958},{"_id":"source/_posts/devops/travis-ci-devops-to-hexo-ESC.md","hash":"75475b0262161928992ef134d6ba6ff2ad15379e","modified":1570508473964},{"_id":"source/_posts/java/learn-spring-boot-begin.md","hash":"e37c345b29bed940a0200ebeb49b410dfbe4e41c","modified":1570508473969},{"_id":"source/_posts/front-end/Useful-front-end-and-back-end.md","hash":"06e1d8bff13e2e40e4414a5bff404488cc1fc5f5","modified":1570508473967},{"_id":"source/_posts/devops/tools.md","hash":"f4ab73bc486fa26e04b6ad9c8b1b6da6a769d245","modified":1570511897597},{"_id":"source/_posts/front-end/hexo-theme-material-x-gitalk.md","hash":"5e249a05e612fcaa58265813836a2f270a26fb1c","modified":1570508473967},{"_id":"source/_posts/lin-cms-dotnetcore/README.md","hash":"18fa3d74016dfcb0b5abb9eea480fc11678cae8d","modified":1575890168073},{"_id":"source/_posts/lin-cms-dotnetcore/open-source-begin.md","hash":"a17d51208e5c18453b6c9ad482362ab0077083f5","modified":1575890165050},{"_id":"source/_posts/dotnetcore/Qiniu-Object-Storage.md","hash":"f5759c5c0d97fcf503490a9685e14adf72f33ac6","modified":1570508473966},{"_id":"source/_posts/work/Pain-Points-at-the-Present-Stage.md","hash":"675db31d54327574beb3ea9c3c6d9de5c55925e5","modified":1570508473973},{"_id":"source/_posts/front-end/Learn-TypeScript-BaseType.md","hash":"44d0156d597e36d9cd3a7441f4bc24f6b71af3ec","modified":1570508473966},{"_id":"source/_posts/re-start/FreeSql-Repository-Delete-Extend.md","hash":"4377a9444cd6d6c7267c68d87063ee313ff139dd","modified":1570509747861},{"_id":"source/_posts/re-start/csredis-in-asp-net-core-master-slaver.md","hash":"d7c0599dff22aebd4952e107119f3c1405233754","modified":1570508473971},{"_id":"source/_posts/re-start/Reflex-Assembly-Get-Controller-Methods-Attribute.md","hash":"e76ac8b6046f99d3278edd344fe4e62ebbb861c8","modified":1570508473970},{"_id":"source/_posts/re-start/fly.md","hash":"fe82ec85f07340678bcf8d11aa5ad2918783db5a","modified":1570508473972},{"_id":"source/_posts/re-start/learn-webpack.md","hash":"c061444cdd633f6de77f14dfa816de66f6700ad0","modified":1570508473973},{"_id":"source/_posts/re-start/why-we-use-dto.md","hash":"f09e80859b2a69cd2dd029dbbae3751e128eac2a","modified":1570508473973},{"_id":"source/_posts/re-start/FreeSql-asp.net-core-how-to-use.md","hash":"e7773bc00f693d038f477387c5838dbd18ccf49a","modified":1570508473970},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"f2ad0cda938967adc5b1e39df3a4aec957d2eb04","modified":1570508473981},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"91065b00d1750c4bf8c2a3d7088dc6e4ae552ad5","modified":1570508473980},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"ea502a888621527bc29f354309045d6c1dacdccb","modified":1570508473981},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"d6d4f289112635ea09666194346ef490996f3649","modified":1570508473981},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"a7e2b092a0f393642eb5c5802f24ec77ea205e74","modified":1570508473982},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"aab1d38c29a430aaaa65646b4d675759cf38c411","modified":1570508473982},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"dbf843e6ccdfcd97bf574b7f551a163296b732ed","modified":1570508473983},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"8b64ad50296ba8cbf629fed9c2943ea32439114f","modified":1570508473983},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"ac91fc41d59a7e93ab6f30a13ea5dd05c33e6131","modified":1570508473984},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"2f323ca76d6bacd14e4799bcf3b6e0c2ffe2f8c5","modified":1570508473984},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"ba49cba21102dd77b0e6dd68787dc153163fe8cf","modified":1570508473984},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"05814a2f4b0867d811988eefdd4900f522146c6c","modified":1570508473980},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"2ce63582ac3b9730aa7f62acee992df04c080d44","modified":1570508473985},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1570508473986},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"324bcfe643a8aceaf8044c3295643a0bbee4671b","modified":1570508473986},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"9488d10289ddf772b2a24ef9dfdd5e67f83cab8c","modified":1570508473986},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"6060c1a2b099eb27768bf118d993252aacfb8bcb","modified":1570508473987},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"6b3c544d208803fe6f0b1f8ebda08fed7eba44d7","modified":1570508473987},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"25f3253d4bcfe32bc0d291901f00213b199dd635","modified":1570508473988},{"_id":"source/_posts/re-start/FreeSql-sample-blog-RESTful.md","hash":"d86064d13b9a268af94d6a9a5d463bcc455fbee2","modified":1570508473970},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"c0dea734faf8fbb6ce6b2abccfa95ba8be80bdec","modified":1570508473988},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"95c718b34d13a0117ae005ea500e86d8a505376a","modified":1570508473988},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"b1604a087bbbf30d89c808d117292457d2d56db4","modified":1570508473989},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"5f555babdf7ea58e536c203f1351536598e68e7f","modified":1570508473990},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"a7cdcb1f67cda9983f6ab6f8d39e407228b1620d","modified":1570508473990},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"b160a4f594421409ad2fcd81b79746664e85cfe9","modified":1570508473991},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"1c6afb5fb685066301c2be1d27b1b32a805efb37","modified":1570508473991},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"b60b8006bbcf31223c6cc28d9794f101c492a1c0","modified":1570508473992},{"_id":"source/_posts/re-start/csredis-in-asp.net-core-how-to-use.md","hash":"89d95e886c5acd9fca9ad24a03cd911ee1ecfa26","modified":1570508473972},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"b553039a4fb38c9dfbe87fe61034a81f685bd590","modified":1570508473992},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"3f1a15fb55ac9a08b259c9de66e9d40f2dbb2b47","modified":1570508473992},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"7a6b395793ec15199b439ee64284d34e9305389c","modified":1570508473993},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"a025672a7095c758f546d336c8d62f7c3e6e92a0","modified":1570508473993},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"5f900f079934857adc6b4fece5603bd8c3dc9369","modified":1570508473994},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"c137ee3ef1c5233d724dc84ab7543e88391656f5","modified":1570508473994},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"0e93657baa1ff8afde49cf2b7cb2d148c047f5a7","modified":1570508473995},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"ba7a6c17ed2518fda0af30ae7f5c32836909505a","modified":1570508473995},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"71c35757c14e384b32561e0f81d212ad374f2a06","modified":1570508473996},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"79c7329cc161b9409d5cac6ccd1158827db7ca68","modified":1570508473996},{"_id":"themes/material-x/source/js/app.js","hash":"9effa2ff626244de1418c6ecbe3fdf39cde5f3f8","modified":1570508474007},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"1e252f962126d233adff8645d47f372bda7f8439","modified":1570508473994},{"_id":"themes/material-x/source/js/search.js","hash":"8ed18241a931a2e9903105383fcb2c281c3a7640","modified":1570508474007},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"97b6abd08ca0754dce4ec140c64ecf45fb6dc065","modified":1570508473985},{"_id":"themes/material-x/source/less/_article.less","hash":"e934577e73da0ab228e049408a9908ea347c1a1f","modified":1570508474009},{"_id":"themes/material-x/source/less/_archive.less","hash":"d46a24a227c7506e848a0637de34a0ad45af4493","modified":1570508474009},{"_id":"themes/material-x/source/less/_color.less","hash":"c799d70aeb10e759e918377bcce856d1d5929b71","modified":1570508474010},{"_id":"themes/material-x/source/less/_defines.less","hash":"0233cb515429823a4d8fad339d44d71b14295550","modified":1570508474011},{"_id":"themes/material-x/source/less/_base.less","hash":"49e0e524ad192f8c40e8b99bf16fbb487d925954","modified":1570508474010},{"_id":"themes/material-x/source/less/_fonts.less","hash":"cd172af2904b6e2d0d8a92a92811d060d7e292d2","modified":1570508474011},{"_id":"themes/material-x/source/less/_header.less","hash":"da6a5ba4ed9dc53fa971ff118db962e1fe0b004b","modified":1570508474012},{"_id":"themes/material-x/source/less/_footer.less","hash":"cab4b448dd6e03979a40205b0f99ff6656c2b32d","modified":1570508474012},{"_id":"themes/material-x/source/less/_links.less","hash":"006a47bf55b0db09fff1b71effe719ec394eec51","modified":1570508474013},{"_id":"themes/material-x/source/less/_layout.less","hash":"081ef4c14d7069ea8bb2fb9f939176c21781ac54","modified":1570508474012},{"_id":"themes/material-x/source/less/_main.less","hash":"9f2b99d48eadefb45af0746619758eedcddbf19f","modified":1570508474013},{"_id":"themes/material-x/source/less/_normalize.less","hash":"9c4040f1c8668fdcf2c7798c1f51b3f658ddbadf","modified":1570508474014},{"_id":"themes/material-x/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1570508474014},{"_id":"themes/material-x/source/less/_search.less","hash":"8abe118f822150ff5ebc1a905621c95f11598530","modified":1570508474014},{"_id":"themes/material-x/source/less/_toc.less","hash":"74270e16434e66105cd7ac2b2822d83bd19930ec","modified":1570508474015},{"_id":"themes/material-x/source/less/_side.less","hash":"5a23fa0d9d939dd1a20ce982a4d28e495fb8168c","modified":1570508474015},{"_id":"themes/material-x/source/less/_tog.less","hash":"142a6697abe2f423aae365e7c799a4a78b519a28","modified":1570508474015},{"_id":"themes/material-x/source/less/_typo.less","hash":"f597c0213ff6d10d86f1bd8d71018a2a604dde71","modified":1570508474016},{"_id":"themes/material-x/layout/_partial/post/word.ejs","hash":"8ea350c23258bc3108fdad5bb6d0c2367a7816dd","modified":1570508473989},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1570508474001},{"_id":"themes/material-x/source/js/volantis.js","hash":"4406cbf00d15eae61d0a3822796612f01cdd101f","modified":1570508474008},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1570508474006},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1570508474003},{"_id":"source/_posts/lin-cms-dotnetcore/StopWords.md","hash":"50905320a0a5c45f9d605604549e04e8949398ac","modified":1575890362542},{"_id":"source/_posts/lin-cms-dotnetcore/design.md","hash":"a7831ea67b54f2bef53f58eddc4190db86674a68","modified":1583472666621},{"_id":"source/_posts/re-start/FreeSql-One-To-Many.md","hash":"f2ebf2a28cc0e82504c98d16973a522341f02d74","modified":1570863278938},{"_id":"public/atom.xml","hash":"8a58be73b9128fb5187940b3490a872613119c08","modified":1575890873001},{"_id":"public/search.xml","hash":"69728a0949030d58edb91c1dcec4bc5034269686","modified":1575890873002},{"_id":"public/content.json","hash":"111159d74b9dc5c33977a02e34ede6cf59335b95","modified":1575890873195},{"_id":"public/404.html","hash":"76cc61a3673ad1b64d6df1ca3b33602988a9a3e0","modified":1575890875249},{"_id":"public/mylist/index.html","hash":"7e7de6a9a8a9e618baaac1e9f782425d519e5790","modified":1575890875251},{"_id":"public/categories/index.html","hash":"d74754893b3120ac91e2e6b5b74845e271ba49bb","modified":1575890875751},{"_id":"public/friends/index.html","hash":"3f3ad55661dccc894e5e6aac0f1c252d0e021255","modified":1575890875752},{"_id":"public/tags/index.html","hash":"487f185b7ede1e25299e2c62298d93e22e45910d","modified":1575890875777},{"_id":"public/about/index.html","hash":"36df9a6745b78a4ecc5fb4e4c89b6d8de9d2054e","modified":1575890875777},{"_id":"public/2019/12/03/lin-cms-dotnetcore/StopWords/index.html","hash":"fdac4e030e657a900205d6b8c8b4f55aafd5e141","modified":1575890875777},{"_id":"public/2019/11/24/lin-cms-dotnetcore/design/index.html","hash":"749aaa9b721c4c5e5683fb88aac08cfd8be9f2a9","modified":1575890875777},{"_id":"public/2019/10/12/re-start/FreeSql-One-To-Many/index.html","hash":"59df1beed6540f36c9e2f77b6b87c424aa4d7cc5","modified":1575890875777},{"_id":"public/2019/10/08/lin-cms-dotnetcore/README/index.html","hash":"59ca374149210f5921e7a66f69dbf32584ec934e","modified":1575890875777},{"_id":"public/2019/10/08/lin-cms-dotnetcore/open-source-begin/index.html","hash":"9e4522c6001020f9e52ef3440fde1f55895eb3b9","modified":1575890875777},{"_id":"public/2019/10/06/re-start/FreeSql-Repository-Delete-Extend/index.html","hash":"8bfc23c4ef9f354d2ff1e3746ab3b0bf5d96dc21","modified":1575890875777},{"_id":"public/2019/09/10/bibilailai/say-what/index.html","hash":"77b869cb3aa0a87604e220bd1a2bb2c9d7f3b486","modified":1575890875778},{"_id":"public/2019/09/05/devops/tools/index.html","hash":"d4ce45936ec7d408d50720628e241ba42fded41a","modified":1575890875778},{"_id":"public/2019/08/26/java/learn-spring-boot-begin/index.html","hash":"e6125d4c818d943ef3c05b549bdcbbcdfe0182cc","modified":1575890875778},{"_id":"public/2019/08/23/re-start/why-we-use-dto/index.html","hash":"f27915cf1b89981832d1352fd84c0e62053e7c51","modified":1575890875778},{"_id":"public/2019/08/01/back-end/ssl-nginx-https-in-2-domain/index.html","hash":"36aa76125df333fa5785f0160bd347f88dc3e9dc","modified":1575890875778},{"_id":"public/2019/07/28/dotnetcore/Qiniu-Object-Storage/index.html","hash":"d93bf59ca585496054b8c150f801ea94702aedb2","modified":1575890875778},{"_id":"public/2019/07/27/re-start/Reflex-Assembly-Get-Controller-Methods-Attribute/index.html","hash":"ffd82c25bc0d93704a7eb248d63cc1d69ad32bb5","modified":1575890875778},{"_id":"public/2019/07/27/abp/MicroServiceDemo-iview/index.html","hash":"89e0408d6d3420c28450dc948866880cede0132e","modified":1575890875778},{"_id":"public/2019/07/07/dotnetcore/ASP.NET-Core-Get-Json-Array-using-IConfiguration/index.html","hash":"d4d259818898ba0d7f6ed83d542537e7bdc21ba1","modified":1575890875778},{"_id":"public/2019/07/07/re-start/csredis-in-asp.net-core-how-to-use/index.html","hash":"6ca384f8eb26ae098aab76fb1eecbd15cf9369e4","modified":1575890875778},{"_id":"public/2019/07/06/re-start/csredis-in-asp-net-core-master-slaver/index.html","hash":"5d41579bff5d7da2201f4bbe7ede7577d4f88179","modified":1575890875778},{"_id":"public/2019/06/30/re-start/FreeSql-sample-blog-RESTful/index.html","hash":"fd7c8cbb79ffc36c8e0da52495f5b0e6b9776449","modified":1575890875779},{"_id":"public/2019/06/30/re-start/FreeSql-asp.net-core-how-to-use/index.html","hash":"0396a294046cd8bd03eaa7b83e124c8af82668f7","modified":1575890875779},{"_id":"public/2019/06/27/devops/travis-ci-devops-to-hexo-ESC/index.html","hash":"d5130d4255579bed2a3bdce2b125d8bd2441bc82","modified":1575890875779},{"_id":"public/2019/06/25/command/Git-how-to-use/index.html","hash":"7fe620dd3488c9f1365364a421b9bb14bf9d7e71","modified":1575890875796},{"_id":"public/2019/06/25/front-end/hexo-theme-material-x-gitalk/index.html","hash":"4556e09e4838c2457b2dd154b83e664141d2a662","modified":1575890875797},{"_id":"public/2019/06/24/re-start/learn-webpack/index.html","hash":"5953e076cfd773e69dd1ebe84b0f6484c4db4533","modified":1575890875797},{"_id":"public/2019/06/17/re-start/fly/index.html","hash":"6e1e5497792e03351a2aa69c73b0918dd85ff260","modified":1575890875797},{"_id":"public/2019/06/12/work/Pain-Points-at-the-Present-Stage/index.html","hash":"7caf28d2feaa657f0c2c958303321d6b5c8ca1b9","modified":1575890875797},{"_id":"public/2019/06/12/abp/ABP-Code-Generator/index.html","hash":"85e8376395a1b9047a3acef7aa6001fc58ca8146","modified":1575890875797},{"_id":"public/2019/06/12/front-end/Learn-TypeScript-BaseType/index.html","hash":"bbc4b9e8a735f2fc33351ab5c141331e46daaf8b","modified":1575890875797},{"_id":"public/2019/06/12/back-end/Visual-Studio-Increase-Copyright-Information/index.html","hash":"aa5faeeac23afec46cc516eee6b3dfedf9270152","modified":1575890875797},{"_id":"public/2019/06/12/back-end/RazorEngine-Code-Generation-Principle/index.html","hash":"66bcebc146d34fe27c402d2ff9858524b2b7408d","modified":1575890875797},{"_id":"public/2019/06/10/front-end/Useful-front-end-and-back-end/index.html","hash":"dab1fc46508564b65388d55613232059f8bcadb4","modified":1575890875797},{"_id":"public/2019/06/10/back-end/Docker-nginx-Learn/index.html","hash":"02d063b851a5b73b7784f040faf170dc8ededdb7","modified":1575890875797},{"_id":"public/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/index.html","hash":"0bbf3c4edb7dc6447e44afa203e65b972034eabf","modified":1575890875797},{"_id":"public/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/index.html","hash":"3e63c11c856e68798791d745f80063ce6d5f656a","modified":1575890875797},{"_id":"public/2019/05/15/command/Daily-Command-Line-Recording/index.html","hash":"fe0df7e974e4a74beac5ae71b1733818b9abe33f","modified":1575890875798},{"_id":"public/2019/05/08/command/Rabbitmq-And-Mongodb/index.html","hash":"6b8098674b6fb75dffb8651277c1486ca04fd830","modified":1575890875798},{"_id":"public/2019/03/24/command/Collect-Documents/index.html","hash":"ac4b66cf2f0447099eeb5537d81c5a41755b781c","modified":1575890875798},{"_id":"public/2019/03/12/abp/ABP-How-To-Use/index.html","hash":"4a9490db6281537836a53070110a9c1dbe7df341","modified":1575890875798},{"_id":"public/2019/01/09/abp/ABP-Base-Code/index.html","hash":"2cb71f32b8c8b0611b13846de7cdc90ee9ed6850","modified":1575890875798},{"_id":"public/2018/12/26/back-end/Rshiny-Framework-How-To-Use/index.html","hash":"66ce93d1a56ff2a048f38c0baf072c37a0c53692","modified":1575890875798},{"_id":"public/2018/12/02/back-end/MySQL-Study/index.html","hash":"f216e2980b8452273c2aefe0829977084ade5a1f","modified":1575890875798},{"_id":"public/2018/07/03/abp/Note-DotNET-interacts-with-R/index.html","hash":"bd7b9c3860ab25b16b78b8a05fb6874265c23c3b","modified":1575890875804},{"_id":"public/2018/06/02/back-end/Navicat-Premium-12-Free-download/index.html","hash":"3369ff7c89b0bcf78079c9a0d4addf5f4a29a84b","modified":1575890875804},{"_id":"public/2017/01/10/back-end/Node.js-Construction-of-Tree-Structure/index.html","hash":"ab7b4ffcc68468bd29d7c837932213fad260d105","modified":1575890875804},{"_id":"public/archives/index.html","hash":"6040929268efc3c93e2c31cf55198dc4ac2ffe06","modified":1575890875804},{"_id":"public/archives/page/2/index.html","hash":"6040929268efc3c93e2c31cf55198dc4ac2ffe06","modified":1575890875804},{"_id":"public/archives/page/3/index.html","hash":"6040929268efc3c93e2c31cf55198dc4ac2ffe06","modified":1575890875804},{"_id":"public/archives/page/4/index.html","hash":"6040929268efc3c93e2c31cf55198dc4ac2ffe06","modified":1575890875804},{"_id":"public/archives/page/5/index.html","hash":"6040929268efc3c93e2c31cf55198dc4ac2ffe06","modified":1575890875804},{"_id":"public/archives/2017/index.html","hash":"5d2678b8ee20f3033f910d3aa2d8bc692fd8164c","modified":1575890875804},{"_id":"public/archives/2017/01/index.html","hash":"c2e6676cd588fc957312ebcdfcff680fd0314fe8","modified":1575890875804},{"_id":"public/archives/2018/index.html","hash":"4087e7b9bfd9ca21d3a21a907faa3dd8b735ba9c","modified":1575890875804},{"_id":"public/archives/2018/06/index.html","hash":"4ecbe2e6096ebde2bfd55d57535a9045aac0efe7","modified":1575890875805},{"_id":"public/archives/2018/07/index.html","hash":"8b88cdb638387546cf2cb5ca210d4c8b5bb78a35","modified":1575890875805},{"_id":"public/archives/2018/12/index.html","hash":"607db6d80e7ae5d2650442aa26b6e223f0027799","modified":1575890875805},{"_id":"public/archives/2019/index.html","hash":"fc605cf1764de4ece8afecec0512c7f9916b95c2","modified":1575890875805},{"_id":"public/archives/2019/page/2/index.html","hash":"60f271d092441d28bf0fd8cb886f928af36fd5b5","modified":1575890875805},{"_id":"public/archives/2019/page/3/index.html","hash":"29f6e30b1a978716461448781576fa05a488956c","modified":1575890875805},{"_id":"public/archives/2019/page/4/index.html","hash":"046bd4cb1e6e5ecdc16afb17d1a69d23c18726dc","modified":1575890875805},{"_id":"public/archives/2019/01/index.html","hash":"3c04f9e55765b9346f4ad7d8ad6b55561496f948","modified":1575890875805},{"_id":"public/archives/2019/03/index.html","hash":"85d8f495dea3abdf0fa5a1b03b39f689f565debb","modified":1575890875805},{"_id":"public/archives/2019/05/index.html","hash":"515d60bb5c24cc6a8752d401a4f431595d437919","modified":1575890875805},{"_id":"public/archives/2019/06/index.html","hash":"6d583bb48a05035f86268a42d9ccd0fb3cfaec25","modified":1575890875805},{"_id":"public/archives/2019/06/page/2/index.html","hash":"3568b129f432e26773ef04cb98929d9e1f8f0661","modified":1575890875805},{"_id":"public/archives/2019/07/index.html","hash":"2ed6534c1bcedaa4c58fe0060f9f93c60fd1541c","modified":1575890875805},{"_id":"public/archives/2019/08/index.html","hash":"62ea19b36127847561c12b89cce0942e78f4ca53","modified":1575890875805},{"_id":"public/archives/2019/09/index.html","hash":"7955342b621dd374a428c115a4d3a267cb33debd","modified":1575890875805},{"_id":"public/archives/2019/10/index.html","hash":"b5203a690697f324c179e8b3a4a9baa05030648b","modified":1575890875806},{"_id":"public/archives/2019/11/index.html","hash":"b6256b3bd974670c6c5bda1c5269e9515d998feb","modified":1575890875806},{"_id":"public/archives/2019/12/index.html","hash":"4d06c412337290505d73be102159177baa2cb61f","modified":1575890875806},{"_id":"public/categories/哔哔赖赖/index.html","hash":"8a724fc0f0b53ac8f983aec97efe711a4e549cd0","modified":1575890875806},{"_id":"public/categories/ABP/index.html","hash":"3ba0be7f7eff1a081811689928afb22c215f9a12","modified":1575890875806},{"_id":"public/categories/日常问题/index.html","hash":"750602a02c4793b780c42bea7d38010a0862d96f","modified":1575890875806},{"_id":"public/categories/命令行/index.html","hash":"8be89c18b95b2f5befb517e4511321196dcf6c2b","modified":1575890875806},{"_id":"public/categories/学习记录/index.html","hash":"3457bfbfb8d4ddc1a7afb94224faa136a97f40cf","modified":1575890875806},{"_id":"public/categories/MySQL/index.html","hash":"1d25524524bb2086435fea5bf0bf69e32fb77138","modified":1575890875806},{"_id":"public/categories/大后端/index.html","hash":"724ae363920f02d95cbe2d3e6ba0238123bc7329","modified":1575890875806},{"_id":"public/categories/NET-Framework/index.html","hash":"0ae82a37d9d4e537e73a9cf7ffbf1c0e54bbc209","modified":1575890875806},{"_id":"public/categories/Visual-Studio/index.html","hash":"cafffc48a05ec2c73dadf1b447c05a8b2dcd3be2","modified":1575890875806},{"_id":"public/categories/NET-Core/index.html","hash":"806f33aab685f3b9b12cc9e7a851c12bdcbab213","modified":1575890875806},{"_id":"public/categories/DevOps/index.html","hash":"3e23138b7a217de4b475aa878a7638c42f2e80ca","modified":1575890875806},{"_id":"public/categories/大前端/index.html","hash":"55599914dc431ed41d0fa767fb03bfc97b2c597c","modified":1575890875806},{"_id":"public/categories/hexo/index.html","hash":"6496e35e116973b43621b2e539e4f9a2481327d5","modified":1575890875806},{"_id":"public/categories/Java/index.html","hash":"46d5315a6f71076bb6824766c0f84f4e24f90651","modified":1575890875807},{"_id":"public/categories/lin-cms-dotnetcore/index.html","hash":"fbbb0a5eba30e446a825ddbf300b48d643ae3d86","modified":1575890875807},{"_id":"public/categories/重新出发/index.html","hash":"ddf1830304273fa04952f7568c0c1e05fc74646f","modified":1575890875807},{"_id":"public/page/2/index.html","hash":"cf607014d1fd9369eeef1ef381b76812251bb492","modified":1575890875807},{"_id":"public/categories/工作/index.html","hash":"a5d436e81d59e71d4da3d24d48738a31c943ddae","modified":1575890875807},{"_id":"public/page/3/index.html","hash":"efcf93ef5da08d4211c2995d76d7851684932b7d","modified":1575890875807},{"_id":"public/page/4/index.html","hash":"fa6dc3de12ef284fe8369fb0a84b25be598f5e36","modified":1575890875807},{"_id":"public/page/5/index.html","hash":"9a81920ab6453b51c3d6ecdb46cfe7f0e72a4bc3","modified":1575890875807},{"_id":"public/tags/学习记录/index.html","hash":"a30494c5370b3ea2dc55589649993843ce46832a","modified":1575890875807},{"_id":"public/tags/ABP-代码生成器/index.html","hash":"a28ca5114fd77f8cba84b854971f5ff689873d9a","modified":1575890875807},{"_id":"public/tags/ABP/index.html","hash":"b1a3c7617eb9be9f3a4a60e5fcb989b02f3b8456","modified":1575890875807},{"_id":"public/index.html","hash":"89f127f308c7bb2dd378c55f243d9ce4ca16771d","modified":1575890875807},{"_id":"public/tags/Ubuntu/index.html","hash":"401168724f6ad36070117eeccc5dee4aaf98ade9","modified":1575890875807},{"_id":"public/tags/Redis/index.html","hash":"7e4ea5572006ca541d571d7527acd526df2aefe6","modified":1575890875807},{"_id":"public/tags/NET-Core/index.html","hash":"5fb11e78b24a381898adb0f1ebaf76b8a0262162","modified":1575890875807},{"_id":"public/tags/IIS/index.html","hash":"a80dcd2159aa244833d31c2b010fd688bbedf6b1","modified":1575890875808},{"_id":"public/tags/Git/index.html","hash":"9125a493b998a829e19f8a533d7366791fb424d4","modified":1575890875808},{"_id":"public/tags/RabbitMQ/index.html","hash":"c6072b4d9ccc984906fd54cf459b0b44efdc52f4","modified":1575890875808},{"_id":"public/tags/Mongodb/index.html","hash":"738a546c6f6a748756b142aa379b7c91cde8d804","modified":1575890875808},{"_id":"public/tags/nginx/index.html","hash":"8f344dc59817b4e54957d099de291ffda12d8f87","modified":1575890875808},{"_id":"public/tags/Docker/index.html","hash":"710183e527d0086a8bb48c805ae74ebad40fff95","modified":1575890875808},{"_id":"public/tags/MySQL/index.html","hash":"de4156e7c1b81b315605cdda287ce2b4b3a183e5","modified":1575890875808},{"_id":"public/tags/Navicat-Premium-12/index.html","hash":"48b4284f0e1f062f085c2f4db2ba08cb295b74e4","modified":1575890875808},{"_id":"public/tags/Node-js/index.html","hash":"aca3009bc78db010df72ef7ef753473ba9ef6376","modified":1575890875808},{"_id":"public/tags/NET-Framework/index.html","hash":"95ccb5106e8091019d8914c89e2e0eff22f33d63","modified":1575890875808},{"_id":"public/tags/RazorEngine/index.html","hash":"da4a2fe064fdb3565c13daf5b6d3dd74a1a7228e","modified":1575890875808},{"_id":"public/tags/代码生成器/index.html","hash":"6c8b1c703017296e93cb205d5dd457613f73cde1","modified":1575890875808},{"_id":"public/tags/Rshiny/index.html","hash":"7b4ec00ff5863d1defd6628f21b8d3008233540f","modified":1575890875808},{"_id":"public/tags/NET/index.html","hash":"353ae8d8939c8c82a80f5287653c105543a6272b","modified":1575890875808},{"_id":"public/tags/Visual-Studio/index.html","hash":"9da1dca83e3fdbb4b1d43552f4a9a99487d8ab0c","modified":1575890875808},{"_id":"public/tags/ubuntu/index.html","hash":"9df9083b73d9b130f3ff09cc69e691639439f153","modified":1575890875808},{"_id":"public/tags/https/index.html","hash":"9401019f6bed31425ff9df49ccdd765b30026303","modified":1575890875808},{"_id":"public/tags/travis-cli/index.html","hash":"6813f1b80f0236b451ee1cc6168398aa4e82fb4b","modified":1575890875808},{"_id":"public/tags/ASP-NET-Core/index.html","hash":"847f39824b218758a9011339e3ae2b2243b26f4f","modified":1575890875809},{"_id":"public/tags/ssl/index.html","hash":"3da9ab4e78d51ca0039a92860f055718ef1068df","modified":1575890875809},{"_id":"public/tags/hexo/index.html","hash":"390de93898cc1e2efda1ee58908eca3a771574b7","modified":1575890875809},{"_id":"public/tags/material-x/index.html","hash":"44b96dfa5fcbbbcd4900bb9c3e00443efd4a0f47","modified":1575890875809},{"_id":"public/tags/gitalk/index.html","hash":"1b4f232a3fc39e388f6c1263a308dbe8eac7e61c","modified":1575890875809},{"_id":"public/tags/spring-boot/index.html","hash":"018bc9b82deab5a4487823bc6528fb3ad92e1cb9","modified":1575890875809},{"_id":"public/tags/对象存储/index.html","hash":"1d1a2fa32e5ceca037bff3f31ffceb0e6112a1ef","modified":1575890875809},{"_id":"public/tags/账号安全/index.html","hash":"be534c3082d52870b7be115e3019a172767f72ad","modified":1575890875809},{"_id":"public/tags/lin-cms/index.html","hash":"1afc7e320571420ce9bd439cea2cbc049fc02a0c","modified":1575890875809},{"_id":"public/tags/开源/index.html","hash":"377f9d963bf334b541fa01bcf63ecac1b3e7a735","modified":1575890875809},{"_id":"public/tags/隐私/index.html","hash":"4eb59e1db6a14c7619dd254bb17a3a3adad9edd0","modified":1575890875809},{"_id":"public/tags/TypeScript/index.html","hash":"93c764690bc6139d40245f333aba800b272e3f70","modified":1575890875809},{"_id":"public/tags/FreeSql/index.html","hash":"88e2654c0ab66d855b7cff3dea0b820857c9a7fd","modified":1575890875809},{"_id":"public/tags/webpack/index.html","hash":"a44b06126d3f806f4b92b8757add621f12c5c8fe","modified":1575890875809},{"_id":"public/tags/R-NET/index.html","hash":"d985777479d7ff4d1972d9b0e3d51ba6f07df599","modified":1575890875809},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1575890875919},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1575890875927},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1575890876016},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1575890876076},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1575890876498},{"_id":"public/style.css","hash":"ac37726cd3f723a476bcea2ef9a58d49d4e3cf41","modified":1575890876524},{"_id":"public/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1575890876771},{"_id":"source/_posts/dotnetcore/Blazor-WebAssembly-ToDoList.md","hash":"560b78ff2504bb7c5241ca52b370ee240c32d6a6","modified":1591447980219},{"_id":"source/_posts/lin-cms-dotnetcore/spa-github-login.md","hash":"c07039a33196afa8c124c4bb9276fe68b7ad1301","modified":1583472527792}],"Category":[{"name":"哔哔赖赖","_id":"ck2362yew0008m0twn3k8dgwn"},{"name":"ABP","_id":"ck2362yfb000dm0tw6mcdh58v"},{"name":"日常问题","_id":"ck2362yfv000om0twqzn7bnk0"},{"name":"命令行","_id":"ck2362ygc000wm0twk7sftmac"},{"name":"学习记录","_id":"ck2362ygz0015m0twmj64hpao"},{"name":"MySQL","_id":"ck2362yhf001dm0twozih51g1"},{"name":"大后端","_id":"ck2362yhy001mm0twc70zcjvj"},{"name":".NET Framework","_id":"ck2362yi7001rm0twa2d9c4wc"},{"name":"Visual Studio","_id":"ck2362yij001xm0twcwqs4rw6"},{"name":".NET Core","_id":"ck2362yip0025m0twpj0zyadp"},{"name":"DevOps","_id":"ck2362yl0003em0tw9jc6hkh3"},{"name":"大前端","_id":"ck2362yle003km0twt1xauj3y"},{"name":"hexo","_id":"ck2362ymb003wm0twj2hiy79z"},{"name":"Java","_id":"ck2362yms0043m0twqavdx9zu"},{"name":"lin-cms-dotnetcore","_id":"ck2362yn80049m0twv88fjqki"},{"name":"工作","_id":"ck2362yna004fm0twytd7chgu"},{"name":"重新出发","_id":"ck2362ync004lm0twkl7uc6sz"}],"Data":[],"Page":[{"layout":"page","title":"404 Not Found","body":["article","comments"],"meta":{"header":false,"footer":false},"sidebar":false,"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"gitalk":{"id":"/404"},"_content":"\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\ngitalk:\n  id: /404\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","date":"2019-10-08T04:21:13.954Z","updated":"2019-10-08T04:21:13.954Z","path":"404.html","comments":1,"_id":"ck2362ybl0000m0twxv6pnsj3","content":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<h1 id=\"很抱歉，您访问的页面不存在\"><a href=\"#很抱歉，您访问的页面不存在\" class=\"headerlink\" title=\"很抱歉，您访问的页面不存在\"></a><center>很抱歉，您访问的页面不存在</center></h1><center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<h1 id=\"很抱歉，您访问的页面不存在\"><a href=\"#很抱歉，您访问的页面不存在\" class=\"headerlink\" title=\"很抱歉，您访问的页面不存在\"></a><center>很抱歉，您访问的页面不存在</center></h1><center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>"},{"layout":"list","type":"mylist","index":true,"_content":"","source":"mylist/index.md","raw":"---\nlayout: list\ntype: mylist\nindex: true\n---\n","date":"2019-10-23T10:59:50.666Z","updated":"2019-10-08T04:21:13.976Z","path":"mylist/index.html","title":"","comments":1,"_id":"ck2362yda0001m0tw0nnq3t87","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"category","index":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle:   所有分类\n---","date":"2019-10-08T04:21:13.975Z","updated":"2019-10-08T04:21:13.975Z","path":"categories/index.html","comments":1,"_id":"ck2362ydd0002m0twksdz8zp5","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"links","title":"我的朋友们","links":[{"group":"欢迎各行各业的朋友","icon":"fas fa-handshake","items":[{"name":"<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 洪卫的博客","avatar":"https://sunhwee.com/medias/avatars/hwsun.jpg","url":"https://sunhwee.com/","backgroundColor":"#5e94e9","textColor":"#efefef","tags":["博客","洪卫"]},{"name":"<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> xaoxuus blog","avatar":"https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg","url":"https://xaoxuu.com/blog/","backgroundColor":"#869929","textColor":"#FFFD","tags":["iOS"]},{"name":"<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 淡若清风","avatar":"http://www.betteralong.top/static/avatar08.jpg","url":"http://www.betteralong.top","backgroundColor":"#fff","textColor":"#666","tags":["前端"]}]}],"_content":"\n<br>\n\n各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～\n\n> 名称： xaoxuu's blog\n头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\n网址： https://xaoxuu.com/blog/\n标签： iOS\n","source":"friends/index.md","raw":"---\nlayout: links\ntitle: 我的朋友们\n\nlinks:\n  - group: 欢迎各行各业的朋友\n    icon: fas fa-handshake\n    items:\n    - name: '<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 洪卫的博客'\n      avatar: https://sunhwee.com/medias/avatars/hwsun.jpg\n      url: 'https://sunhwee.com/'\n      backgroundColor: '#5e94e9'\n      textColor: '#efefef'\n      tags:\n      - 博客\n      - 洪卫\n \n    - name: '<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> xaoxuus blog'\n      avatar: https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\n      url: 'https://xaoxuu.com/blog/'\n      backgroundColor: '#869929'\n      textColor: '#FFFD'\n      tags:\n      - iOS\n\n    - name: '<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 淡若清风'\n      avatar: http://www.betteralong.top/static/avatar08.jpg\n      url: 'http://www.betteralong.top'\n      backgroundColor: '#fff'\n      textColor: '#666'\n      tags:\n      - 前端\n---\n\n<br>\n\n各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～\n\n> 名称： xaoxuu's blog\n头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\n网址： https://xaoxuu.com/blog/\n标签： iOS\n","date":"2019-10-24T14:41:39.953Z","updated":"2019-10-24T14:41:39.953Z","path":"friends/index.html","_id":"ck2362ydg0003m0twib7sbo40","comments":1,"content":"<br>\n\n<p>各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～</p>\n<blockquote>\n<p>名称： xaoxuu’s blog<br>头像： <a href=\"https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\" target=\"_blank\" rel=\"noopener\">https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg</a><br>网址： <a href=\"https://xaoxuu.com/blog/\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/blog/</a><br>标签： iOS</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<br>\n\n<p>各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～</p>\n<blockquote>\n<p>名称： xaoxuu’s blog<br>头像： <a href=\"https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\" target=\"_blank\" rel=\"noopener\">https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg</a><br>网址： <a href=\"https://xaoxuu.com/blog/\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/blog/</a><br>标签： iOS</p>\n</blockquote>\n"},{"layout":"tag","index":true,"title":"所有标签","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: 所有标签\n---","date":"2019-10-08T04:21:13.976Z","updated":"2019-10-08T04:21:13.976Z","path":"tags/index.html","comments":1,"_id":"ck2362ydi0004m0tw5irdtr5z","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"关于","valine":{"placeholder":"有什么想对我说的呢？"},"_content":"\n## 各平台\n\n- CSDN https://blog.csdn.net/q710777720/\n- hexo 构建的博客 http://blog.igeekfan.cn\n- 简书 https://www.jianshu.com/u/1101382f8bdf\n\n\n## 新域名\n- http://baimocore.cn\n\n\n## 言论\n\n- 你如今的气质里，藏着你走过的路，读过的书，\n\n## 书\n- 了不起的盖茨比\n- 三体（三本）\n- 村上春树：挪威的森林、舞舞舞、1Q84（三本）、\n\n\n## Github打磨\n 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术\n \n - 开源主页 [https://github.com/luoyunchong](https://github.com/luoyunchong)\n - 一个博客，.NET 版本，[http://igeekfan.cn/](http://igeekfan.cn/)\n - 一个ABP的代码生成器，使用 **.NET Core2.2**、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n - 基于ABP (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 [https://luoyunchong.github.io/staticfiles/](https://luoyunchong.github.io/staticfiles/)\n - 基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理、审计日志、组织机构管理、基础资料字典、字典类别管理功能，基于密码模式的token机制。      \n    - 开源地址[https://github.com/luoyunchong/abp](https://github.com/luoyunchong/abp)\n     - 前端项目地址 https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\n     - 密码模式的token生成 https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs\n - 一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages [https://luoyunchong.github.io/](https://luoyunchong.github.io/)\n - 一个基于 ASP **.NET Core 2.2** 的基础集成方案 [https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n    *  JWT集成\n    *  EF实现事务一致性\n    *  统一的创建人、创建时间、删除人、删除时间，软删除\n    *  集成 EF Core MySQL版本\n    *  AutoMapper集成 \n- 一个基于. NET Core学习示例,计划要写的demo如下：[https://github.com/luoyunchong/dotnetcore-examples](https://github.com/luoyunchong/dotnetcore-examples)\n    * FreeSql\n    * csredis\n    * StackExchange.Redis\n    * WebApiClient\n    * EntityFrameworkCore\n    * Swagger\n    * AutoMapper\n    * AutoFac\n\n## 学习交流\n- QQ群：762828442\n\n![NET Core搬砖队群二维码.png](https://i.loli.net/2019/07/04/5d1cdba10e36716402.png)\n\n","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\n# body: [article, grid, comments]\nvaline:\n  placeholder: 有什么想对我说的呢？\n# sidebar: false\n---\n\n## 各平台\n\n- CSDN https://blog.csdn.net/q710777720/\n- hexo 构建的博客 http://blog.igeekfan.cn\n- 简书 https://www.jianshu.com/u/1101382f8bdf\n\n\n## 新域名\n- http://baimocore.cn\n\n\n## 言论\n\n- 你如今的气质里，藏着你走过的路，读过的书，\n\n## 书\n- 了不起的盖茨比\n- 三体（三本）\n- 村上春树：挪威的森林、舞舞舞、1Q84（三本）、\n\n\n## Github打磨\n 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术\n \n - 开源主页 [https://github.com/luoyunchong](https://github.com/luoyunchong)\n - 一个博客，.NET 版本，[http://igeekfan.cn/](http://igeekfan.cn/)\n - 一个ABP的代码生成器，使用 **.NET Core2.2**、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n - 基于ABP (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 [https://luoyunchong.github.io/staticfiles/](https://luoyunchong.github.io/staticfiles/)\n - 基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理、审计日志、组织机构管理、基础资料字典、字典类别管理功能，基于密码模式的token机制。      \n    - 开源地址[https://github.com/luoyunchong/abp](https://github.com/luoyunchong/abp)\n     - 前端项目地址 https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\n     - 密码模式的token生成 https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs\n - 一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages [https://luoyunchong.github.io/](https://luoyunchong.github.io/)\n - 一个基于 ASP **.NET Core 2.2** 的基础集成方案 [https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n    *  JWT集成\n    *  EF实现事务一致性\n    *  统一的创建人、创建时间、删除人、删除时间，软删除\n    *  集成 EF Core MySQL版本\n    *  AutoMapper集成 \n- 一个基于. NET Core学习示例,计划要写的demo如下：[https://github.com/luoyunchong/dotnetcore-examples](https://github.com/luoyunchong/dotnetcore-examples)\n    * FreeSql\n    * csredis\n    * StackExchange.Redis\n    * WebApiClient\n    * EntityFrameworkCore\n    * Swagger\n    * AutoMapper\n    * AutoFac\n\n## 学习交流\n- QQ群：762828442\n\n![NET Core搬砖队群二维码.png](https://i.loli.net/2019/07/04/5d1cdba10e36716402.png)\n\n","date":"2019-10-08T04:21:13.974Z","updated":"2019-10-08T04:21:13.974Z","path":"about/index.html","comments":1,"_id":"ck2362ydk0005m0twpi3bq7td","content":"<h2 id=\"各平台\"><a href=\"#各平台\" class=\"headerlink\" title=\"各平台\"></a>各平台</h2><ul>\n<li>CSDN <a href=\"https://blog.csdn.net/q710777720/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/</a></li>\n<li>hexo 构建的博客 <a href=\"http://blog.igeekfan.cn\">http://blog.igeekfan.cn</a></li>\n<li>简书 <a href=\"https://www.jianshu.com/u/1101382f8bdf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/1101382f8bdf</a></li>\n</ul>\n<h2 id=\"新域名\"><a href=\"#新域名\" class=\"headerlink\" title=\"新域名\"></a>新域名</h2><ul>\n<li><a href=\"http://baimocore.cn\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn</a></li>\n</ul>\n<h2 id=\"言论\"><a href=\"#言论\" class=\"headerlink\" title=\"言论\"></a>言论</h2><ul>\n<li>你如今的气质里，藏着你走过的路，读过的书，</li>\n</ul>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li>了不起的盖茨比</li>\n<li>三体（三本）</li>\n<li>村上春树：挪威的森林、舞舞舞、1Q84（三本）、</li>\n</ul>\n<h2 id=\"Github打磨\"><a href=\"#Github打磨\" class=\"headerlink\" title=\"Github打磨\"></a>Github打磨</h2><p> 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术</p>\n<ul>\n<li>开源主页 <a href=\"https://github.com/luoyunchong\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong</a></li>\n<li>一个博客，.NET 版本，<a href=\"http://igeekfan.cn/\" target=\"_blank\" rel=\"noopener\">http://igeekfan.cn/</a></li>\n<li>一个ABP的代码生成器，使用 <strong>.NET Core2.2</strong>、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n<li>基于ABP (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 <a href=\"https://luoyunchong.github.io/staticfiles/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/staticfiles/</a></li>\n<li>基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理、审计日志、组织机构管理、基础资料字典、字典类别管理功能，基于密码模式的token机制。      <ul>\n<li>开源地址<a href=\"https://github.com/luoyunchong/abp\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp</a><ul>\n<li>前端项目地址 <a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice</a></li>\n<li>密码模式的token生成 <a href=\"https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages <a href=\"https://luoyunchong.github.io/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/</a></li>\n<li>一个基于 ASP <strong>.NET Core 2.2</strong> 的基础集成方案 <a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a><ul>\n<li>JWT集成</li>\n<li>EF实现事务一致性</li>\n<li>统一的创建人、创建时间、删除人、删除时间，软删除</li>\n<li>集成 EF Core MySQL版本</li>\n<li>AutoMapper集成 <ul>\n<li>一个基于. NET Core学习示例,计划要写的demo如下：<a href=\"https://github.com/luoyunchong/dotnetcore-examples\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples</a></li>\n</ul>\n</li>\n<li>FreeSql</li>\n<li>csredis</li>\n<li>StackExchange.Redis</li>\n<li>WebApiClient</li>\n<li>EntityFrameworkCore</li>\n<li>Swagger</li>\n<li>AutoMapper</li>\n<li>AutoFac</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学习交流\"><a href=\"#学习交流\" class=\"headerlink\" title=\"学习交流\"></a>学习交流</h2><ul>\n<li>QQ群：762828442</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/04/5d1cdba10e36716402.png\" alt=\"NET Core搬砖队群二维码.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"各平台\"><a href=\"#各平台\" class=\"headerlink\" title=\"各平台\"></a>各平台</h2><ul>\n<li>CSDN <a href=\"https://blog.csdn.net/q710777720/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/</a></li>\n<li>hexo 构建的博客 <a href=\"http://blog.igeekfan.cn\">http://blog.igeekfan.cn</a></li>\n<li>简书 <a href=\"https://www.jianshu.com/u/1101382f8bdf\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/1101382f8bdf</a></li>\n</ul>\n<h2 id=\"新域名\"><a href=\"#新域名\" class=\"headerlink\" title=\"新域名\"></a>新域名</h2><ul>\n<li><a href=\"http://baimocore.cn\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn</a></li>\n</ul>\n<h2 id=\"言论\"><a href=\"#言论\" class=\"headerlink\" title=\"言论\"></a>言论</h2><ul>\n<li>你如今的气质里，藏着你走过的路，读过的书，</li>\n</ul>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li>了不起的盖茨比</li>\n<li>三体（三本）</li>\n<li>村上春树：挪威的森林、舞舞舞、1Q84（三本）、</li>\n</ul>\n<h2 id=\"Github打磨\"><a href=\"#Github打磨\" class=\"headerlink\" title=\"Github打磨\"></a>Github打磨</h2><p> 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术</p>\n<ul>\n<li>开源主页 <a href=\"https://github.com/luoyunchong\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong</a></li>\n<li>一个博客，.NET 版本，<a href=\"http://igeekfan.cn/\" target=\"_blank\" rel=\"noopener\">http://igeekfan.cn/</a></li>\n<li>一个ABP的代码生成器，使用 <strong>.NET Core2.2</strong>、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n<li>基于ABP (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 <a href=\"https://luoyunchong.github.io/staticfiles/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/staticfiles/</a></li>\n<li>基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理、审计日志、组织机构管理、基础资料字典、字典类别管理功能，基于密码模式的token机制。      <ul>\n<li>开源地址<a href=\"https://github.com/luoyunchong/abp\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp</a><ul>\n<li>前端项目地址 <a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice</a></li>\n<li>密码模式的token生成 <a href=\"https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/blob/master/samples/Microservice/applications/AuthServer.Host/Controllers/AccountController.cs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages <a href=\"https://luoyunchong.github.io/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/</a></li>\n<li>一个基于 ASP <strong>.NET Core 2.2</strong> 的基础集成方案 <a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a><ul>\n<li>JWT集成</li>\n<li>EF实现事务一致性</li>\n<li>统一的创建人、创建时间、删除人、删除时间，软删除</li>\n<li>集成 EF Core MySQL版本</li>\n<li>AutoMapper集成 <ul>\n<li>一个基于. NET Core学习示例,计划要写的demo如下：<a href=\"https://github.com/luoyunchong/dotnetcore-examples\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples</a></li>\n</ul>\n</li>\n<li>FreeSql</li>\n<li>csredis</li>\n<li>StackExchange.Redis</li>\n<li>WebApiClient</li>\n<li>EntityFrameworkCore</li>\n<li>Swagger</li>\n<li>AutoMapper</li>\n<li>AutoFac</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学习交流\"><a href=\"#学习交流\" class=\"headerlink\" title=\"学习交流\"></a>学习交流</h2><ul>\n<li>QQ群：762828442</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/04/5d1cdba10e36716402.png\" alt=\"NET Core搬砖队群二维码.png\"></p>\n"}],"Post":[{"title":"哔哔赖赖","date":"2019-09-10T06:42:01.000Z","description":"代码之道哔哔赖赖","_content":"\n\n## 代码之道\n- 过早重构代码是万恶之源\n- 过渡设计浪费生命\n- 要知其然而所以然\n- 解决问题才是关键，目前不建类库能不能解决的你的问题，如果能 为什么非要自己给自己找麻烦，况且还不知道建一个类库现阶段能给你带来什么好处。\n- 不懂架构的作用，现在只用会各种类库，还需要不断地精进自己的水平，一步一步去完成项目，而不是全部用现成的厚重框架。\n- 规范，是协同合作的基础，即约束。\n\n## 言行\n- 切勿以貌取人，背后言论他人。\n- 可怜之人必有可恨之处。\n- 不和别人争辩无意义的东西\n\n\n## 学习\n- 生活中有那么多疑惑，为什么不去学习呢，惑而学之，是为已用。\n\n## 三国\n- 三国，英雄并起，所谓时势造英雄，英雄亦造时势。\n\n\n## 总结\n- 最近看了什么篇文章，一个人是如何废掉的。没仔细看，但理解了一个含义，一个不是因为做了什么什么事就是废掉的表现，而是在该做什么事的时候不去做什么事，比如该睡觉时不睡觉，该学习时不学习。\n\n**总结一句话就是在适当的时间做适当的事，不拖延。**","source":"_posts/bibilailai/say-what.md","raw":"---\ntitle: 哔哔赖赖\ndate: 2019-9-10 14:42:01\ndescription: 代码之道哔哔赖赖\ntags: \n- 学习记录\ncategory:\n- 哔哔赖赖\n---\n\n\n## 代码之道\n- 过早重构代码是万恶之源\n- 过渡设计浪费生命\n- 要知其然而所以然\n- 解决问题才是关键，目前不建类库能不能解决的你的问题，如果能 为什么非要自己给自己找麻烦，况且还不知道建一个类库现阶段能给你带来什么好处。\n- 不懂架构的作用，现在只用会各种类库，还需要不断地精进自己的水平，一步一步去完成项目，而不是全部用现成的厚重框架。\n- 规范，是协同合作的基础，即约束。\n\n## 言行\n- 切勿以貌取人，背后言论他人。\n- 可怜之人必有可恨之处。\n- 不和别人争辩无意义的东西\n\n\n## 学习\n- 生活中有那么多疑惑，为什么不去学习呢，惑而学之，是为已用。\n\n## 三国\n- 三国，英雄并起，所谓时势造英雄，英雄亦造时势。\n\n\n## 总结\n- 最近看了什么篇文章，一个人是如何废掉的。没仔细看，但理解了一个含义，一个不是因为做了什么什么事就是废掉的表现，而是在该做什么事的时候不去做什么事，比如该睡觉时不睡觉，该学习时不学习。\n\n**总结一句话就是在适当的时间做适当的事，不拖延。**","slug":"bibilailai/say-what","published":1,"updated":"2019-10-08T05:22:41.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yeg0006m0twqjv44abz","content":"<h2 id=\"代码之道\"><a href=\"#代码之道\" class=\"headerlink\" title=\"代码之道\"></a>代码之道</h2><ul>\n<li>过早重构代码是万恶之源</li>\n<li>过渡设计浪费生命</li>\n<li>要知其然而所以然</li>\n<li>解决问题才是关键，目前不建类库能不能解决的你的问题，如果能 为什么非要自己给自己找麻烦，况且还不知道建一个类库现阶段能给你带来什么好处。</li>\n<li>不懂架构的作用，现在只用会各种类库，还需要不断地精进自己的水平，一步一步去完成项目，而不是全部用现成的厚重框架。</li>\n<li>规范，是协同合作的基础，即约束。</li>\n</ul>\n<h2 id=\"言行\"><a href=\"#言行\" class=\"headerlink\" title=\"言行\"></a>言行</h2><ul>\n<li>切勿以貌取人，背后言论他人。</li>\n<li>可怜之人必有可恨之处。</li>\n<li>不和别人争辩无意义的东西</li>\n</ul>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><ul>\n<li>生活中有那么多疑惑，为什么不去学习呢，惑而学之，是为已用。</li>\n</ul>\n<h2 id=\"三国\"><a href=\"#三国\" class=\"headerlink\" title=\"三国\"></a>三国</h2><ul>\n<li>三国，英雄并起，所谓时势造英雄，英雄亦造时势。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>最近看了什么篇文章，一个人是如何废掉的。没仔细看，但理解了一个含义，一个不是因为做了什么什么事就是废掉的表现，而是在该做什么事的时候不去做什么事，比如该睡觉时不睡觉，该学习时不学习。</li>\n</ul>\n<p><strong>总结一句话就是在适当的时间做适当的事，不拖延。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码之道\"><a href=\"#代码之道\" class=\"headerlink\" title=\"代码之道\"></a>代码之道</h2><ul>\n<li>过早重构代码是万恶之源</li>\n<li>过渡设计浪费生命</li>\n<li>要知其然而所以然</li>\n<li>解决问题才是关键，目前不建类库能不能解决的你的问题，如果能 为什么非要自己给自己找麻烦，况且还不知道建一个类库现阶段能给你带来什么好处。</li>\n<li>不懂架构的作用，现在只用会各种类库，还需要不断地精进自己的水平，一步一步去完成项目，而不是全部用现成的厚重框架。</li>\n<li>规范，是协同合作的基础，即约束。</li>\n</ul>\n<h2 id=\"言行\"><a href=\"#言行\" class=\"headerlink\" title=\"言行\"></a>言行</h2><ul>\n<li>切勿以貌取人，背后言论他人。</li>\n<li>可怜之人必有可恨之处。</li>\n<li>不和别人争辩无意义的东西</li>\n</ul>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><ul>\n<li>生活中有那么多疑惑，为什么不去学习呢，惑而学之，是为已用。</li>\n</ul>\n<h2 id=\"三国\"><a href=\"#三国\" class=\"headerlink\" title=\"三国\"></a>三国</h2><ul>\n<li>三国，英雄并起，所谓时势造英雄，英雄亦造时势。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>最近看了什么篇文章，一个人是如何废掉的。没仔细看，但理解了一个含义，一个不是因为做了什么什么事就是废掉的表现，而是在该做什么事的时候不去做什么事，比如该睡觉时不睡觉，该学习时不学习。</li>\n</ul>\n<p><strong>总结一句话就是在适当的时间做适当的事，不拖延。</strong></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 13:22:41 GMT+0800 (GMT+08:00)","title":"哔哔赖赖","path":"2019/09/10/bibilailai/say-what/","eyeCatchImage":null,"excerpt":"代码之道哔哔赖赖","date":"2019-09-10T06:42:01.000Z","pv":0,"totalPV":0,"categories":"哔哔赖赖","tags":["学习记录"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP代码生成器","date":"2019-06-12T06:40:26.000Z","description":"基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。","_content":"\n\n### ABP代码生成器\n基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ngithub地址如下：\n* https://github.com/i542873057/SJNScaffolding\n\n### 代码生成器计划\n\n- 1、中文转英文字段，自动起名字，主要关键字段转换。\n- 2、主分表代码生成\n- 3、下拉代码自动生成，勾选\n- 4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。\n    - 文档：[csdn/部署至linux.md](https://blog.csdn.net/q710777720/article/details/91358307) 、[github/docs/部署至linux.md](https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md)\n    - 项目部署地址 :[http://47.106.80.39](http://47.106.80.39)、[http://www.dotnetcore.xin/](http://www.dotnetcore.xin/)\n\nCodeLF帮程序员起变量名的网站:[https://unbug.github.io/codelf/](https://unbug.github.io/codelf/)\n\n----------\n\n**这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。**\n\n## 使用方法\n准备一个这样格式的数据字典\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png)</fancybox>\n\n运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击**保存配置**\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png)</fancybox>\n\n表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：\n  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来\n  \n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png)</fancybox>\n\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png)</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png)</fancybox>","source":"_posts/abp/ABP-Code-Generator.md","raw":"---\ntitle: ABP代码生成器\ndate: 2019-06-12 14:40:26\ntags: ABP 代码生成器\ndescription: 基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ncategory:\n- ABP\n---\n\n\n### ABP代码生成器\n基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ngithub地址如下：\n* https://github.com/i542873057/SJNScaffolding\n\n### 代码生成器计划\n\n- 1、中文转英文字段，自动起名字，主要关键字段转换。\n- 2、主分表代码生成\n- 3、下拉代码自动生成，勾选\n- 4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。\n    - 文档：[csdn/部署至linux.md](https://blog.csdn.net/q710777720/article/details/91358307) 、[github/docs/部署至linux.md](https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md)\n    - 项目部署地址 :[http://47.106.80.39](http://47.106.80.39)、[http://www.dotnetcore.xin/](http://www.dotnetcore.xin/)\n\nCodeLF帮程序员起变量名的网站:[https://unbug.github.io/codelf/](https://unbug.github.io/codelf/)\n\n----------\n\n**这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。**\n\n## 使用方法\n准备一个这样格式的数据字典\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png)</fancybox>\n\n运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击**保存配置**\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png)</fancybox>\n\n表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：\n  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来\n  \n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png)</fancybox>\n\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png)</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png)</fancybox>","slug":"abp/ABP-Code-Generator","published":1,"updated":"2019-10-08T04:21:13.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yet0007m0twowmfbxkh","content":"<h3 id=\"ABP代码生成器\"><a href=\"#ABP代码生成器\" class=\"headerlink\" title=\"ABP代码生成器\"></a>ABP代码生成器</h3><p>基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。<br>github地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n</ul>\n<h3 id=\"代码生成器计划\"><a href=\"#代码生成器计划\" class=\"headerlink\" title=\"代码生成器计划\"></a>代码生成器计划</h3><ul>\n<li>1、中文转英文字段，自动起名字，主要关键字段转换。</li>\n<li>2、主分表代码生成</li>\n<li>3、下拉代码自动生成，勾选</li>\n<li>4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。<ul>\n<li>文档：<a href=\"https://blog.csdn.net/q710777720/article/details/91358307\" target=\"_blank\" rel=\"noopener\">csdn/部署至linux.md</a> 、<a href=\"https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md\" target=\"_blank\" rel=\"noopener\">github/docs/部署至linux.md</a></li>\n<li>项目部署地址 :<a href=\"http://47.106.80.39\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39</a>、<a href=\"http://www.dotnetcore.xin/\" target=\"_blank\" rel=\"noopener\">http://www.dotnetcore.xin/</a></li>\n</ul>\n</li>\n</ul>\n<p>CodeLF帮程序员起变量名的网站:<a href=\"https://unbug.github.io/codelf/\" target=\"_blank\" rel=\"noopener\">https://unbug.github.io/codelf/</a></p>\n<hr>\n<p><strong>这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>准备一个这样格式的数据字典</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png\" alt=\"avatar\"></fancybox></p>\n<p>运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击<strong>保存配置</strong></p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png\" alt=\"avatar\"></fancybox></p>\n<p>表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：<br>  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png\" alt=\"avatar\"></fancybox></p>\n<p>字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击<em>生成代码</em><br><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png\" alt=\"avatar\"></fancybox><br>代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png\" alt=\"avatar\"></fancybox></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ABP代码生成器\"><a href=\"#ABP代码生成器\" class=\"headerlink\" title=\"ABP代码生成器\"></a>ABP代码生成器</h3><p>基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。<br>github地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n</ul>\n<h3 id=\"代码生成器计划\"><a href=\"#代码生成器计划\" class=\"headerlink\" title=\"代码生成器计划\"></a>代码生成器计划</h3><ul>\n<li>1、中文转英文字段，自动起名字，主要关键字段转换。</li>\n<li>2、主分表代码生成</li>\n<li>3、下拉代码自动生成，勾选</li>\n<li>4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。<ul>\n<li>文档：<a href=\"https://blog.csdn.net/q710777720/article/details/91358307\" target=\"_blank\" rel=\"noopener\">csdn/部署至linux.md</a> 、<a href=\"https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md\" target=\"_blank\" rel=\"noopener\">github/docs/部署至linux.md</a></li>\n<li>项目部署地址 :<a href=\"http://47.106.80.39\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39</a>、<a href=\"http://www.dotnetcore.xin/\" target=\"_blank\" rel=\"noopener\">http://www.dotnetcore.xin/</a></li>\n</ul>\n</li>\n</ul>\n<p>CodeLF帮程序员起变量名的网站:<a href=\"https://unbug.github.io/codelf/\" target=\"_blank\" rel=\"noopener\">https://unbug.github.io/codelf/</a></p>\n<hr>\n<p><strong>这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>准备一个这样格式的数据字典</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png\" alt=\"avatar\"></fancybox></p>\n<p>运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击<strong>保存配置</strong></p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png\" alt=\"avatar\"></fancybox></p>\n<p>表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：<br>  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png\" alt=\"avatar\"></fancybox></p>\n<p>字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击<em>生成代码</em><br><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png\" alt=\"avatar\"></fancybox><br>代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）</p>\n<p><fancybox><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png\" alt=\"avatar\"></fancybox></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ABP代码生成器","path":"2019/06/12/abp/ABP-Code-Generator/","eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png","excerpt":"基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。","date":"2019-06-12T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP 代码生成器"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP源码解析","date":"2019-01-09T06:40:26.000Z","description":"旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍","_content":"\n## 2.Abp简介\n *ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。**\nASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。\n\n### 框架\nABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。\n\n### 架构\nABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。\n\n### 模板\nABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。\n访问官网，了解更多。\n\n* 用户接口层（Presentation）：提供一个界面，实现用户交互操作。\n* 应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。\n* 领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。\n* 基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互\n\n## ABP基础原则：\n\n\t 应用层不包含业务逻辑\n\t 领域服务处理业务逻辑\n\t 应用服务(AppLIcationService)VS领域服务（Manager)\n\n\n## 在什么情况下应使用领域服务\n\n\t 执行某个具体的业务操作。\n\t 领域对象的转换\n\t 以多个领域对象为输入，返回一个值对象\n\n* [参考此文档](https://www.cnblogs.com/sheng-jie/p/6943213.html)\n\n![image](https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n > 总结：\n 1. 领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。\n 2. 过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。\n\n ### 领域服务（Domain Service）\n > 摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里\n\n ### 领域事件 (Domain Event)\n> 领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则\n","source":"_posts/abp/ABP-Base-Code.md","raw":"---\ntitle: ABP源码解析\ndate: 2019-01-09 14:40:26\ntags: ABP\ndescription: 旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍\ncategory:\n- ABP\n---\n\n## 2.Abp简介\n *ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。**\nASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。\n\n### 框架\nABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。\n\n### 架构\nABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。\n\n### 模板\nABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。\n访问官网，了解更多。\n\n* 用户接口层（Presentation）：提供一个界面，实现用户交互操作。\n* 应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。\n* 领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。\n* 基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互\n\n## ABP基础原则：\n\n\t 应用层不包含业务逻辑\n\t 领域服务处理业务逻辑\n\t 应用服务(AppLIcationService)VS领域服务（Manager)\n\n\n## 在什么情况下应使用领域服务\n\n\t 执行某个具体的业务操作。\n\t 领域对象的转换\n\t 以多个领域对象为输入，返回一个值对象\n\n* [参考此文档](https://www.cnblogs.com/sheng-jie/p/6943213.html)\n\n![image](https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n > 总结：\n 1. 领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。\n 2. 过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。\n\n ### 领域服务（Domain Service）\n > 摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里\n\n ### 领域事件 (Domain Event)\n> 领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则\n","slug":"abp/ABP-Base-Code","published":1,"updated":"2019-10-08T04:21:13.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yf0000am0twffqdo1i5","content":"<h2 id=\"2-Abp简介\"><a href=\"#2-Abp简介\" class=\"headerlink\" title=\"2.Abp简介\"></a>2.Abp简介</h2><p> <em>ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。*</em><br>ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。</p>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>ABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。<br>访问官网，了解更多。</p>\n<ul>\n<li>用户接口层（Presentation）：提供一个界面，实现用户交互操作。</li>\n<li>应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。</li>\n<li>领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。</li>\n<li>基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互</li>\n</ul>\n<h2 id=\"ABP基础原则：\"><a href=\"#ABP基础原则：\" class=\"headerlink\" title=\"ABP基础原则：\"></a>ABP基础原则：</h2><pre><code>应用层不包含业务逻辑\n领域服务处理业务逻辑\n应用服务(AppLIcationService)VS领域服务（Manager)</code></pre><h2 id=\"在什么情况下应使用领域服务\"><a href=\"#在什么情况下应使用领域服务\" class=\"headerlink\" title=\"在什么情况下应使用领域服务\"></a>在什么情况下应使用领域服务</h2><pre><code>执行某个具体的业务操作。\n领域对象的转换\n以多个领域对象为输入，返回一个值对象</code></pre><ul>\n<li><a href=\"https://www.cnblogs.com/sheng-jie/p/6943213.html\" target=\"_blank\" rel=\"noopener\">参考此文档</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。</li>\n<li>过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。</li>\n</ol>\n</blockquote>\n<h3 id=\"领域服务（Domain-Service）\"><a href=\"#领域服务（Domain-Service）\" class=\"headerlink\" title=\"领域服务（Domain Service）\"></a>领域服务（Domain Service）</h3><blockquote>\n<p>摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里</p>\n</blockquote>\n<h3 id=\"领域事件-Domain-Event\"><a href=\"#领域事件-Domain-Event\" class=\"headerlink\" title=\"领域事件 (Domain Event)\"></a>领域事件 (Domain Event)</h3><blockquote>\n<p>领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2-Abp简介\"><a href=\"#2-Abp简介\" class=\"headerlink\" title=\"2.Abp简介\"></a>2.Abp简介</h2><p> <em>ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。*</em><br>ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。</p>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>ABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。<br>访问官网，了解更多。</p>\n<ul>\n<li>用户接口层（Presentation）：提供一个界面，实现用户交互操作。</li>\n<li>应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。</li>\n<li>领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。</li>\n<li>基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互</li>\n</ul>\n<h2 id=\"ABP基础原则：\"><a href=\"#ABP基础原则：\" class=\"headerlink\" title=\"ABP基础原则：\"></a>ABP基础原则：</h2><pre><code>应用层不包含业务逻辑\n领域服务处理业务逻辑\n应用服务(AppLIcationService)VS领域服务（Manager)</code></pre><h2 id=\"在什么情况下应使用领域服务\"><a href=\"#在什么情况下应使用领域服务\" class=\"headerlink\" title=\"在什么情况下应使用领域服务\"></a>在什么情况下应使用领域服务</h2><pre><code>执行某个具体的业务操作。\n领域对象的转换\n以多个领域对象为输入，返回一个值对象</code></pre><ul>\n<li><a href=\"https://www.cnblogs.com/sheng-jie/p/6943213.html\" target=\"_blank\" rel=\"noopener\">参考此文档</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。</li>\n<li>过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。</li>\n</ol>\n</blockquote>\n<h3 id=\"领域服务（Domain-Service）\"><a href=\"#领域服务（Domain-Service）\" class=\"headerlink\" title=\"领域服务（Domain Service）\"></a>领域服务（Domain Service）</h3><blockquote>\n<p>摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里</p>\n</blockquote>\n<h3 id=\"领域事件-Domain-Event\"><a href=\"#领域事件-Domain-Event\" class=\"headerlink\" title=\"领域事件 (Domain Event)\"></a>领域事件 (Domain Event)</h3><blockquote>\n<p>领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ABP源码解析","path":"2019/01/09/abp/ABP-Base-Code/","eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","excerpt":"旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍","date":"2019-01-09T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"收集文档","date":"2019-03-24T06:42:01.000Z","description":"记录自己的日常问题找到的解决方案","_content":"\n## 日常问题\n* Ubuntu 安装redis两种方式 教程\n[解决方案](http://www.cnblogs.com/langtianya/p/5187681.html \"点我搞事情！\")\n* 在Ubuntu中安装Redis,设置密码，远程访问\n[解决方案](http://blog.csdn.net/yxwb1253587469/article/details/72466647)\n* 关于学习算法的路上，有哪些需要学习的（南阳理工的题目）\n[学习思路](http://acm.nyist.net/JudgeOnline/step.php)\n\n## IIS 7.5 部署项目解决问题\n\n* Service Unavailable HTTP Error 503. The service is unavailable \n[解决方案](http://www.cnblogs.com/fri-yu/p/4078995.html \"点我搞事情！\")\n* 出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容 \n[解决方案](http://www.cnblogs.com/youring2/p/3545175.html  \"点我搞事情！\")\n* 出现.svg .woff .woff2 文件，需要有以下配置 [解决方案](https://my.oschina.net/u/554046/blog/270689 \"点我搞事情!\")\n* 不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  [解决方案](http://www.cnblogs.com/cookiebin/p/5911644.html)","source":"_posts/command/Collect-Documents.md","raw":"---\ntitle: 收集文档\ndate: 2019-03-24 14:42:01\ndescription: 记录自己的日常问题找到的解决方案\ntags: \n- Ubuntu\n- Redis \n- IIS\ncategory:\n- 日常问题\n---\n\n## 日常问题\n* Ubuntu 安装redis两种方式 教程\n[解决方案](http://www.cnblogs.com/langtianya/p/5187681.html \"点我搞事情！\")\n* 在Ubuntu中安装Redis,设置密码，远程访问\n[解决方案](http://blog.csdn.net/yxwb1253587469/article/details/72466647)\n* 关于学习算法的路上，有哪些需要学习的（南阳理工的题目）\n[学习思路](http://acm.nyist.net/JudgeOnline/step.php)\n\n## IIS 7.5 部署项目解决问题\n\n* Service Unavailable HTTP Error 503. The service is unavailable \n[解决方案](http://www.cnblogs.com/fri-yu/p/4078995.html \"点我搞事情！\")\n* 出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容 \n[解决方案](http://www.cnblogs.com/youring2/p/3545175.html  \"点我搞事情！\")\n* 出现.svg .woff .woff2 文件，需要有以下配置 [解决方案](https://my.oschina.net/u/554046/blog/270689 \"点我搞事情!\")\n* 不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  [解决方案](http://www.cnblogs.com/cookiebin/p/5911644.html)","slug":"command/Collect-Documents","published":1,"updated":"2019-10-08T04:21:13.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yf4000bm0twdnrdo2kg","content":"<h2 id=\"日常问题\"><a href=\"#日常问题\" class=\"headerlink\" title=\"日常问题\"></a>日常问题</h2><ul>\n<li>Ubuntu 安装redis两种方式 教程<br><a href=\"http://www.cnblogs.com/langtianya/p/5187681.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>在Ubuntu中安装Redis,设置密码，远程访问<br><a href=\"http://blog.csdn.net/yxwb1253587469/article/details/72466647\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>关于学习算法的路上，有哪些需要学习的（南阳理工的题目）<br><a href=\"http://acm.nyist.net/JudgeOnline/step.php\" target=\"_blank\" rel=\"noopener\">学习思路</a></li>\n</ul>\n<h2 id=\"IIS-7-5-部署项目解决问题\"><a href=\"#IIS-7-5-部署项目解决问题\" class=\"headerlink\" title=\"IIS 7.5 部署项目解决问题\"></a>IIS 7.5 部署项目解决问题</h2><ul>\n<li>Service Unavailable HTTP Error 503. The service is unavailable<br><a href=\"http://www.cnblogs.com/fri-yu/p/4078995.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容<br><a href=\"http://www.cnblogs.com/youring2/p/3545175.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现.svg .woff .woff2 文件，需要有以下配置 <a href=\"https://my.oschina.net/u/554046/blog/270689\" title=\"点我搞事情!\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  <a href=\"http://www.cnblogs.com/cookiebin/p/5911644.html\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日常问题\"><a href=\"#日常问题\" class=\"headerlink\" title=\"日常问题\"></a>日常问题</h2><ul>\n<li>Ubuntu 安装redis两种方式 教程<br><a href=\"http://www.cnblogs.com/langtianya/p/5187681.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>在Ubuntu中安装Redis,设置密码，远程访问<br><a href=\"http://blog.csdn.net/yxwb1253587469/article/details/72466647\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>关于学习算法的路上，有哪些需要学习的（南阳理工的题目）<br><a href=\"http://acm.nyist.net/JudgeOnline/step.php\" target=\"_blank\" rel=\"noopener\">学习思路</a></li>\n</ul>\n<h2 id=\"IIS-7-5-部署项目解决问题\"><a href=\"#IIS-7-5-部署项目解决问题\" class=\"headerlink\" title=\"IIS 7.5 部署项目解决问题\"></a>IIS 7.5 部署项目解决问题</h2><ul>\n<li>Service Unavailable HTTP Error 503. The service is unavailable<br><a href=\"http://www.cnblogs.com/fri-yu/p/4078995.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容<br><a href=\"http://www.cnblogs.com/youring2/p/3545175.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现.svg .woff .woff2 文件，需要有以下配置 <a href=\"https://my.oschina.net/u/554046/blog/270689\" title=\"点我搞事情!\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  <a href=\"http://www.cnblogs.com/cookiebin/p/5911644.html\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"收集文档","path":"2019/03/24/command/Collect-Documents/","eyeCatchImage":null,"excerpt":"记录自己的日常问题找到的解决方案","date":"2019-03-24T06:42:01.000Z","pv":0,"totalPV":0,"categories":"日常问题","tags":["Ubuntu","Redis","IIS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"日常命令行记录","date":"2019-05-15T06:41:21.000Z","description":"平常使用到的命令行记录","_content":"\nwindows 查看具体某一端口 是否被占用\n```\nnetstat -ano | findstr \"5000\"\n```\n\nnpm 包安装，运行项目\n```\nnpm install\nnpm run serve\nnpm run build\n```\n\n\n.ef code first 生成数据库，迁移数据库\n.net framework  /.net core code first \n```\nAdd-Migration \"name\"\nUpdate-Database \nUpdate-Database  -Force\nUpdate-Database  -Verbose\n```\n\n\ndotnet core cil\n```\ndotnet watch run\n\n```\n\nwindows 运行 打开我的电脑等图标\n```\nrundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\n\n```\n\nredis 密码配置\n```\n安装目录下的winodws-serve.conf\nrequirepass 123qwe    #此处注意，行前不能有空格\n\n重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功\nredis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe\n\n```\n\nIDEA 快捷键\n```\nCtrl+Alt+L   格式化代码\nCtrl+Shfit+F 全局查询\n```\n\nVscode\n```\nALT+SHIFT+F  格式化代码\n```\n\n\nWindows server 2016激活\n```\nDISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula\n\n```\n\n\nidea配置激活地址\n```\nhttp://idea.merle.com.cn\n```\n\nVS2019激活码\n\n```\nVisual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF\n\nVisual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y\n\n```\n","source":"_posts/command/Daily-Command-Line-Recording.md","raw":"---\ntitle: 日常命令行记录\ndate: 2019-05-15 14:41:21\ndescription: 平常使用到的命令行记录\ntags: .NET Core\ncategory:\n- 命令行\n---\n\nwindows 查看具体某一端口 是否被占用\n```\nnetstat -ano | findstr \"5000\"\n```\n\nnpm 包安装，运行项目\n```\nnpm install\nnpm run serve\nnpm run build\n```\n\n\n.ef code first 生成数据库，迁移数据库\n.net framework  /.net core code first \n```\nAdd-Migration \"name\"\nUpdate-Database \nUpdate-Database  -Force\nUpdate-Database  -Verbose\n```\n\n\ndotnet core cil\n```\ndotnet watch run\n\n```\n\nwindows 运行 打开我的电脑等图标\n```\nrundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\n\n```\n\nredis 密码配置\n```\n安装目录下的winodws-serve.conf\nrequirepass 123qwe    #此处注意，行前不能有空格\n\n重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功\nredis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe\n\n```\n\nIDEA 快捷键\n```\nCtrl+Alt+L   格式化代码\nCtrl+Shfit+F 全局查询\n```\n\nVscode\n```\nALT+SHIFT+F  格式化代码\n```\n\n\nWindows server 2016激活\n```\nDISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula\n\n```\n\n\nidea配置激活地址\n```\nhttp://idea.merle.com.cn\n```\n\nVS2019激活码\n\n```\nVisual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF\n\nVisual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y\n\n```\n","slug":"command/Daily-Command-Line-Recording","published":1,"updated":"2019-10-08T04:21:13.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yf7000cm0tw2xuiv2pe","content":"<p>windows 查看具体某一端口 是否被占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr &quot;5000&quot;</span><br></pre></td></tr></table></figure>\n\n<p>npm 包安装，运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>.ef code first 生成数据库，迁移数据库<br>.net framework  /.net core code first </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Add-Migration &quot;name&quot;</span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database  -Force</span><br><span class=\"line\">Update-Database  -Verbose</span><br></pre></td></tr></table></figure>\n\n<p>dotnet core cil</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet watch run</span><br></pre></td></tr></table></figure>\n\n<p>windows 运行 打开我的电脑等图标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0</span><br></pre></td></tr></table></figure>\n\n<p>redis 密码配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装目录下的winodws-serve.conf</span><br><span class=\"line\">requirepass 123qwe    #此处注意，行前不能有空格</span><br><span class=\"line\"></span><br><span class=\"line\">重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功</span><br><span class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe</span><br></pre></td></tr></table></figure>\n\n<p>IDEA 快捷键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Ctrl+Alt+L   格式化代码</span><br><span class=\"line\">Ctrl+Shfit+F 全局查询</span><br></pre></td></tr></table></figure>\n\n<p>Vscode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALT+SHIFT+F  格式化代码</span><br></pre></td></tr></table></figure>\n\n<p>Windows server 2016激活</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula</span><br></pre></td></tr></table></figure>\n\n<p>idea配置激活地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://idea.merle.com.cn</span><br></pre></td></tr></table></figure>\n\n<p>VS2019激活码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Visual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br><span class=\"line\"></span><br><span class=\"line\">Visual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>windows 查看具体某一端口 是否被占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr &quot;5000&quot;</span><br></pre></td></tr></table></figure>\n\n<p>npm 包安装，运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>.ef code first 生成数据库，迁移数据库<br>.net framework  /.net core code first </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Add-Migration &quot;name&quot;</span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database  -Force</span><br><span class=\"line\">Update-Database  -Verbose</span><br></pre></td></tr></table></figure>\n\n<p>dotnet core cil</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet watch run</span><br></pre></td></tr></table></figure>\n\n<p>windows 运行 打开我的电脑等图标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0</span><br></pre></td></tr></table></figure>\n\n<p>redis 密码配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装目录下的winodws-serve.conf</span><br><span class=\"line\">requirepass 123qwe    #此处注意，行前不能有空格</span><br><span class=\"line\"></span><br><span class=\"line\">重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功</span><br><span class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe</span><br></pre></td></tr></table></figure>\n\n<p>IDEA 快捷键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Ctrl+Alt+L   格式化代码</span><br><span class=\"line\">Ctrl+Shfit+F 全局查询</span><br></pre></td></tr></table></figure>\n\n<p>Vscode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALT+SHIFT+F  格式化代码</span><br></pre></td></tr></table></figure>\n\n<p>Windows server 2016激活</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula</span><br></pre></td></tr></table></figure>\n\n<p>idea配置激活地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://idea.merle.com.cn</span><br></pre></td></tr></table></figure>\n\n<p>VS2019激活码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Visual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br><span class=\"line\"></span><br><span class=\"line\">Visual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"日常命令行记录","path":"2019/05/15/command/Daily-Command-Line-Recording/","eyeCatchImage":null,"excerpt":"平常使用到的命令行记录","date":"2019-05-15T06:41:21.000Z","pv":0,"totalPV":0,"categories":"命令行","tags":[".NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Git的使用学习","date":"2019-06-25T05:58:06.000Z","_content":"\n\n- git 默认不区分文件名大小写,配置git大小写敏感\n\n~~~bash\ngit config core.ignorecase false\n~~~\n\n\n## 关于github下载太慢\n\n* 查ip https://www.ipaddress.com/ \n\n改此文件 C:\\Windows\\System32\\drivers\\etc\\hosts\n```\n219.76.4.4 github-cloud.s3.amazonaws.com\n192.30.xx.xx github.com\n151.101.xx.xx github.global.ssl.fastly.net\n151.101.184.133 raw.githubusercontent.com\n```\n\ncmd 刷新dns\n```\nipconfig /flushdns\n```\n\n## .ssh 生成\n- [https://help.github.com/en/articles/connecting-to-github-with-ssh](https://help.github.com/en/articles/connecting-to-github-with-ssh)\n\n生成后用vscode打开公钥id_rsa.pub文件，把公钥中的文本复制到github中的ssh key，title随便起。\n## .ssh 默认生成目录\n\n```\nC:\\Users\\计算机名\\.ssh\n```\n\n我的.ssh目录位置\n```\nC:\\Users\\Computer\\.ssh\n```","source":"_posts/command/Git-how-to-use.md","raw":"---\ntitle: Git的使用学习\ndate: 2019-06-25 13:58:06\ntags: Git\ncategory: 日常问题\n---\n\n\n- git 默认不区分文件名大小写,配置git大小写敏感\n\n~~~bash\ngit config core.ignorecase false\n~~~\n\n\n## 关于github下载太慢\n\n* 查ip https://www.ipaddress.com/ \n\n改此文件 C:\\Windows\\System32\\drivers\\etc\\hosts\n```\n219.76.4.4 github-cloud.s3.amazonaws.com\n192.30.xx.xx github.com\n151.101.xx.xx github.global.ssl.fastly.net\n151.101.184.133 raw.githubusercontent.com\n```\n\ncmd 刷新dns\n```\nipconfig /flushdns\n```\n\n## .ssh 生成\n- [https://help.github.com/en/articles/connecting-to-github-with-ssh](https://help.github.com/en/articles/connecting-to-github-with-ssh)\n\n生成后用vscode打开公钥id_rsa.pub文件，把公钥中的文本复制到github中的ssh key，title随便起。\n## .ssh 默认生成目录\n\n```\nC:\\Users\\计算机名\\.ssh\n```\n\n我的.ssh目录位置\n```\nC:\\Users\\Computer\\.ssh\n```","slug":"command/Git-how-to-use","published":1,"updated":"2019-10-08T04:21:13.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yfe000gm0twnqgkozxc","content":"<ul>\n<li>git 默认不区分文件名大小写,配置git大小写敏感</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于github下载太慢\"><a href=\"#关于github下载太慢\" class=\"headerlink\" title=\"关于github下载太慢\"></a>关于github下载太慢</h2><ul>\n<li>查ip <a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com/</a> </li>\n</ul>\n<p>改此文件 C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">219.76.4.4 github-cloud.s3.amazonaws.com</span><br><span class=\"line\">192.30.xx.xx github.com</span><br><span class=\"line\">151.101.xx.xx github.global.ssl.fastly.net</span><br><span class=\"line\">151.101.184.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<p>cmd 刷新dns</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipconfig /flushdns</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-生成\"><a href=\"#ssh-生成\" class=\"headerlink\" title=\".ssh 生成\"></a>.ssh 生成</h2><ul>\n<li><a href=\"https://help.github.com/en/articles/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li>\n</ul>\n<p>生成后用vscode打开公钥id_rsa.pub文件，把公钥中的文本复制到github中的ssh key，title随便起。</p>\n<h2 id=\"ssh-默认生成目录\"><a href=\"#ssh-默认生成目录\" class=\"headerlink\" title=\".ssh 默认生成目录\"></a>.ssh 默认生成目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\计算机名\\.ssh</span><br></pre></td></tr></table></figure>\n\n<p>我的.ssh目录位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer\\.ssh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>git 默认不区分文件名大小写,配置git大小写敏感</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于github下载太慢\"><a href=\"#关于github下载太慢\" class=\"headerlink\" title=\"关于github下载太慢\"></a>关于github下载太慢</h2><ul>\n<li>查ip <a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com/</a> </li>\n</ul>\n<p>改此文件 C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">219.76.4.4 github-cloud.s3.amazonaws.com</span><br><span class=\"line\">192.30.xx.xx github.com</span><br><span class=\"line\">151.101.xx.xx github.global.ssl.fastly.net</span><br><span class=\"line\">151.101.184.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<p>cmd 刷新dns</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipconfig /flushdns</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-生成\"><a href=\"#ssh-生成\" class=\"headerlink\" title=\".ssh 生成\"></a>.ssh 生成</h2><ul>\n<li><a href=\"https://help.github.com/en/articles/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li>\n</ul>\n<p>生成后用vscode打开公钥id_rsa.pub文件，把公钥中的文本复制到github中的ssh key，title随便起。</p>\n<h2 id=\"ssh-默认生成目录\"><a href=\"#ssh-默认生成目录\" class=\"headerlink\" title=\".ssh 默认生成目录\"></a>.ssh 默认生成目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\计算机名\\.ssh</span><br></pre></td></tr></table></figure>\n\n<p>我的.ssh目录位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer\\.ssh</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"Git的使用学习","path":"2019/06/25/command/Git-how-to-use/","eyeCatchImage":null,"excerpt":null,"date":"2019-06-25T05:58:06.000Z","pv":0,"totalPV":0,"categories":"日常问题","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP VNEXT中的MicroserivceDemo增加单页面示例","date":"2019-07-27T06:55:26.000Z","description":"从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能","_content":"\n# ABP \nThis project is the next generation of the [ASP.NET Boilerplate](https://aspnetboilerplate.com/) web application framework. See [the announcement](https://blog.abp.io/abp/Abp-vNext-Announcement).\n\n# 相关链接\n- ABP VNEXT [https://github.com/abpframework/abp](https://github.com/abpframework/abp)\n- 微服务架构 [https://cn.abp.io/documents/abp/latest/Microservice-Architecture](https://cn.abp.io/documents/abp/latest/Microservice-Architecture)\n- 微服务解决方案示例[https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo](https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo)\n\n# 功能\n从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 \n- 完整代码[https://github.com/luoyunchong/abp/tree/master/samples/Microservice](https://github.com/luoyunchong/abp/tree/master/samples/Microservice)\n- 前端项目位置[https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice](https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice)\n\n## 效果图如下\n## 登录\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png)</fancybox>\n\n## 个人资料-修改密码\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9f4451253d178c1bc80.png)</fancybox>\n\n## 个人资料-用户基本信息\n\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d98.png)</fancybox>\n\n## 用户管理\n<fancybox>![](https://ae01.alicdn.com/kf/H77457b26dcbb4d08b5d26a629d8078b7o.png)</fancybox>\n\n## 用户管理-编辑-配置角色-配置组织\n<fancybox>![](https://pic.superbed.cn/item/5d3bda8f451253d178c1c0e7.png)</fancybox>\n\n## 用户管理-用户权限配置\n<fancybox>![](https://pic.superbed.cn/item/5d3bd82f451253d178c1a06f.png)</fancybox>\n\n## 角色管理\n<fancybox>![](https://pic2.superbed.cn/item/5d3bd8ce451253d178c1aafb.png)</fancybox>\n\n## 角色管理-编辑角色\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9bb451253d178c1b9e6.png)</fancybox>\n\n## 角色管理-角色权限配置\n![](https://ae01.alicdn.com/kf/H973c2b0a50a545808db2d0b2f75250aa3.png)</fancybox>\n\n## 部门管理-部门信息列表-新增编辑\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9ce451253d178c1bb73.png)</fancybox>\n\n## 审计日志\n<fancybox>![](https://pic.superbed.cn/item/5d3bda81451253d178c1c058.png)</fancybox>\n\n## 审计日志-日志详情\n<fancybox>![](https://pic.superbed.cn/item/5d3bda81451253d178c1c05a.png)</fancybox>\n\n## 基础资料字典-新增，列表\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9b5451253d178c1b997.png)</fancybox>\n\n## 基础资料字典类别管理-新增，列表\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d9b.png)</fancybox>\n\n","source":"_posts/abp/MicroServiceDemo-iview.md","raw":"---\ntitle: ABP VNEXT中的MicroserivceDemo增加单页面示例\ndate: 2019-7-27 14:55:26\ntags: ABP\ndescription: 从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 \ncategory:\n- ABP\n---\n\n# ABP \nThis project is the next generation of the [ASP.NET Boilerplate](https://aspnetboilerplate.com/) web application framework. See [the announcement](https://blog.abp.io/abp/Abp-vNext-Announcement).\n\n# 相关链接\n- ABP VNEXT [https://github.com/abpframework/abp](https://github.com/abpframework/abp)\n- 微服务架构 [https://cn.abp.io/documents/abp/latest/Microservice-Architecture](https://cn.abp.io/documents/abp/latest/Microservice-Architecture)\n- 微服务解决方案示例[https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo](https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo)\n\n# 功能\n从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 \n- 完整代码[https://github.com/luoyunchong/abp/tree/master/samples/Microservice](https://github.com/luoyunchong/abp/tree/master/samples/Microservice)\n- 前端项目位置[https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice](https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice)\n\n## 效果图如下\n## 登录\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png)</fancybox>\n\n## 个人资料-修改密码\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9f4451253d178c1bc80.png)</fancybox>\n\n## 个人资料-用户基本信息\n\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d98.png)</fancybox>\n\n## 用户管理\n<fancybox>![](https://ae01.alicdn.com/kf/H77457b26dcbb4d08b5d26a629d8078b7o.png)</fancybox>\n\n## 用户管理-编辑-配置角色-配置组织\n<fancybox>![](https://pic.superbed.cn/item/5d3bda8f451253d178c1c0e7.png)</fancybox>\n\n## 用户管理-用户权限配置\n<fancybox>![](https://pic.superbed.cn/item/5d3bd82f451253d178c1a06f.png)</fancybox>\n\n## 角色管理\n<fancybox>![](https://pic2.superbed.cn/item/5d3bd8ce451253d178c1aafb.png)</fancybox>\n\n## 角色管理-编辑角色\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9bb451253d178c1b9e6.png)</fancybox>\n\n## 角色管理-角色权限配置\n![](https://ae01.alicdn.com/kf/H973c2b0a50a545808db2d0b2f75250aa3.png)</fancybox>\n\n## 部门管理-部门信息列表-新增编辑\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9ce451253d178c1bb73.png)</fancybox>\n\n## 审计日志\n<fancybox>![](https://pic.superbed.cn/item/5d3bda81451253d178c1c058.png)</fancybox>\n\n## 审计日志-日志详情\n<fancybox>![](https://pic.superbed.cn/item/5d3bda81451253d178c1c05a.png)</fancybox>\n\n## 基础资料字典-新增，列表\n<fancybox>![](https://pic.superbed.cn/item/5d3bd9b5451253d178c1b997.png)</fancybox>\n\n## 基础资料字典类别管理-新增，列表\n<fancybox>![](https://pic.superbed.cn/item/5d3bd731451253d178c18d9b.png)</fancybox>\n\n","slug":"abp/MicroServiceDemo-iview","published":1,"updated":"2019-10-08T04:21:13.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yfh000hm0twigg50wc2","content":"<h1 id=\"ABP\"><a href=\"#ABP\" class=\"headerlink\" title=\"ABP\"></a>ABP</h1><p>This project is the next generation of the <a href=\"https://aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">ASP.NET Boilerplate</a> web application framework. See <a href=\"https://blog.abp.io/abp/Abp-vNext-Announcement\" target=\"_blank\" rel=\"noopener\">the announcement</a>.</p>\n<h1 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h1><ul>\n<li>ABP VNEXT <a href=\"https://github.com/abpframework/abp\" target=\"_blank\" rel=\"noopener\">https://github.com/abpframework/abp</a></li>\n<li>微服务架构 <a href=\"https://cn.abp.io/documents/abp/latest/Microservice-Architecture\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Microservice-Architecture</a></li>\n<li>微服务解决方案示例<a href=\"https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo</a></li>\n</ul>\n<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><p>从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 </p>\n<ul>\n<li>完整代码<a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice</a></li>\n<li>前端项目位置<a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice</a></li>\n</ul>\n<h2 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h2><h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png\" alt></fancybox></p>\n<h2 id=\"个人资料-修改密码\"><a href=\"#个人资料-修改密码\" class=\"headerlink\" title=\"个人资料-修改密码\"></a>个人资料-修改密码</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9f4451253d178c1bc80.png\" alt></fancybox></p>\n<h2 id=\"个人资料-用户基本信息\"><a href=\"#个人资料-用户基本信息\" class=\"headerlink\" title=\"个人资料-用户基本信息\"></a>个人资料-用户基本信息</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d98.png\" alt></fancybox></p>\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><p><fancybox><img src=\"https://ae01.alicdn.com/kf/H77457b26dcbb4d08b5d26a629d8078b7o.png\" alt></fancybox></p>\n<h2 id=\"用户管理-编辑-配置角色-配置组织\"><a href=\"#用户管理-编辑-配置角色-配置组织\" class=\"headerlink\" title=\"用户管理-编辑-配置角色-配置组织\"></a>用户管理-编辑-配置角色-配置组织</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda8f451253d178c1c0e7.png\" alt></fancybox></p>\n<h2 id=\"用户管理-用户权限配置\"><a href=\"#用户管理-用户权限配置\" class=\"headerlink\" title=\"用户管理-用户权限配置\"></a>用户管理-用户权限配置</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd82f451253d178c1a06f.png\" alt></fancybox></p>\n<h2 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h2><p><fancybox><img src=\"https://pic2.superbed.cn/item/5d3bd8ce451253d178c1aafb.png\" alt></fancybox></p>\n<h2 id=\"角色管理-编辑角色\"><a href=\"#角色管理-编辑角色\" class=\"headerlink\" title=\"角色管理-编辑角色\"></a>角色管理-编辑角色</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9bb451253d178c1b9e6.png\" alt></fancybox></p>\n<h2 id=\"角色管理-角色权限配置\"><a href=\"#角色管理-角色权限配置\" class=\"headerlink\" title=\"角色管理-角色权限配置\"></a>角色管理-角色权限配置</h2><p><img src=\"https://ae01.alicdn.com/kf/H973c2b0a50a545808db2d0b2f75250aa3.png\" alt></p>\n<h2 id=\"部门管理-部门信息列表-新增编辑\"><a href=\"#部门管理-部门信息列表-新增编辑\" class=\"headerlink\" title=\"部门管理-部门信息列表-新增编辑\"></a>部门管理-部门信息列表-新增编辑</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9ce451253d178c1bb73.png\" alt></fancybox></p>\n<h2 id=\"审计日志\"><a href=\"#审计日志\" class=\"headerlink\" title=\"审计日志\"></a>审计日志</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda81451253d178c1c058.png\" alt></fancybox></p>\n<h2 id=\"审计日志-日志详情\"><a href=\"#审计日志-日志详情\" class=\"headerlink\" title=\"审计日志-日志详情\"></a>审计日志-日志详情</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda81451253d178c1c05a.png\" alt></fancybox></p>\n<h2 id=\"基础资料字典-新增，列表\"><a href=\"#基础资料字典-新增，列表\" class=\"headerlink\" title=\"基础资料字典-新增，列表\"></a>基础资料字典-新增，列表</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9b5451253d178c1b997.png\" alt></fancybox></p>\n<h2 id=\"基础资料字典类别管理-新增，列表\"><a href=\"#基础资料字典类别管理-新增，列表\" class=\"headerlink\" title=\"基础资料字典类别管理-新增，列表\"></a>基础资料字典类别管理-新增，列表</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d9b.png\" alt></fancybox></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ABP\"><a href=\"#ABP\" class=\"headerlink\" title=\"ABP\"></a>ABP</h1><p>This project is the next generation of the <a href=\"https://aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">ASP.NET Boilerplate</a> web application framework. See <a href=\"https://blog.abp.io/abp/Abp-vNext-Announcement\" target=\"_blank\" rel=\"noopener\">the announcement</a>.</p>\n<h1 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h1><ul>\n<li>ABP VNEXT <a href=\"https://github.com/abpframework/abp\" target=\"_blank\" rel=\"noopener\">https://github.com/abpframework/abp</a></li>\n<li>微服务架构 <a href=\"https://cn.abp.io/documents/abp/latest/Microservice-Architecture\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Microservice-Architecture</a></li>\n<li>微服务解决方案示例<a href=\"https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Samples/Microservice-Demo</a></li>\n</ul>\n<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><p>从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 </p>\n<ul>\n<li>完整代码<a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice</a></li>\n<li>前端项目位置<a href=\"https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/abp/tree/master/samples/Microservice/modules/app-microservice</a></li>\n</ul>\n<h2 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h2><h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png\" alt></fancybox></p>\n<h2 id=\"个人资料-修改密码\"><a href=\"#个人资料-修改密码\" class=\"headerlink\" title=\"个人资料-修改密码\"></a>个人资料-修改密码</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9f4451253d178c1bc80.png\" alt></fancybox></p>\n<h2 id=\"个人资料-用户基本信息\"><a href=\"#个人资料-用户基本信息\" class=\"headerlink\" title=\"个人资料-用户基本信息\"></a>个人资料-用户基本信息</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d98.png\" alt></fancybox></p>\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><p><fancybox><img src=\"https://ae01.alicdn.com/kf/H77457b26dcbb4d08b5d26a629d8078b7o.png\" alt></fancybox></p>\n<h2 id=\"用户管理-编辑-配置角色-配置组织\"><a href=\"#用户管理-编辑-配置角色-配置组织\" class=\"headerlink\" title=\"用户管理-编辑-配置角色-配置组织\"></a>用户管理-编辑-配置角色-配置组织</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda8f451253d178c1c0e7.png\" alt></fancybox></p>\n<h2 id=\"用户管理-用户权限配置\"><a href=\"#用户管理-用户权限配置\" class=\"headerlink\" title=\"用户管理-用户权限配置\"></a>用户管理-用户权限配置</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd82f451253d178c1a06f.png\" alt></fancybox></p>\n<h2 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h2><p><fancybox><img src=\"https://pic2.superbed.cn/item/5d3bd8ce451253d178c1aafb.png\" alt></fancybox></p>\n<h2 id=\"角色管理-编辑角色\"><a href=\"#角色管理-编辑角色\" class=\"headerlink\" title=\"角色管理-编辑角色\"></a>角色管理-编辑角色</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9bb451253d178c1b9e6.png\" alt></fancybox></p>\n<h2 id=\"角色管理-角色权限配置\"><a href=\"#角色管理-角色权限配置\" class=\"headerlink\" title=\"角色管理-角色权限配置\"></a>角色管理-角色权限配置</h2><p><img src=\"https://ae01.alicdn.com/kf/H973c2b0a50a545808db2d0b2f75250aa3.png\" alt></p>\n<h2 id=\"部门管理-部门信息列表-新增编辑\"><a href=\"#部门管理-部门信息列表-新增编辑\" class=\"headerlink\" title=\"部门管理-部门信息列表-新增编辑\"></a>部门管理-部门信息列表-新增编辑</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9ce451253d178c1bb73.png\" alt></fancybox></p>\n<h2 id=\"审计日志\"><a href=\"#审计日志\" class=\"headerlink\" title=\"审计日志\"></a>审计日志</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda81451253d178c1c058.png\" alt></fancybox></p>\n<h2 id=\"审计日志-日志详情\"><a href=\"#审计日志-日志详情\" class=\"headerlink\" title=\"审计日志-日志详情\"></a>审计日志-日志详情</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bda81451253d178c1c05a.png\" alt></fancybox></p>\n<h2 id=\"基础资料字典-新增，列表\"><a href=\"#基础资料字典-新增，列表\" class=\"headerlink\" title=\"基础资料字典-新增，列表\"></a>基础资料字典-新增，列表</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd9b5451253d178c1b997.png\" alt></fancybox></p>\n<h2 id=\"基础资料字典类别管理-新增，列表\"><a href=\"#基础资料字典类别管理-新增，列表\" class=\"headerlink\" title=\"基础资料字典类别管理-新增，列表\"></a>基础资料字典类别管理-新增，列表</h2><p><fancybox><img src=\"https://pic.superbed.cn/item/5d3bd731451253d178c18d9b.png\" alt></fancybox></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ABP VNEXT中的MicroserivceDemo增加单页面示例","path":"2019/07/27/abp/MicroServiceDemo-iview/","eyeCatchImage":"https://pic.superbed.cn/item/5d3bd731451253d178c18d8f.png","excerpt":"从 ABP vNext  的MicroserviceDemo中修改而来，为其增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能","date":"2019-07-27T06:55:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"博客记录RabbitMQ、Mongodb","date":"2019-05-08T06:41:21.000Z","description":"RabbitMQ安装后web管理、删除服务Mongodb","_content":"\n\n### Rabbitmq\n> 服务开启后，管理地址：http://localhost:15672/ \n* 帐号：guest 密码 : guest\n\nrabbitmq安装后，web管理端口http://localhost:15672/ 无法访问的解决\n\n1. [https://blog.csdn.net/sxf359/article/details/78239382](https://blog.csdn.net/sxf359/article/details/78239382)\n\n\n2. ![示例](https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045)\n\n3. 此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。\n~~~\n rabbitmq-plugins enable rabbitmq_management\n~~~\n\n\n### Mongodb \n\n* 删除服务\n~~~ bash\nsc delete mongodb\n~~~\n\n\n","source":"_posts/command/Rabbitmq-And-Mongodb.md","raw":"---\ntitle: 博客记录RabbitMQ、Mongodb\ndate: 2019-05-8 14:41:21\ndescription: RabbitMQ安装后web管理、删除服务Mongodb\ntags: \n- RabbitMQ \n- Mongodb\n---\n\n\n### Rabbitmq\n> 服务开启后，管理地址：http://localhost:15672/ \n* 帐号：guest 密码 : guest\n\nrabbitmq安装后，web管理端口http://localhost:15672/ 无法访问的解决\n\n1. [https://blog.csdn.net/sxf359/article/details/78239382](https://blog.csdn.net/sxf359/article/details/78239382)\n\n\n2. ![示例](https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045)\n\n3. 此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。\n~~~\n rabbitmq-plugins enable rabbitmq_management\n~~~\n\n\n### Mongodb \n\n* 删除服务\n~~~ bash\nsc delete mongodb\n~~~\n\n\n","slug":"command/Rabbitmq-And-Mongodb","published":1,"updated":"2019-10-08T04:21:13.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yfq000lm0twjbp0jrv6","content":"<h3 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h3><blockquote>\n<p>服务开启后，管理地址：<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> </p>\n<ul>\n<li>帐号：guest 密码 : guest</li>\n</ul>\n</blockquote>\n<p>rabbitmq安装后，web管理端口<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 无法访问的解决</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sxf359/article/details/78239382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sxf359/article/details/78239382</a></li>\n</ol>\n<ol start=\"2\">\n<li><p><img src=\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045\" alt=\"示例\"></p>\n</li>\n<li><p>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h3><ul>\n<li>删除服务<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc delete mongodb</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h3><blockquote>\n<p>服务开启后，管理地址：<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> </p>\n<ul>\n<li>帐号：guest 密码 : guest</li>\n</ul>\n</blockquote>\n<p>rabbitmq安装后，web管理端口<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 无法访问的解决</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sxf359/article/details/78239382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sxf359/article/details/78239382</a></li>\n</ol>\n<ol start=\"2\">\n<li><p><img src=\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045\" alt=\"示例\"></p>\n</li>\n<li><p>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h3><ul>\n<li>删除服务<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc delete mongodb</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"博客记录RabbitMQ、Mongodb","path":"2019/05/08/command/Rabbitmq-And-Mongodb/","eyeCatchImage":"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045","excerpt":"RabbitMQ安装后web管理、删除服务Mongodb","date":"2019-05-08T06:41:21.000Z","pv":0,"totalPV":0,"categories":"","tags":["RabbitMQ","Mongodb"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Docker 、nginx 学习记录","date":"2019-06-09T17:00:22.000Z","_content":"\n\n## Docker 学习记录\n\nDocker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器->Windows日志->系统中，Hyper-V-VmSwitch 一直提示 类似\"VMSwitch driver due to error\"\n\n* [Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事](https://www.cnblogs.com/GeDiao/p/7975667.html)\n\n别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。\n* [hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错](https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app)\n\n**后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.**\n\n<!-- more -->\n\n## Docker 相关文档\n[Docker最全教程——从理论到实战(一)](https://www.cnblogs.com/codelove/p/10030439.html)\n\n[八个Docker的真实应用场景]( http://dockone.io/article/126)\n\n[docker pull很慢解决办法、配置阿里镜像](https://blog.csdn.net/julien71/article/details/79760919)\n\n[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n\nDocker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）\n\n一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。\n\n\n## Dockerfile 文件规则\n\n~~~\n\n~~~\n\n## Docker  命令行  \n* Command-Line Interfaces [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)\n~~~\ndocker images  # 查看所有镜像\n\ndocker ps -a #所有正在运行的容器Container\ndocker ps -l #最后启动的容器\n\ndocker rm 容器id   #删除容器\nocker rm $(docker ps -q -a) #一次性删除所有的容器\n\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rmi $(docker images -q) #一次性删除所有的镜像。\n\ndocker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 \n\ndocker run 镜像 #运行\ndocker run -it -p 5000:80 igeekfan/demo\n#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\ndocker run -d -p 5000:80 igeekfan/demo \n-d 参数后台运行\n\ndocker start 容器id\ndocker restart 容器id\ndocker stop 容器id #终止容器。\ndocker logs $CONTAINER_ID ##在container外面查看它的输出 \ndocker attach $CONTAINER_ID ##连接上容器实时查看：\n\ndocker pull microsoft/dotnet  #单独安装某一镜像\n\ndocker save 镜像id > 文件 #持久化镜像\ndocker load < 文件\n~~~\n我们如果想将Docker 放置到其他机器运行，很简单。\n~~~\n#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。\n\ndocker save igeekfan/demo > demo.tar\n\n#然后加载命令\n\ndocker load < demo.tar\n~~~\n\n## nginx 相关命令\n\nUbuntu 进入root 权限，不用每次加sudo\n~~~\nsudo su \n#然后输入root 密码\n~~~\n\n配置nginx\n~~~\nvim /etc/nginx/nginx.conf\n~~~\n\nnginx 验证配置是否成功\n~~~\nnginx -t \n~~~\n\n重新加载nginx配置项\n~~~\nnginx -s reload\n~~~\n\n状态、重启、停止、启动\n~~~\nservice nginx status \nservice nginx restart\nservice nginx stop \nservice nginx start\n~~~\n\n\n- [Ubuntu18.04更换镜像源](https://blog.csdn.net/jasonzhoujx/article/details/80360459)\n\n## nginx配置二级域名\n\n在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名\n* 可参考 [nginx配置二级域名](https://cloud.tencent.com/developer/article/1183138)\n\n我是使用的[腾讯云\n](https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console)，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。\n云产品->域名解析->选择一个域名（列表页选择解析）->添加记录（依次从在表格上填写，如下图所示，可点击查看大图）\n\n<fancybox>![](https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png)</fancybox>\n\n远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。\n\n下面的功能，是模拟二个服务，一个是\n- http://122.152.192.161:81 ->这个是nginx安装后的默认欢迎页面。\n- http://122.152.192.161:82 ->这个是我使用[hexo](https://github.com/luoyunchong/hexo-blog)做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）\n\n81端口\n\n<fancybox>![image51555.png](https://miao.su/images/2019/06/25/image51555.png)</fancybox>\n\n82端口\n\n<fancybox>![imagec5d3e.png](https://miao.su/images/2019/06/25/imagec5d3e.png)</fancybox>\n\n~~~bash\n\ncd /etc/nginx/sites-enabled\nvim defult\n~~~\n\n~~~\nserver {\n        listen 81;\n        listen [::]:81;\n\n        root /var/www/html;\n        index index.html index.nginx-debian.html;\n        charset utf-8;\n        location / {\n             try_files $uri $uri/ =404;\n        }\n}\n\nserver {\n        listen 82;\n        charset utf-8;\n        root /var/www/html/hexo-blog;\n        index index.html index.htm index.nginx-debian.html;\n        location  / {\n                try_files $uri $uri/ =404;\n        }\n}\n~~~\n\n因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。\n~~~bash\ncd /etc/nginx/conf.d\nvim docs.conf  #所以这个docs只要以.conf后缀即可，“docs\"可自定义值。\n~~~\n\n~~~\nserver {  \n    listen 80;\n    server_name docs.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:81;\n    }\n}\n~~~\n\n~~~\n#ESC然后:wq退出，保存，\nvim blog.conf   #再新建一个文件夹，配置博客\n~~~\n\n~~~\nserver {\n    listen 80;\n    server_name blog.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:82;\n    }\n\n}\n~~~\n\n然后,加载配置项\n~~~\nnginx -s reload\n~~~\n\n效果图 81端口，转发到 docs.igeekfan.cn\n\n<fancybox>![Y_XRRQRZJZXJ5N96919c.png](https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png)</fancybox>\n\n效果图 82端口,转发到 blog.igeekfan.cn\n\n<fancybox>![imagedfa93.png](https://miao.su/images/2019/06/25/imagedfa93.png)</fancybox>\n","source":"_posts/back-end/Docker-nginx-Learn.md","raw":"---\ntitle: Docker 、nginx 学习记录\ndate: 2019-06-10 01:00:22\n# description: Docker for windows 下安装 问题，Docker相关文档，Docker 命令行等，nginx相关命令行\ntags:\n- nginx\n- Docker\ncategory:\n- 学习记录\n---\n\n\n## Docker 学习记录\n\nDocker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器->Windows日志->系统中，Hyper-V-VmSwitch 一直提示 类似\"VMSwitch driver due to error\"\n\n* [Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事](https://www.cnblogs.com/GeDiao/p/7975667.html)\n\n别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。\n* [hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错](https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app)\n\n**后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.**\n\n<!-- more -->\n\n## Docker 相关文档\n[Docker最全教程——从理论到实战(一)](https://www.cnblogs.com/codelove/p/10030439.html)\n\n[八个Docker的真实应用场景]( http://dockone.io/article/126)\n\n[docker pull很慢解决办法、配置阿里镜像](https://blog.csdn.net/julien71/article/details/79760919)\n\n[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n\nDocker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）\n\n一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。\n\n\n## Dockerfile 文件规则\n\n~~~\n\n~~~\n\n## Docker  命令行  \n* Command-Line Interfaces [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)\n~~~\ndocker images  # 查看所有镜像\n\ndocker ps -a #所有正在运行的容器Container\ndocker ps -l #最后启动的容器\n\ndocker rm 容器id   #删除容器\nocker rm $(docker ps -q -a) #一次性删除所有的容器\n\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rmi $(docker images -q) #一次性删除所有的镜像。\n\ndocker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 \n\ndocker run 镜像 #运行\ndocker run -it -p 5000:80 igeekfan/demo\n#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\ndocker run -d -p 5000:80 igeekfan/demo \n-d 参数后台运行\n\ndocker start 容器id\ndocker restart 容器id\ndocker stop 容器id #终止容器。\ndocker logs $CONTAINER_ID ##在container外面查看它的输出 \ndocker attach $CONTAINER_ID ##连接上容器实时查看：\n\ndocker pull microsoft/dotnet  #单独安装某一镜像\n\ndocker save 镜像id > 文件 #持久化镜像\ndocker load < 文件\n~~~\n我们如果想将Docker 放置到其他机器运行，很简单。\n~~~\n#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。\n\ndocker save igeekfan/demo > demo.tar\n\n#然后加载命令\n\ndocker load < demo.tar\n~~~\n\n## nginx 相关命令\n\nUbuntu 进入root 权限，不用每次加sudo\n~~~\nsudo su \n#然后输入root 密码\n~~~\n\n配置nginx\n~~~\nvim /etc/nginx/nginx.conf\n~~~\n\nnginx 验证配置是否成功\n~~~\nnginx -t \n~~~\n\n重新加载nginx配置项\n~~~\nnginx -s reload\n~~~\n\n状态、重启、停止、启动\n~~~\nservice nginx status \nservice nginx restart\nservice nginx stop \nservice nginx start\n~~~\n\n\n- [Ubuntu18.04更换镜像源](https://blog.csdn.net/jasonzhoujx/article/details/80360459)\n\n## nginx配置二级域名\n\n在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名\n* 可参考 [nginx配置二级域名](https://cloud.tencent.com/developer/article/1183138)\n\n我是使用的[腾讯云\n](https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console)，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。\n云产品->域名解析->选择一个域名（列表页选择解析）->添加记录（依次从在表格上填写，如下图所示，可点击查看大图）\n\n<fancybox>![](https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png)</fancybox>\n\n远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。\n\n下面的功能，是模拟二个服务，一个是\n- http://122.152.192.161:81 ->这个是nginx安装后的默认欢迎页面。\n- http://122.152.192.161:82 ->这个是我使用[hexo](https://github.com/luoyunchong/hexo-blog)做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）\n\n81端口\n\n<fancybox>![image51555.png](https://miao.su/images/2019/06/25/image51555.png)</fancybox>\n\n82端口\n\n<fancybox>![imagec5d3e.png](https://miao.su/images/2019/06/25/imagec5d3e.png)</fancybox>\n\n~~~bash\n\ncd /etc/nginx/sites-enabled\nvim defult\n~~~\n\n~~~\nserver {\n        listen 81;\n        listen [::]:81;\n\n        root /var/www/html;\n        index index.html index.nginx-debian.html;\n        charset utf-8;\n        location / {\n             try_files $uri $uri/ =404;\n        }\n}\n\nserver {\n        listen 82;\n        charset utf-8;\n        root /var/www/html/hexo-blog;\n        index index.html index.htm index.nginx-debian.html;\n        location  / {\n                try_files $uri $uri/ =404;\n        }\n}\n~~~\n\n因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。\n~~~bash\ncd /etc/nginx/conf.d\nvim docs.conf  #所以这个docs只要以.conf后缀即可，“docs\"可自定义值。\n~~~\n\n~~~\nserver {  \n    listen 80;\n    server_name docs.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:81;\n    }\n}\n~~~\n\n~~~\n#ESC然后:wq退出，保存，\nvim blog.conf   #再新建一个文件夹，配置博客\n~~~\n\n~~~\nserver {\n    listen 80;\n    server_name blog.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:82;\n    }\n\n}\n~~~\n\n然后,加载配置项\n~~~\nnginx -s reload\n~~~\n\n效果图 81端口，转发到 docs.igeekfan.cn\n\n<fancybox>![Y_XRRQRZJZXJ5N96919c.png](https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png)</fancybox>\n\n效果图 82端口,转发到 blog.igeekfan.cn\n\n<fancybox>![imagedfa93.png](https://miao.su/images/2019/06/25/imagedfa93.png)</fancybox>\n","slug":"back-end/Docker-nginx-Learn","published":1,"updated":"2019-10-08T04:21:13.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yfu000nm0tw1xnnljcm","content":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker 学习记录\"></a>Docker 学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Docker-相关文档\"><a href=\"#Docker-相关文档\" class=\"headerlink\" title=\"Docker 相关文档\"></a>Docker 相关文档</h2><p><a href=\"https://www.cnblogs.com/codelove/p/10030439.html\" target=\"_blank\" rel=\"noopener\">Docker最全教程——从理论到实战(一)</a></p>\n<p><a href=\"http://dockone.io/article/126\" target=\"_blank\" rel=\"noopener\">八个Docker的真实应用场景</a></p>\n<p><a href=\"https://blog.csdn.net/julien71/article/details/79760919\" target=\"_blank\" rel=\"noopener\">docker pull很慢解决办法、配置阿里镜像</a></p>\n<p><a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>\n<p>一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。</p>\n<h2 id=\"Dockerfile-文件规则\"><a href=\"#Dockerfile-文件规则\" class=\"headerlink\" title=\"Dockerfile 文件规则\"></a>Dockerfile 文件规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-命令行\"><a href=\"#Docker-命令行\" class=\"headerlink\" title=\"Docker  命令行\"></a>Docker  命令行</h2><ul>\n<li>Command-Line Interfaces <a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/run/</a><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\">docker ps -l #最后启动的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br><span class=\"line\">ocker rm $(docker ps -q -a) #一次性删除所有的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rmi $(docker images -q) #一次性删除所有的镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 </span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像 #运行</span><br><span class=\"line\">docker run -it -p 5000:80 igeekfan/demo</span><br><span class=\"line\">#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/demo </span><br><span class=\"line\">-d 参数后台运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">docker restart 容器id</span><br><span class=\"line\">docker stop 容器id #终止容器。</span><br><span class=\"line\">docker logs $CONTAINER_ID ##在container外面查看它的输出 </span><br><span class=\"line\">docker attach $CONTAINER_ID ##连接上容器实时查看：</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull microsoft/dotnet  #单独安装某一镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker save 镜像id &gt; 文件 #持久化镜像</span><br><span class=\"line\">docker load &lt; 文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span><br><span class=\"line\"></span><br><span class=\"line\">docker save igeekfan/demo &gt; demo.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#然后加载命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; demo.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-相关命令\"><a href=\"#nginx-相关命令\" class=\"headerlink\" title=\"nginx 相关命令\"></a>nginx 相关命令</h2><p>Ubuntu 进入root 权限，不用每次加sudo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su </span><br><span class=\"line\">#然后输入root 密码</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx 验证配置是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>状态、重启、停止、启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">service nginx status </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\">service nginx stop </span><br><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/jasonzhoujx/article/details/80360459\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04更换镜像源</a></li>\n</ul>\n<h2 id=\"nginx配置二级域名\"><a href=\"#nginx配置二级域名\" class=\"headerlink\" title=\"nginx配置二级域名\"></a>nginx配置二级域名</h2><p>在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名</p>\n<ul>\n<li>可参考 <a href=\"https://cloud.tencent.com/developer/article/1183138\" target=\"_blank\" rel=\"noopener\">nginx配置二级域名</a></li>\n</ul>\n<p>我是使用的<a href=\"https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console\" target=\"_blank\" rel=\"noopener\">腾讯云\n</a>，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。<br>云产品-&gt;域名解析-&gt;选择一个域名（列表页选择解析）-&gt;添加记录（依次从在表格上填写，如下图所示，可点击查看大图）</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png\" alt></fancybox></p>\n<p>远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。</p>\n<p>下面的功能，是模拟二个服务，一个是</p>\n<ul>\n<li><a href=\"http://122.152.192.161:81\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:81</a> -&gt;这个是nginx安装后的默认欢迎页面。</li>\n<li><a href=\"http://122.152.192.161:82\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:82</a> -&gt;这个是我使用<a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">hexo</a>做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）</li>\n</ul>\n<p>81端口</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/image51555.png\" alt=\"image51555.png\"></fancybox></p>\n<p>82端口</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/imagec5d3e.png\" alt=\"imagec5d3e.png\"></fancybox></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/sites-enabled</span><br><span class=\"line\">vim defult</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 81;</span><br><span class=\"line\">        listen [::]:81;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/html;</span><br><span class=\"line\">        index index.html index.nginx-debian.html;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 82;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        root /var/www/html/hexo-blog;</span><br><span class=\"line\">        index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        location  / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/conf.d</span><br><span class=\"line\">vim docs.conf  <span class=\"comment\">#所以这个docs只要以.conf后缀即可，“docs\"可自定义值。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:81;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#ESC然后:wq退出，保存，</span><br><span class=\"line\">vim blog.conf   #再新建一个文件夹，配置博客</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,加载配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>效果图 81端口，转发到 docs.igeekfan.cn</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png\" alt=\"Y_XRRQRZJZXJ5N96919c.png\"></fancybox></p>\n<p>效果图 82端口,转发到 blog.igeekfan.cn</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/imagedfa93.png\" alt=\"imagedfa93.png\"></fancybox></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker 学习记录\"></a>Docker 学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>","more":"<h2 id=\"Docker-相关文档\"><a href=\"#Docker-相关文档\" class=\"headerlink\" title=\"Docker 相关文档\"></a>Docker 相关文档</h2><p><a href=\"https://www.cnblogs.com/codelove/p/10030439.html\" target=\"_blank\" rel=\"noopener\">Docker最全教程——从理论到实战(一)</a></p>\n<p><a href=\"http://dockone.io/article/126\" target=\"_blank\" rel=\"noopener\">八个Docker的真实应用场景</a></p>\n<p><a href=\"https://blog.csdn.net/julien71/article/details/79760919\" target=\"_blank\" rel=\"noopener\">docker pull很慢解决办法、配置阿里镜像</a></p>\n<p><a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>\n<p>一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。</p>\n<h2 id=\"Dockerfile-文件规则\"><a href=\"#Dockerfile-文件规则\" class=\"headerlink\" title=\"Dockerfile 文件规则\"></a>Dockerfile 文件规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-命令行\"><a href=\"#Docker-命令行\" class=\"headerlink\" title=\"Docker  命令行\"></a>Docker  命令行</h2><ul>\n<li>Command-Line Interfaces <a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/run/</a><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\">docker ps -l #最后启动的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br><span class=\"line\">ocker rm $(docker ps -q -a) #一次性删除所有的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rmi $(docker images -q) #一次性删除所有的镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 </span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像 #运行</span><br><span class=\"line\">docker run -it -p 5000:80 igeekfan/demo</span><br><span class=\"line\">#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/demo </span><br><span class=\"line\">-d 参数后台运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">docker restart 容器id</span><br><span class=\"line\">docker stop 容器id #终止容器。</span><br><span class=\"line\">docker logs $CONTAINER_ID ##在container外面查看它的输出 </span><br><span class=\"line\">docker attach $CONTAINER_ID ##连接上容器实时查看：</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull microsoft/dotnet  #单独安装某一镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker save 镜像id &gt; 文件 #持久化镜像</span><br><span class=\"line\">docker load &lt; 文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span><br><span class=\"line\"></span><br><span class=\"line\">docker save igeekfan/demo &gt; demo.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#然后加载命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; demo.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-相关命令\"><a href=\"#nginx-相关命令\" class=\"headerlink\" title=\"nginx 相关命令\"></a>nginx 相关命令</h2><p>Ubuntu 进入root 权限，不用每次加sudo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su </span><br><span class=\"line\">#然后输入root 密码</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx 验证配置是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>状态、重启、停止、启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">service nginx status </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\">service nginx stop </span><br><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/jasonzhoujx/article/details/80360459\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04更换镜像源</a></li>\n</ul>\n<h2 id=\"nginx配置二级域名\"><a href=\"#nginx配置二级域名\" class=\"headerlink\" title=\"nginx配置二级域名\"></a>nginx配置二级域名</h2><p>在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名</p>\n<ul>\n<li>可参考 <a href=\"https://cloud.tencent.com/developer/article/1183138\" target=\"_blank\" rel=\"noopener\">nginx配置二级域名</a></li>\n</ul>\n<p>我是使用的<a href=\"https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console\" target=\"_blank\" rel=\"noopener\">腾讯云\n</a>，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。<br>云产品-&gt;域名解析-&gt;选择一个域名（列表页选择解析）-&gt;添加记录（依次从在表格上填写，如下图所示，可点击查看大图）</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png\" alt></fancybox></p>\n<p>远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。</p>\n<p>下面的功能，是模拟二个服务，一个是</p>\n<ul>\n<li><a href=\"http://122.152.192.161:81\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:81</a> -&gt;这个是nginx安装后的默认欢迎页面。</li>\n<li><a href=\"http://122.152.192.161:82\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:82</a> -&gt;这个是我使用<a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">hexo</a>做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）</li>\n</ul>\n<p>81端口</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/image51555.png\" alt=\"image51555.png\"></fancybox></p>\n<p>82端口</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/imagec5d3e.png\" alt=\"imagec5d3e.png\"></fancybox></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/sites-enabled</span><br><span class=\"line\">vim defult</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 81;</span><br><span class=\"line\">        listen [::]:81;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/html;</span><br><span class=\"line\">        index index.html index.nginx-debian.html;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 82;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        root /var/www/html/hexo-blog;</span><br><span class=\"line\">        index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        location  / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/conf.d</span><br><span class=\"line\">vim docs.conf  <span class=\"comment\">#所以这个docs只要以.conf后缀即可，“docs\"可自定义值。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:81;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#ESC然后:wq退出，保存，</span><br><span class=\"line\">vim blog.conf   #再新建一个文件夹，配置博客</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,加载配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>效果图 81端口，转发到 docs.igeekfan.cn</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png\" alt=\"Y_XRRQRZJZXJ5N96919c.png\"></fancybox></p>\n<p>效果图 82端口,转发到 blog.igeekfan.cn</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/25/imagedfa93.png\" alt=\"imagedfa93.png\"></fancybox></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"Docker 、nginx 学习记录","path":"2019/06/10/back-end/Docker-nginx-Learn/","eyeCatchImage":"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png","excerpt":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker 学习记录\"></a>Docker 学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>","date":"2019-06-09T17:00:22.000Z","pv":0,"totalPV":0,"categories":"学习记录","tags":["nginx","Docker"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Navicat Premium 12  破解版免费下载","date":"2018-06-02T15:21:22.000Z","_content":"\n#### Navicat Premium 12 破解版免费下载\n\n下载链接如下：[百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n里面也有readm.txt，是一个很简单的说明\n\n由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错\n\n> [navicat连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n最重要的就是这么一行代码就行了\n\n        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n        \n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n<!-- more -->","source":"_posts/back-end/Navicat-Premium-12-Free-download.md","raw":"---\ntitle: Navicat Premium 12  破解版免费下载\ndate: 2018-06-02 23:21:22\ntags:\n- MySQL\n- Navicat Premium 12\ncategory:\n- MySQL\n---\n\n#### Navicat Premium 12 破解版免费下载\n\n下载链接如下：[百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n里面也有readm.txt，是一个很简单的说明\n\n由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错\n\n> [navicat连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n最重要的就是这么一行代码就行了\n\n        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n        \n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n<!-- more -->","slug":"back-end/Navicat-Premium-12-Free-download","published":1,"updated":"2019-10-08T04:21:13.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yg0000rm0twxozcep2s","content":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"Navicat Premium 12  破解版免费下载","path":"2018/06/02/back-end/Navicat-Premium-12-Free-download/","eyeCatchImage":null,"excerpt":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>","date":"2018-06-02T15:21:22.000Z","pv":0,"totalPV":0,"categories":"MySQL","tags":["MySQL","Navicat Premium 12"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"MySQL学习记录","date":"2018-12-02T15:21:22.000Z","description":"Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程","_content":"\n## MySQL 下载与安装配置\n也可去MySQL官网去找相应的msi后缀的下载名，那个不用手动配置，有指引配置项\n\nMysql下载地址：https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\n\nwindows安装MySQL，并配置密码\n```\n运行-> cmd。\n首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    \n命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。\n命令：mysqld -install          #安装mysql\n命令：net start mysql          #启动服务器\n\n#跳过密码验证，在my.ini文件中配置如下\n[mysqld]\nskip-grant-tables\n#cmd运行到mysql/bin目录下\nmysql -u root -p\n#进入mysql命令行\nuse mysql;\n#执行修改密码操作  123qwe为用户密码\nupdate user set authentication_string=password('123qwe') where user='root' and Host = 'localhost';\n#刷新数据库\nflush privileges;\n\nnet start mysql\nnet stop mysql\n\nsc.exe delete \"服务名\"\n```\n\n## 疑难问题记录\n* [Navicat Premium 12连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n* [ubuntu16.04 安装mysql5.7并设置root远程访问](https://www.jianshu.com/p/73fb45b9da73)\n* [mysql Index column size too large](https://blog.csdn.net/pansanday/article/details/79375833)\n* [lower_case_table_names产生的问题](https://blog.csdn.net/wll_1017/article/details/55105180)\n* [mysql如何更改character-set-server默认为latin1](https://blog.csdn.net/whd526/article/details/54894559/)\n* [轻量应用服务器MySQL远程连接踩坑](https://blog.csdn.net/GreekMrzzJ/article/details/82262899)\n\n\n1. Navicat连接MySQL8+时出现2059错误解决方法\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n~~~\n\n**上面那行以mysql_native_password的加密规则更新了用户的密码** \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n2. 使用mysql + code first 问题 ？在windows下使用mysql+code first 时，生成的表名和数据库名都是小写。\n\n解决方案：打开    C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\n<br> 然后在 [mysqld]     添加   lower_case_table_names=2  \n然后要记得重启mysql服务\n\n\n## Docker + MySQL\n- [Docker最全教程之MySQL容器化 （二十五）](https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd)\n\n\n\n### MySQL 树形数据获取\n根据父菜单id得到所有的子节点 \n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```\n\n\n由于@符号与参数冲突，可通过创建存储过程解决\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)\nBEGIN\n select Id,ParentId,DisplayName as Text from (\n              select t1.id,t1.ParentId,t1.DisplayName,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = '0' order by ParentId, id\n                  ) t1,\n                  (select @pids :=pid) t2\n             ) t3 where ischild != 0; \nEND\n```\n\nABP框架中调用存储过程\n```\n        public List<TreeSelectModel> GetChildrens(long? pid)\n        {\n            string sql = $\"call OrganizationChildrens({pid})\";\n\n            return _orginazationDapperRepository.Query<TreeSelectModel>(sql).ToList();\n        }\n```","source":"_posts/back-end/MySQL-Study.md","raw":"---\ntitle: MySQL学习记录\ndate: 2018-12-02 23:21:22\ndescription: Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程\ntags:\n- MySQL\n- ABP\ncategory:\n- MySQL\n---\n\n## MySQL 下载与安装配置\n也可去MySQL官网去找相应的msi后缀的下载名，那个不用手动配置，有指引配置项\n\nMysql下载地址：https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\n\nwindows安装MySQL，并配置密码\n```\n运行-> cmd。\n首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    \n命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。\n命令：mysqld -install          #安装mysql\n命令：net start mysql          #启动服务器\n\n#跳过密码验证，在my.ini文件中配置如下\n[mysqld]\nskip-grant-tables\n#cmd运行到mysql/bin目录下\nmysql -u root -p\n#进入mysql命令行\nuse mysql;\n#执行修改密码操作  123qwe为用户密码\nupdate user set authentication_string=password('123qwe') where user='root' and Host = 'localhost';\n#刷新数据库\nflush privileges;\n\nnet start mysql\nnet stop mysql\n\nsc.exe delete \"服务名\"\n```\n\n## 疑难问题记录\n* [Navicat Premium 12连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n* [ubuntu16.04 安装mysql5.7并设置root远程访问](https://www.jianshu.com/p/73fb45b9da73)\n* [mysql Index column size too large](https://blog.csdn.net/pansanday/article/details/79375833)\n* [lower_case_table_names产生的问题](https://blog.csdn.net/wll_1017/article/details/55105180)\n* [mysql如何更改character-set-server默认为latin1](https://blog.csdn.net/whd526/article/details/54894559/)\n* [轻量应用服务器MySQL远程连接踩坑](https://blog.csdn.net/GreekMrzzJ/article/details/82262899)\n\n\n1. Navicat连接MySQL8+时出现2059错误解决方法\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n~~~\n\n**上面那行以mysql_native_password的加密规则更新了用户的密码** \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n2. 使用mysql + code first 问题 ？在windows下使用mysql+code first 时，生成的表名和数据库名都是小写。\n\n解决方案：打开    C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini\n<br> 然后在 [mysqld]     添加   lower_case_table_names=2  \n然后要记得重启mysql服务\n\n\n## Docker + MySQL\n- [Docker最全教程之MySQL容器化 （二十五）](https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd)\n\n\n\n### MySQL 树形数据获取\n根据父菜单id得到所有的子节点 \n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```\n\n\n由于@符号与参数冲突，可通过创建存储过程解决\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)\nBEGIN\n select Id,ParentId,DisplayName as Text from (\n              select t1.id,t1.ParentId,t1.DisplayName,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = '0' order by ParentId, id\n                  ) t1,\n                  (select @pids :=pid) t2\n             ) t3 where ischild != 0; \nEND\n```\n\nABP框架中调用存储过程\n```\n        public List<TreeSelectModel> GetChildrens(long? pid)\n        {\n            string sql = $\"call OrganizationChildrens({pid})\";\n\n            return _orginazationDapperRepository.Query<TreeSelectModel>(sql).ToList();\n        }\n```","slug":"back-end/MySQL-Study","published":1,"updated":"2019-10-08T04:21:13.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yg8000um0twl1vsofbt","content":"<h2 id=\"MySQL-下载与安装配置\"><a href=\"#MySQL-下载与安装配置\" class=\"headerlink\" title=\"MySQL 下载与安装配置\"></a>MySQL 下载与安装配置</h2><p>也可去MySQL官网去找相应的msi后缀的下载名，那个不用手动配置，有指引配置项</p>\n<p>Mysql下载地址：<a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip</a></p>\n<p>windows安装MySQL，并配置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">运行-&gt; cmd。</span><br><span class=\"line\">首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    </span><br><span class=\"line\">命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。</span><br><span class=\"line\">命令：mysqld -install          #安装mysql</span><br><span class=\"line\">命令：net start mysql          #启动服务器</span><br><span class=\"line\"></span><br><span class=\"line\">#跳过密码验证，在my.ini文件中配置如下</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">#cmd运行到mysql/bin目录下</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">#进入mysql命令行</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">#执行修改密码操作  123qwe为用户密码</span><br><span class=\"line\">update user set authentication_string=password(&apos;123qwe&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</span><br><span class=\"line\">#刷新数据库</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">net start mysql</span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"></span><br><span class=\"line\">sc.exe delete &quot;服务名&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"疑难问题记录\"><a href=\"#疑难问题记录\" class=\"headerlink\" title=\"疑难问题记录\"></a>疑难问题记录</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">Navicat Premium 12连接MySQL8.0出现2059错误</a></li>\n<li><a href=\"https://www.jianshu.com/p/73fb45b9da73\" target=\"_blank\" rel=\"noopener\">ubuntu16.04 安装mysql5.7并设置root远程访问</a></li>\n<li><a href=\"https://blog.csdn.net/pansanday/article/details/79375833\" target=\"_blank\" rel=\"noopener\">mysql Index column size too large</a></li>\n<li><a href=\"https://blog.csdn.net/wll_1017/article/details/55105180\" target=\"_blank\" rel=\"noopener\">lower_case_table_names产生的问题</a></li>\n<li><a href=\"https://blog.csdn.net/whd526/article/details/54894559/\" target=\"_blank\" rel=\"noopener\">mysql如何更改character-set-server默认为latin1</a></li>\n<li><a href=\"https://blog.csdn.net/GreekMrzzJ/article/details/82262899\" target=\"_blank\" rel=\"noopener\">轻量应用服务器MySQL远程连接踩坑</a></li>\n</ul>\n<ol>\n<li>Navicat连接MySQL8+时出现2059错误解决方法<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>上面那行以mysql_native_password的加密规则更新了用户的密码</strong> </p>\n<p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<ol start=\"2\">\n<li>使用mysql + code first 问题 ？在windows下使用mysql+code first 时，生成的表名和数据库名都是小写。</li>\n</ol>\n<p>解决方案：打开    C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini<br><br> 然后在 [mysqld]     添加   lower_case_table_names=2<br>然后要记得重启mysql服务</p>\n<h2 id=\"Docker-MySQL\"><a href=\"#Docker-MySQL\" class=\"headerlink\" title=\"Docker + MySQL\"></a>Docker + MySQL</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd\" target=\"_blank\" rel=\"noopener\">Docker最全教程之MySQL容器化 （二十五）</a></li>\n</ul>\n<h3 id=\"MySQL-树形数据获取\"><a href=\"#MySQL-树形数据获取\" class=\"headerlink\" title=\"MySQL 树形数据获取\"></a>MySQL 树形数据获取</h3><p>根据父菜单id得到所有的子节点 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>\n\n<p>由于@符号与参数冲突，可通过创建存储过程解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> select Id,ParentId,DisplayName as Text from (</span><br><span class=\"line\">              select t1.id,t1.ParentId,t1.DisplayName,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = &apos;0&apos; order by ParentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids :=pid) t2</span><br><span class=\"line\">             ) t3 where ischild != 0; </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<p>ABP框架中调用存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public List&lt;TreeSelectModel&gt; GetChildrens(long? pid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string sql = $&quot;call OrganizationChildrens(&#123;pid&#125;)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _orginazationDapperRepository.Query&lt;TreeSelectModel&gt;(sql).ToList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MySQL-下载与安装配置\"><a href=\"#MySQL-下载与安装配置\" class=\"headerlink\" title=\"MySQL 下载与安装配置\"></a>MySQL 下载与安装配置</h2><p>也可去MySQL官网去找相应的msi后缀的下载名，那个不用手动配置，有指引配置项</p>\n<p>Mysql下载地址：<a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip</a></p>\n<p>windows安装MySQL，并配置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">运行-&gt; cmd。</span><br><span class=\"line\">首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    </span><br><span class=\"line\">命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。</span><br><span class=\"line\">命令：mysqld -install          #安装mysql</span><br><span class=\"line\">命令：net start mysql          #启动服务器</span><br><span class=\"line\"></span><br><span class=\"line\">#跳过密码验证，在my.ini文件中配置如下</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">#cmd运行到mysql/bin目录下</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">#进入mysql命令行</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">#执行修改密码操作  123qwe为用户密码</span><br><span class=\"line\">update user set authentication_string=password(&apos;123qwe&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</span><br><span class=\"line\">#刷新数据库</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">net start mysql</span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"></span><br><span class=\"line\">sc.exe delete &quot;服务名&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"疑难问题记录\"><a href=\"#疑难问题记录\" class=\"headerlink\" title=\"疑难问题记录\"></a>疑难问题记录</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">Navicat Premium 12连接MySQL8.0出现2059错误</a></li>\n<li><a href=\"https://www.jianshu.com/p/73fb45b9da73\" target=\"_blank\" rel=\"noopener\">ubuntu16.04 安装mysql5.7并设置root远程访问</a></li>\n<li><a href=\"https://blog.csdn.net/pansanday/article/details/79375833\" target=\"_blank\" rel=\"noopener\">mysql Index column size too large</a></li>\n<li><a href=\"https://blog.csdn.net/wll_1017/article/details/55105180\" target=\"_blank\" rel=\"noopener\">lower_case_table_names产生的问题</a></li>\n<li><a href=\"https://blog.csdn.net/whd526/article/details/54894559/\" target=\"_blank\" rel=\"noopener\">mysql如何更改character-set-server默认为latin1</a></li>\n<li><a href=\"https://blog.csdn.net/GreekMrzzJ/article/details/82262899\" target=\"_blank\" rel=\"noopener\">轻量应用服务器MySQL远程连接踩坑</a></li>\n</ul>\n<ol>\n<li>Navicat连接MySQL8+时出现2059错误解决方法<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>上面那行以mysql_native_password的加密规则更新了用户的密码</strong> </p>\n<p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<ol start=\"2\">\n<li>使用mysql + code first 问题 ？在windows下使用mysql+code first 时，生成的表名和数据库名都是小写。</li>\n</ol>\n<p>解决方案：打开    C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini<br><br> 然后在 [mysqld]     添加   lower_case_table_names=2<br>然后要记得重启mysql服务</p>\n<h2 id=\"Docker-MySQL\"><a href=\"#Docker-MySQL\" class=\"headerlink\" title=\"Docker + MySQL\"></a>Docker + MySQL</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd\" target=\"_blank\" rel=\"noopener\">Docker最全教程之MySQL容器化 （二十五）</a></li>\n</ul>\n<h3 id=\"MySQL-树形数据获取\"><a href=\"#MySQL-树形数据获取\" class=\"headerlink\" title=\"MySQL 树形数据获取\"></a>MySQL 树形数据获取</h3><p>根据父菜单id得到所有的子节点 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>\n\n<p>由于@符号与参数冲突，可通过创建存储过程解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> select Id,ParentId,DisplayName as Text from (</span><br><span class=\"line\">              select t1.id,t1.ParentId,t1.DisplayName,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = &apos;0&apos; order by ParentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids :=pid) t2</span><br><span class=\"line\">             ) t3 where ischild != 0; </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<p>ABP框架中调用存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public List&lt;TreeSelectModel&gt; GetChildrens(long? pid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string sql = $&quot;call OrganizationChildrens(&#123;pid&#125;)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _orginazationDapperRepository.Query&lt;TreeSelectModel&gt;(sql).ToList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"MySQL学习记录","path":"2018/12/02/back-end/MySQL-Study/","eyeCatchImage":null,"excerpt":"Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程","date":"2018-12-02T15:21:22.000Z","pv":0,"totalPV":0,"categories":"MySQL","tags":["ABP","MySQL"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Node.js 构建成树形结构","date":"2017-01-10T06:10:47.000Z","_content":"\n> Node.js 下生成递归的树形结构\n\n如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索\n1. var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.\n2. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。\n\n<!-- more -->\n\n```\nfunction treeNode(id, pid, text, children) {\n    this.id = id;\n    this.pid = pid;\n    this.text = text;\n    this.children = children;\n}\n\n//测试数据\nvar data = [\n { 'id': 1, 'pid': 0, 'text': '主节点' },\n { 'id': 2, 'pid': 1, 'text': '第二层,id2' }, \n { 'id': 3, 'pid': 1, 'text': '第二层,id3' }, \n { 'id': 4, 'pid': 3, 'text': '第三层,id4' }\n];\n\nfunction getDFSTree(data, pid) {\n    var treelist = [];\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].pid == pid) {\n\t\t\tvar tree = new treeNode(data[i].id, \n\t\t\t\t\t\t\t\t\tdata[i].pid, \n\t\t\t\t\t\t\t\t\tdata[i].text, \n\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));\n            treelist.push(tree)\n        }\n    }\n    return treelist;\n}\n//exports.getDFSTree= getDFSTree;\n//调用 \nvar tree = getDFSTree(data, 0);\nconsole.log(tree[0].children)\n```\n\n> 递归删除子节点\n\n如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法\n1. 得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  \n2. 第二种，直接写一个sql,得到所有子节点，然后删除。\n\n#### 第一种实现-递归\n具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。\n\n数据格式为 \n```\n[\n\t{'FunctionID':1,'ParentID ':0,'IsActive':1},\n\t{'FunctionID':2,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':3,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':4,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':5,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':6,'ParentID ':3,'IsActive':1}\n]\n```\n递归代码实现\n```\nvar treeFuncID = [];\ntreeFuncID.push({\n     'FunctionID': data.FunctionID\n });\n\n //得到子节点的所有functionid\n  function getMultiTreeID(FunctionID) {\n      var querydata = {\n          'ParentID': FunctionID,\n          'IsActive': 1\n      }\n      var data = [];\n    \n      for (var j in results) {\n          if (results[j].ParentID == FunctionID) {\n              data.push({ 'FunctionID': results[j].FunctionID });\n          }\n      }\n      if (data != undefined && data.length > 0) {\n          for (var i in data) {\n              getMultiTreeID(data[i].FunctionID);\n              treeFuncID.push({\n                  'FunctionID': data[i].FunctionID\n              });\n\n          }\n      }\n  }//DFS查找功能点数据，将其push到treeFunctID数组中\n  getMultiTreeID(data.FunctionID);//同步\n        \n```\n\n#### 第二种实现-MsSQL版本\nSummaries  为表名 IsDeleted为软删除字段\t\n\n```\n//可以根据父节点得到所有子节点数据\nstring sql = @\"\n         WITH TEMP AS \n         (\n         SELECT Id,Name,PId\n                 FROM \n                 HbAssess.dbo.Summaries  \n                 WHERE \n                 PId = @pId AND IsDeleted='false'\n             UNION ALL \n                 SELECT a.Id,a.Name,a.PId\n                 FROM \n TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted='false'\n         )  \n         SELECT Id,Name as 'Text',PId as ParentId FROM TEMP \";\n\n```\n\n#### 第二种实现-MySQL 5.6+\nre_menu为表名\n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```","source":"_posts/back-end/Node.js-Construction-of-Tree-Structure.md","raw":"---\ntitle: Node.js 构建成树形结构\ndate: 2017-01-10 14:10:47\ntags:\n- Node.js\ncategory: \n- 大后端\n---\n\n> Node.js 下生成递归的树形结构\n\n如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索\n1. var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.\n2. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。\n\n<!-- more -->\n\n```\nfunction treeNode(id, pid, text, children) {\n    this.id = id;\n    this.pid = pid;\n    this.text = text;\n    this.children = children;\n}\n\n//测试数据\nvar data = [\n { 'id': 1, 'pid': 0, 'text': '主节点' },\n { 'id': 2, 'pid': 1, 'text': '第二层,id2' }, \n { 'id': 3, 'pid': 1, 'text': '第二层,id3' }, \n { 'id': 4, 'pid': 3, 'text': '第三层,id4' }\n];\n\nfunction getDFSTree(data, pid) {\n    var treelist = [];\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].pid == pid) {\n\t\t\tvar tree = new treeNode(data[i].id, \n\t\t\t\t\t\t\t\t\tdata[i].pid, \n\t\t\t\t\t\t\t\t\tdata[i].text, \n\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));\n            treelist.push(tree)\n        }\n    }\n    return treelist;\n}\n//exports.getDFSTree= getDFSTree;\n//调用 \nvar tree = getDFSTree(data, 0);\nconsole.log(tree[0].children)\n```\n\n> 递归删除子节点\n\n如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法\n1. 得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  \n2. 第二种，直接写一个sql,得到所有子节点，然后删除。\n\n#### 第一种实现-递归\n具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。\n\n数据格式为 \n```\n[\n\t{'FunctionID':1,'ParentID ':0,'IsActive':1},\n\t{'FunctionID':2,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':3,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':4,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':5,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':6,'ParentID ':3,'IsActive':1}\n]\n```\n递归代码实现\n```\nvar treeFuncID = [];\ntreeFuncID.push({\n     'FunctionID': data.FunctionID\n });\n\n //得到子节点的所有functionid\n  function getMultiTreeID(FunctionID) {\n      var querydata = {\n          'ParentID': FunctionID,\n          'IsActive': 1\n      }\n      var data = [];\n    \n      for (var j in results) {\n          if (results[j].ParentID == FunctionID) {\n              data.push({ 'FunctionID': results[j].FunctionID });\n          }\n      }\n      if (data != undefined && data.length > 0) {\n          for (var i in data) {\n              getMultiTreeID(data[i].FunctionID);\n              treeFuncID.push({\n                  'FunctionID': data[i].FunctionID\n              });\n\n          }\n      }\n  }//DFS查找功能点数据，将其push到treeFunctID数组中\n  getMultiTreeID(data.FunctionID);//同步\n        \n```\n\n#### 第二种实现-MsSQL版本\nSummaries  为表名 IsDeleted为软删除字段\t\n\n```\n//可以根据父节点得到所有子节点数据\nstring sql = @\"\n         WITH TEMP AS \n         (\n         SELECT Id,Name,PId\n                 FROM \n                 HbAssess.dbo.Summaries  \n                 WHERE \n                 PId = @pId AND IsDeleted='false'\n             UNION ALL \n                 SELECT a.Id,a.Name,a.PId\n                 FROM \n TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted='false'\n         )  \n         SELECT Id,Name as 'Text',PId as ParentId FROM TEMP \";\n\n```\n\n#### 第二种实现-MySQL 5.6+\nre_menu为表名\n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```","slug":"back-end/Node.js-Construction-of-Tree-Structure","published":1,"updated":"2019-10-08T04:21:13.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ygf000ym0twliumf707","content":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function treeNode(id, pid, text, children) &#123;</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.pid = pid;</span><br><span class=\"line\">    this.text = text;</span><br><span class=\"line\">    this.children = children;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试数据</span><br><span class=\"line\">var data = [</span><br><span class=\"line\"> &#123; &apos;id&apos;: 1, &apos;pid&apos;: 0, &apos;text&apos;: &apos;主节点&apos; &#125;,</span><br><span class=\"line\"> &#123; &apos;id&apos;: 2, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id2&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 3, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id3&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 4, &apos;pid&apos;: 3, &apos;text&apos;: &apos;第三层,id4&apos; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function getDFSTree(data, pid) &#123;</span><br><span class=\"line\">    var treelist = [];</span><br><span class=\"line\">    for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">        if (data[i].pid == pid) &#123;</span><br><span class=\"line\">\t\t\tvar tree = new treeNode(data[i].id, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].pid, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].text, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));</span><br><span class=\"line\">            treelist.push(tree)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return treelist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//exports.getDFSTree= getDFSTree;</span><br><span class=\"line\">//调用 </span><br><span class=\"line\">var tree = getDFSTree(data, 0);</span><br><span class=\"line\">console.log(tree[0].children)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归删除子节点</p>\n</blockquote>\n<p>如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法</p>\n<ol>\n<li>得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  </li>\n<li>第二种，直接写一个sql,得到所有子节点，然后删除。</li>\n</ol>\n<h4 id=\"第一种实现-递归\"><a href=\"#第一种实现-递归\" class=\"headerlink\" title=\"第一种实现-递归\"></a>第一种实现-递归</h4><p>具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。</p>\n<p>数据格式为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:1,&apos;ParentID &apos;:0,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:2,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:3,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:4,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:5,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:6,&apos;ParentID &apos;:3,&apos;IsActive&apos;:1&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>递归代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var treeFuncID = [];</span><br><span class=\"line\">treeFuncID.push(&#123;</span><br><span class=\"line\">     &apos;FunctionID&apos;: data.FunctionID</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> //得到子节点的所有functionid</span><br><span class=\"line\">  function getMultiTreeID(FunctionID) &#123;</span><br><span class=\"line\">      var querydata = &#123;</span><br><span class=\"line\">          &apos;ParentID&apos;: FunctionID,</span><br><span class=\"line\">          &apos;IsActive&apos;: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var data = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">      for (var j in results) &#123;</span><br><span class=\"line\">          if (results[j].ParentID == FunctionID) &#123;</span><br><span class=\"line\">              data.push(&#123; &apos;FunctionID&apos;: results[j].FunctionID &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (data != undefined &amp;&amp; data.length &gt; 0) &#123;</span><br><span class=\"line\">          for (var i in data) &#123;</span><br><span class=\"line\">              getMultiTreeID(data[i].FunctionID);</span><br><span class=\"line\">              treeFuncID.push(&#123;</span><br><span class=\"line\">                  &apos;FunctionID&apos;: data[i].FunctionID</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;//DFS查找功能点数据，将其push到treeFunctID数组中</span><br><span class=\"line\">  getMultiTreeID(data.FunctionID);//同步</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MsSQL版本\"><a href=\"#第二种实现-MsSQL版本\" class=\"headerlink\" title=\"第二种实现-MsSQL版本\"></a>第二种实现-MsSQL版本</h4><p>Summaries  为表名 IsDeleted为软删除字段    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//可以根据父节点得到所有子节点数据</span><br><span class=\"line\">string sql = @&quot;</span><br><span class=\"line\">         WITH TEMP AS </span><br><span class=\"line\">         (</span><br><span class=\"line\">         SELECT Id,Name,PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\">                 HbAssess.dbo.Summaries  </span><br><span class=\"line\">                 WHERE </span><br><span class=\"line\">                 PId = @pId AND IsDeleted=&apos;false&apos;</span><br><span class=\"line\">             UNION ALL </span><br><span class=\"line\">                 SELECT a.Id,a.Name,a.PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\"> TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted=&apos;false&apos;</span><br><span class=\"line\">         )  </span><br><span class=\"line\">         SELECT Id,Name as &apos;Text&apos;,PId as ParentId FROM TEMP &quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MySQL-5-6\"><a href=\"#第二种实现-MySQL-5-6\" class=\"headerlink\" title=\"第二种实现-MySQL 5.6+\"></a>第二种实现-MySQL 5.6+</h4><p>re_menu为表名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function treeNode(id, pid, text, children) &#123;</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.pid = pid;</span><br><span class=\"line\">    this.text = text;</span><br><span class=\"line\">    this.children = children;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试数据</span><br><span class=\"line\">var data = [</span><br><span class=\"line\"> &#123; &apos;id&apos;: 1, &apos;pid&apos;: 0, &apos;text&apos;: &apos;主节点&apos; &#125;,</span><br><span class=\"line\"> &#123; &apos;id&apos;: 2, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id2&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 3, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id3&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 4, &apos;pid&apos;: 3, &apos;text&apos;: &apos;第三层,id4&apos; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function getDFSTree(data, pid) &#123;</span><br><span class=\"line\">    var treelist = [];</span><br><span class=\"line\">    for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">        if (data[i].pid == pid) &#123;</span><br><span class=\"line\">\t\t\tvar tree = new treeNode(data[i].id, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].pid, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].text, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));</span><br><span class=\"line\">            treelist.push(tree)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return treelist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//exports.getDFSTree= getDFSTree;</span><br><span class=\"line\">//调用 </span><br><span class=\"line\">var tree = getDFSTree(data, 0);</span><br><span class=\"line\">console.log(tree[0].children)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归删除子节点</p>\n</blockquote>\n<p>如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法</p>\n<ol>\n<li>得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  </li>\n<li>第二种，直接写一个sql,得到所有子节点，然后删除。</li>\n</ol>\n<h4 id=\"第一种实现-递归\"><a href=\"#第一种实现-递归\" class=\"headerlink\" title=\"第一种实现-递归\"></a>第一种实现-递归</h4><p>具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。</p>\n<p>数据格式为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:1,&apos;ParentID &apos;:0,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:2,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:3,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:4,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:5,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:6,&apos;ParentID &apos;:3,&apos;IsActive&apos;:1&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>递归代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var treeFuncID = [];</span><br><span class=\"line\">treeFuncID.push(&#123;</span><br><span class=\"line\">     &apos;FunctionID&apos;: data.FunctionID</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> //得到子节点的所有functionid</span><br><span class=\"line\">  function getMultiTreeID(FunctionID) &#123;</span><br><span class=\"line\">      var querydata = &#123;</span><br><span class=\"line\">          &apos;ParentID&apos;: FunctionID,</span><br><span class=\"line\">          &apos;IsActive&apos;: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var data = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">      for (var j in results) &#123;</span><br><span class=\"line\">          if (results[j].ParentID == FunctionID) &#123;</span><br><span class=\"line\">              data.push(&#123; &apos;FunctionID&apos;: results[j].FunctionID &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (data != undefined &amp;&amp; data.length &gt; 0) &#123;</span><br><span class=\"line\">          for (var i in data) &#123;</span><br><span class=\"line\">              getMultiTreeID(data[i].FunctionID);</span><br><span class=\"line\">              treeFuncID.push(&#123;</span><br><span class=\"line\">                  &apos;FunctionID&apos;: data[i].FunctionID</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;//DFS查找功能点数据，将其push到treeFunctID数组中</span><br><span class=\"line\">  getMultiTreeID(data.FunctionID);//同步</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MsSQL版本\"><a href=\"#第二种实现-MsSQL版本\" class=\"headerlink\" title=\"第二种实现-MsSQL版本\"></a>第二种实现-MsSQL版本</h4><p>Summaries  为表名 IsDeleted为软删除字段    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//可以根据父节点得到所有子节点数据</span><br><span class=\"line\">string sql = @&quot;</span><br><span class=\"line\">         WITH TEMP AS </span><br><span class=\"line\">         (</span><br><span class=\"line\">         SELECT Id,Name,PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\">                 HbAssess.dbo.Summaries  </span><br><span class=\"line\">                 WHERE </span><br><span class=\"line\">                 PId = @pId AND IsDeleted=&apos;false&apos;</span><br><span class=\"line\">             UNION ALL </span><br><span class=\"line\">                 SELECT a.Id,a.Name,a.PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\"> TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted=&apos;false&apos;</span><br><span class=\"line\">         )  </span><br><span class=\"line\">         SELECT Id,Name as &apos;Text&apos;,PId as ParentId FROM TEMP &quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MySQL-5-6\"><a href=\"#第二种实现-MySQL-5-6\" class=\"headerlink\" title=\"第二种实现-MySQL 5.6+\"></a>第二种实现-MySQL 5.6+</h4><p>re_menu为表名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"Node.js 构建成树形结构","path":"2017/01/10/back-end/Node.js-Construction-of-Tree-Structure/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>","date":"2017-01-10T06:10:47.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["Node.js"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".NET Framework 下的RazorEngine代码生成原理介绍","date":"2019-06-11T16:56:03.000Z","description":"在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本","_content":"\n### RazorEngine模板引擎\n在旧版本下[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n> **旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。**\n\n### 如何使用Razor实现代码生成器\n \n**这里提供最简单的一个栗子**\n\n1. CopyRightTemplate.cshtml模板代码如下\n```csharp\n@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo\n    //=============================================================\n    // 创建人:              @Model.UserName\n    // 创建时间:           @Model.CreateTime\n    // 邮箱：             @Model.EmailAddress\n    //==============================================================\n```\n\n2. 对应的实体类\n```csharp\n    public class CopyRightUserInfo\n    {\n        public string UserName { get; set; }\n        public string EmailAddress { get; set; }\n        public DateTime CreateTime { get; set; }\n        public string FileRemark { get; set; }\n    }\n```\n\n3. 对应的test方法\n```csharp\n        //根据路径。要根据自己实际情况调整\n        private const string BasePath = @\"..\\..\\..\\SJNScaffolding\\\";\n        [TestMethod]\n        public void testCorpyRight()\n        {\n            var path = BasePath + \"Templates\\\\CopyRightTemplate.cshtml\";\n            var template = File.ReadAllText(path);\n\n            string content = Engine.Razor.RunCompile(template, \"CopyRightTemplate\", typeof(CopyRightUserInfo), new CopyRightUserInfo\n            {\n                CreateTime = DateTime.Now,\n                EmailAddress = \"710277267@qq.com\",\n                UserName = \"IGeekFan\"\n            });\n\n        }\n```\n4. 下断点后运行，content变量    \n\n![SJNScaffolding](https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png)\n\n**旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用**","source":"_posts/back-end/RazorEngine-Code-Generation-Principle.md","raw":"---\ntitle:  .NET Framework 下的RazorEngine代码生成原理介绍\ndate: 2019-06-12 00:56:03\ndescription: 在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本\ntags:\n- .NET Framework\n- RazorEngine\n- 代码生成器\ncategory:\n- .NET Framework\n---\n\n### RazorEngine模板引擎\n在旧版本下[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n> **旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。**\n\n### 如何使用Razor实现代码生成器\n \n**这里提供最简单的一个栗子**\n\n1. CopyRightTemplate.cshtml模板代码如下\n```csharp\n@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo\n    //=============================================================\n    // 创建人:              @Model.UserName\n    // 创建时间:           @Model.CreateTime\n    // 邮箱：             @Model.EmailAddress\n    //==============================================================\n```\n\n2. 对应的实体类\n```csharp\n    public class CopyRightUserInfo\n    {\n        public string UserName { get; set; }\n        public string EmailAddress { get; set; }\n        public DateTime CreateTime { get; set; }\n        public string FileRemark { get; set; }\n    }\n```\n\n3. 对应的test方法\n```csharp\n        //根据路径。要根据自己实际情况调整\n        private const string BasePath = @\"..\\..\\..\\SJNScaffolding\\\";\n        [TestMethod]\n        public void testCorpyRight()\n        {\n            var path = BasePath + \"Templates\\\\CopyRightTemplate.cshtml\";\n            var template = File.ReadAllText(path);\n\n            string content = Engine.Razor.RunCompile(template, \"CopyRightTemplate\", typeof(CopyRightUserInfo), new CopyRightUserInfo\n            {\n                CreateTime = DateTime.Now,\n                EmailAddress = \"710277267@qq.com\",\n                UserName = \"IGeekFan\"\n            });\n\n        }\n```\n4. 下断点后运行，content变量    \n\n![SJNScaffolding](https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png)\n\n**旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用**","slug":"back-end/RazorEngine-Code-Generation-Principle","published":1,"updated":"2019-10-08T04:21:13.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ygk000zm0twkomcb93n","content":"<h3 id=\"RazorEngine模板引擎\"><a href=\"#RazorEngine模板引擎\" class=\"headerlink\" title=\"RazorEngine模板引擎\"></a>RazorEngine模板引擎</h3><p>在旧版本下<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></p>\n<blockquote>\n<p><strong>旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n</blockquote>\n<h3 id=\"如何使用Razor实现代码生成器\"><a href=\"#如何使用Razor实现代码生成器\" class=\"headerlink\" title=\"如何使用Razor实现代码生成器\"></a>如何使用Razor实现代码生成器</h3><p><strong>这里提供最简单的一个栗子</strong></p>\n<ol>\n<li><p>CopyRightTemplate.cshtml模板代码如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo</span><br><span class=\"line\">    <span class=\"comment\">//=============================================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建人:              @Model.UserName</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建时间:           @Model.CreateTime</span></span><br><span class=\"line\">    <span class=\"comment\">// 邮箱：             @Model.EmailAddress</span></span><br><span class=\"line\">    <span class=\"comment\">//==============================================================</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的实体类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CopyRightUserInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EmailAddress &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FileRemark &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的test方法</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据路径。要根据自己实际情况调整</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> BasePath = <span class=\"string\">@\"..\\..\\..\\SJNScaffolding\\\"</span>;</span><br><span class=\"line\">[<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCorpyRight</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = BasePath + <span class=\"string\">\"Templates\\\\CopyRightTemplate.cshtml\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = File.ReadAllText(path);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> content = Engine.Razor.RunCompile(template, <span class=\"string\">\"CopyRightTemplate\"</span>, <span class=\"keyword\">typeof</span>(CopyRightUserInfo), <span class=\"keyword\">new</span> CopyRightUserInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CreateTime = DateTime.Now,</span><br><span class=\"line\">        EmailAddress = <span class=\"string\">\"710277267@qq.com\"</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">\"IGeekFan\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下断点后运行，content变量    </p>\n</li>\n</ol>\n<p><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png\" alt=\"SJNScaffolding\"></p>\n<p><strong>旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"RazorEngine模板引擎\"><a href=\"#RazorEngine模板引擎\" class=\"headerlink\" title=\"RazorEngine模板引擎\"></a>RazorEngine模板引擎</h3><p>在旧版本下<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></p>\n<blockquote>\n<p><strong>旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n</blockquote>\n<h3 id=\"如何使用Razor实现代码生成器\"><a href=\"#如何使用Razor实现代码生成器\" class=\"headerlink\" title=\"如何使用Razor实现代码生成器\"></a>如何使用Razor实现代码生成器</h3><p><strong>这里提供最简单的一个栗子</strong></p>\n<ol>\n<li><p>CopyRightTemplate.cshtml模板代码如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo</span><br><span class=\"line\">    <span class=\"comment\">//=============================================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建人:              @Model.UserName</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建时间:           @Model.CreateTime</span></span><br><span class=\"line\">    <span class=\"comment\">// 邮箱：             @Model.EmailAddress</span></span><br><span class=\"line\">    <span class=\"comment\">//==============================================================</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的实体类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CopyRightUserInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EmailAddress &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FileRemark &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的test方法</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据路径。要根据自己实际情况调整</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> BasePath = <span class=\"string\">@\"..\\..\\..\\SJNScaffolding\\\"</span>;</span><br><span class=\"line\">[<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCorpyRight</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = BasePath + <span class=\"string\">\"Templates\\\\CopyRightTemplate.cshtml\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = File.ReadAllText(path);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> content = Engine.Razor.RunCompile(template, <span class=\"string\">\"CopyRightTemplate\"</span>, <span class=\"keyword\">typeof</span>(CopyRightUserInfo), <span class=\"keyword\">new</span> CopyRightUserInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CreateTime = DateTime.Now,</span><br><span class=\"line\">        EmailAddress = <span class=\"string\">\"710277267@qq.com\"</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">\"IGeekFan\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下断点后运行，content变量    </p>\n</li>\n</ol>\n<p><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png\" alt=\"SJNScaffolding\"></p>\n<p><strong>旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用</strong></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":".NET Framework 下的RazorEngine代码生成原理介绍","path":"2019/06/12/back-end/RazorEngine-Code-Generation-Principle/","eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png","excerpt":"在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本","date":"2019-06-11T16:56:03.000Z","pv":0,"totalPV":0,"categories":".NET Framework","tags":[".NET Framework","RazorEngine","代码生成器"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"工作内容Rshiny框架使用","date":"2018-12-25T16:56:03.000Z","description":"R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。","_content":"\n\n\n## shiny Server学习记录-网络计算\n* [http://218.94.144.229:8098/NetworkEntropy/]( http://218.94.144.229:8098/NetworkEntropy/)  用户名 admin 密码 123qwe\n* shiny api文档[http://shiny.rstudio.com/reference/shiny/latest/](http://shiny.rstudio.com/reference/shiny/latest/)\n* shiny github [https://github.com/rstudio/shiny](https://github.com/rstudio/shiny)\n* Shiny Server配置 https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\n* R shiny基础教程 [https://blog.csdn.net/u014801157/article/category/5690387](https://blog.csdn.net/u014801157/article/category/5690387)\n* windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包[https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg](https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg)\n\n\n\n* 内网是在浏览器下输入 http://:3838/APP_NAME/即可 \n\n\n一些重要的命令\n\n### 先复制shiny包自带样例到目录下\n~~~\ncp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/   \n~~~\n\nshiny server 服务设置状态\n~~~\n#查看状态\nsudo systemctl status shiny-server\n#开启\nsudo systemctl start shiny-server\n#停止\nsudo systemctl stop shiny-server\n#重启\nsudo systemctl restart shiny-server\n~~~\n\n1) 配置文件位置：/etc/shiny-server/shiny-server.conf \n2) 报错时查看日志[服务器运行日志] \n/var/log/shiny-server.log \n3) shiny运行日志[类似R的运行日志] \n/var/log/shiny-server\n\n\n**当无法安装某些包时可使用下面的代码进行安装**：\n\n~~~\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"包名\")\n~~~\n\n\n> R 3.3.3  R语言执行需要安装的程序包\n> \n> 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录\n~~~bash\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n\n~~~\ninstall.packages('pillar')\n\ninstall.packages(\"ClustOfVar\")\ninstall.packages(\"psych\")\ninstall.packages(\"GPArotation\")\ninstall.packages(\"stringr\")\ninstall.packages(\"readxl\")\ninstall.packages(\"ca\")\n## 这个包可能也不正常\ninstall.packages(\"arulesViz\")\n\n\n## 这些包无法正常安装\ninstall.packages(\"arules\") \ninstall.packages(\"lavaan\")\n~~~\n\n\n### 中医网络分析模块\n~~~\n    biocLite('GO.db')\n    biocLite('org.Hs.eg.db')\n    biocLite('clusterProfiler')\n\n    biocLite('WGCNA')\n\n    intsall.packages('WGCNA')\n~~~\n\n\n\n2018-12-26\n可以不阻塞当前运行的程序\n* shiny 异步 编程 [https://rstudio.github.io/promises/articles/intro.html](https://rstudio.github.io/promises/articles/intro.html)\n\n","source":"_posts/back-end/Rshiny-Framework-How-To-Use.md","raw":"---\ntitle:  工作内容Rshiny框架使用\ndate: 2018-12-26 00:56:03\ndescription: R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。\ntags:\n- Rshiny\ncategory:\n- 大后端\n---\n\n\n\n## shiny Server学习记录-网络计算\n* [http://218.94.144.229:8098/NetworkEntropy/]( http://218.94.144.229:8098/NetworkEntropy/)  用户名 admin 密码 123qwe\n* shiny api文档[http://shiny.rstudio.com/reference/shiny/latest/](http://shiny.rstudio.com/reference/shiny/latest/)\n* shiny github [https://github.com/rstudio/shiny](https://github.com/rstudio/shiny)\n* Shiny Server配置 https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\n* R shiny基础教程 [https://blog.csdn.net/u014801157/article/category/5690387](https://blog.csdn.net/u014801157/article/category/5690387)\n* windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包[https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg](https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg)\n\n\n\n* 内网是在浏览器下输入 http://:3838/APP_NAME/即可 \n\n\n一些重要的命令\n\n### 先复制shiny包自带样例到目录下\n~~~\ncp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/   \n~~~\n\nshiny server 服务设置状态\n~~~\n#查看状态\nsudo systemctl status shiny-server\n#开启\nsudo systemctl start shiny-server\n#停止\nsudo systemctl stop shiny-server\n#重启\nsudo systemctl restart shiny-server\n~~~\n\n1) 配置文件位置：/etc/shiny-server/shiny-server.conf \n2) 报错时查看日志[服务器运行日志] \n/var/log/shiny-server.log \n3) shiny运行日志[类似R的运行日志] \n/var/log/shiny-server\n\n\n**当无法安装某些包时可使用下面的代码进行安装**：\n\n~~~\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"包名\")\n~~~\n\n\n> R 3.3.3  R语言执行需要安装的程序包\n> \n> 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录\n~~~bash\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n\n~~~\ninstall.packages('pillar')\n\ninstall.packages(\"ClustOfVar\")\ninstall.packages(\"psych\")\ninstall.packages(\"GPArotation\")\ninstall.packages(\"stringr\")\ninstall.packages(\"readxl\")\ninstall.packages(\"ca\")\n## 这个包可能也不正常\ninstall.packages(\"arulesViz\")\n\n\n## 这些包无法正常安装\ninstall.packages(\"arules\") \ninstall.packages(\"lavaan\")\n~~~\n\n\n### 中医网络分析模块\n~~~\n    biocLite('GO.db')\n    biocLite('org.Hs.eg.db')\n    biocLite('clusterProfiler')\n\n    biocLite('WGCNA')\n\n    intsall.packages('WGCNA')\n~~~\n\n\n\n2018-12-26\n可以不阻塞当前运行的程序\n* shiny 异步 编程 [https://rstudio.github.io/promises/articles/intro.html](https://rstudio.github.io/promises/articles/intro.html)\n\n","slug":"back-end/Rshiny-Framework-How-To-Use","published":1,"updated":"2019-10-08T04:21:13.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ygp0012m0tw9pzb8izi","content":"<h2 id=\"shiny-Server学习记录-网络计算\"><a href=\"#shiny-Server学习记录-网络计算\" class=\"headerlink\" title=\"shiny Server学习记录-网络计算\"></a>shiny Server学习记录-网络计算</h2><ul>\n<li><a href=\"http://218.94.144.229:8098/NetworkEntropy/\" target=\"_blank\" rel=\"noopener\">http://218.94.144.229:8098/NetworkEntropy/</a>  用户名 admin 密码 123qwe</li>\n<li>shiny api文档<a href=\"http://shiny.rstudio.com/reference/shiny/latest/\" target=\"_blank\" rel=\"noopener\">http://shiny.rstudio.com/reference/shiny/latest/</a></li>\n<li>shiny github <a href=\"https://github.com/rstudio/shiny\" target=\"_blank\" rel=\"noopener\">https://github.com/rstudio/shiny</a></li>\n<li>Shiny Server配置 <a href=\"https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440</a></li>\n<li>R shiny基础教程 <a href=\"https://blog.csdn.net/u014801157/article/category/5690387\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014801157/article/category/5690387</a></li>\n<li>windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包<a href=\"https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg</a></li>\n</ul>\n<ul>\n<li>内网是在浏览器下输入 http://:3838/APP_NAME/即可 </li>\n</ul>\n<p>一些重要的命令</p>\n<h3 id=\"先复制shiny包自带样例到目录下\"><a href=\"#先复制shiny包自带样例到目录下\" class=\"headerlink\" title=\"先复制shiny包自带样例到目录下\"></a>先复制shiny包自带样例到目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/</span><br></pre></td></tr></table></figure>\n\n<p>shiny server 服务设置状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#查看状态</span><br><span class=\"line\">sudo systemctl status shiny-server</span><br><span class=\"line\">#开启</span><br><span class=\"line\">sudo systemctl start shiny-server</span><br><span class=\"line\">#停止</span><br><span class=\"line\">sudo systemctl stop shiny-server</span><br><span class=\"line\">#重启</span><br><span class=\"line\">sudo systemctl restart shiny-server</span><br></pre></td></tr></table></figure>\n\n<p>1) 配置文件位置：/etc/shiny-server/shiny-server.conf<br>2) 报错时查看日志[服务器运行日志]<br>/var/log/shiny-server.log<br>3) shiny运行日志[类似R的运行日志]<br>/var/log/shiny-server</p>\n<p><strong>当无法安装某些包时可使用下面的代码进行安装</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source(&quot;http://bioconductor.org/biocLite.R&quot;)</span><br><span class=\"line\">biocLite(&quot;包名&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>R 3.3.3  R语言执行需要安装的程序包</p>\n<p>以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths(<span class=\"string\">\"C:/Program Files/R/R-3.3.3/library\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">install.packages(&apos;pillar&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">install.packages(&quot;ClustOfVar&quot;)</span><br><span class=\"line\">install.packages(&quot;psych&quot;)</span><br><span class=\"line\">install.packages(&quot;GPArotation&quot;)</span><br><span class=\"line\">install.packages(&quot;stringr&quot;)</span><br><span class=\"line\">install.packages(&quot;readxl&quot;)</span><br><span class=\"line\">install.packages(&quot;ca&quot;)</span><br><span class=\"line\">## 这个包可能也不正常</span><br><span class=\"line\">install.packages(&quot;arulesViz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 这些包无法正常安装</span><br><span class=\"line\">install.packages(&quot;arules&quot;) </span><br><span class=\"line\">install.packages(&quot;lavaan&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中医网络分析模块\"><a href=\"#中医网络分析模块\" class=\"headerlink\" title=\"中医网络分析模块\"></a>中医网络分析模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">biocLite(&apos;GO.db&apos;)</span><br><span class=\"line\">biocLite(&apos;org.Hs.eg.db&apos;)</span><br><span class=\"line\">biocLite(&apos;clusterProfiler&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">biocLite(&apos;WGCNA&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">intsall.packages(&apos;WGCNA&apos;)</span><br></pre></td></tr></table></figure>\n\n<p>2018-12-26<br>可以不阻塞当前运行的程序</p>\n<ul>\n<li>shiny 异步 编程 <a href=\"https://rstudio.github.io/promises/articles/intro.html\" target=\"_blank\" rel=\"noopener\">https://rstudio.github.io/promises/articles/intro.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"shiny-Server学习记录-网络计算\"><a href=\"#shiny-Server学习记录-网络计算\" class=\"headerlink\" title=\"shiny Server学习记录-网络计算\"></a>shiny Server学习记录-网络计算</h2><ul>\n<li><a href=\"http://218.94.144.229:8098/NetworkEntropy/\" target=\"_blank\" rel=\"noopener\">http://218.94.144.229:8098/NetworkEntropy/</a>  用户名 admin 密码 123qwe</li>\n<li>shiny api文档<a href=\"http://shiny.rstudio.com/reference/shiny/latest/\" target=\"_blank\" rel=\"noopener\">http://shiny.rstudio.com/reference/shiny/latest/</a></li>\n<li>shiny github <a href=\"https://github.com/rstudio/shiny\" target=\"_blank\" rel=\"noopener\">https://github.com/rstudio/shiny</a></li>\n<li>Shiny Server配置 <a href=\"https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440</a></li>\n<li>R shiny基础教程 <a href=\"https://blog.csdn.net/u014801157/article/category/5690387\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014801157/article/category/5690387</a></li>\n<li>windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包<a href=\"https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg</a></li>\n</ul>\n<ul>\n<li>内网是在浏览器下输入 http://:3838/APP_NAME/即可 </li>\n</ul>\n<p>一些重要的命令</p>\n<h3 id=\"先复制shiny包自带样例到目录下\"><a href=\"#先复制shiny包自带样例到目录下\" class=\"headerlink\" title=\"先复制shiny包自带样例到目录下\"></a>先复制shiny包自带样例到目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/</span><br></pre></td></tr></table></figure>\n\n<p>shiny server 服务设置状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#查看状态</span><br><span class=\"line\">sudo systemctl status shiny-server</span><br><span class=\"line\">#开启</span><br><span class=\"line\">sudo systemctl start shiny-server</span><br><span class=\"line\">#停止</span><br><span class=\"line\">sudo systemctl stop shiny-server</span><br><span class=\"line\">#重启</span><br><span class=\"line\">sudo systemctl restart shiny-server</span><br></pre></td></tr></table></figure>\n\n<p>1) 配置文件位置：/etc/shiny-server/shiny-server.conf<br>2) 报错时查看日志[服务器运行日志]<br>/var/log/shiny-server.log<br>3) shiny运行日志[类似R的运行日志]<br>/var/log/shiny-server</p>\n<p><strong>当无法安装某些包时可使用下面的代码进行安装</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source(&quot;http://bioconductor.org/biocLite.R&quot;)</span><br><span class=\"line\">biocLite(&quot;包名&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>R 3.3.3  R语言执行需要安装的程序包</p>\n<p>以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths(<span class=\"string\">\"C:/Program Files/R/R-3.3.3/library\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">install.packages(&apos;pillar&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">install.packages(&quot;ClustOfVar&quot;)</span><br><span class=\"line\">install.packages(&quot;psych&quot;)</span><br><span class=\"line\">install.packages(&quot;GPArotation&quot;)</span><br><span class=\"line\">install.packages(&quot;stringr&quot;)</span><br><span class=\"line\">install.packages(&quot;readxl&quot;)</span><br><span class=\"line\">install.packages(&quot;ca&quot;)</span><br><span class=\"line\">## 这个包可能也不正常</span><br><span class=\"line\">install.packages(&quot;arulesViz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 这些包无法正常安装</span><br><span class=\"line\">install.packages(&quot;arules&quot;) </span><br><span class=\"line\">install.packages(&quot;lavaan&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中医网络分析模块\"><a href=\"#中医网络分析模块\" class=\"headerlink\" title=\"中医网络分析模块\"></a>中医网络分析模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">biocLite(&apos;GO.db&apos;)</span><br><span class=\"line\">biocLite(&apos;org.Hs.eg.db&apos;)</span><br><span class=\"line\">biocLite(&apos;clusterProfiler&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">biocLite(&apos;WGCNA&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">intsall.packages(&apos;WGCNA&apos;)</span><br></pre></td></tr></table></figure>\n\n<p>2018-12-26<br>可以不阻塞当前运行的程序</p>\n<ul>\n<li>shiny 异步 编程 <a href=\"https://rstudio.github.io/promises/articles/intro.html\" target=\"_blank\" rel=\"noopener\">https://rstudio.github.io/promises/articles/intro.html</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"工作内容Rshiny框架使用","path":"2018/12/26/back-end/Rshiny-Framework-How-To-Use/","eyeCatchImage":null,"excerpt":"R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。","date":"2018-12-25T16:56:03.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["Rshiny"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Visual Studio如何增加版权信息","date":"2019-06-11T16:56:03.000Z","description":"关于VS增加版权问题，及相关配置项，参考等。","_content":"\n## [Visual Studio如何增加版权信息](https://www.cnblogs.com/allenxt/p/8472979.html)\n\n> 怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。\n\n+  我本地vs2017安装位置的如下：**E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class**\n\n\t\t/*\n\t\t * CLR版本:          $clrversion$\n\t\t * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n\t\t * 作    者：天上有木月\n\t\t * 创建时间：$time$\n\t\t * 邮箱：igeekfan@foxmail.com\n\t\t * 文件功能描述： \n\t\t * \n\t\t * 修改人： \n\t\t * 时间：\n\t\t * 修改说明：\n\t\t */\n\n参数 | 描述\n---|---\nclrversion|当前系统CLR版本号\nGUID [1-10]|生成全局唯一标识符,可以生成10个 (例如:guid1)\nitemname|打开添加新建项时输入的文件名称\nmachinename|当前机器的名称(如:pc1)\nregisteredorganization|注册的组织名\nrootnamespace|命名空间名\nsafeitemname|保存的文件名\ntime|当前系统时间,格式:DD/MM/YYYY 00:00:00.\nuserdomain|用户所在的域\nusername|当前系统用户名\nyear|当前系统时间 YYY","source":"_posts/back-end/Visual-Studio-Increase-Copyright-Information.md","raw":"---\ntitle:  Visual Studio如何增加版权信息\ndate: 2019-06-12 00:56:03\ndescription: 关于VS增加版权问题，及相关配置项，参考等。\ntags:\n- .NET \n- Visual Studio\ncategory:\n- Visual Studio\n---\n\n## [Visual Studio如何增加版权信息](https://www.cnblogs.com/allenxt/p/8472979.html)\n\n> 怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。\n\n+  我本地vs2017安装位置的如下：**E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class**\n\n\t\t/*\n\t\t * CLR版本:          $clrversion$\n\t\t * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n\t\t * 作    者：天上有木月\n\t\t * 创建时间：$time$\n\t\t * 邮箱：igeekfan@foxmail.com\n\t\t * 文件功能描述： \n\t\t * \n\t\t * 修改人： \n\t\t * 时间：\n\t\t * 修改说明：\n\t\t */\n\n参数 | 描述\n---|---\nclrversion|当前系统CLR版本号\nGUID [1-10]|生成全局唯一标识符,可以生成10个 (例如:guid1)\nitemname|打开添加新建项时输入的文件名称\nmachinename|当前机器的名称(如:pc1)\nregisteredorganization|注册的组织名\nrootnamespace|命名空间名\nsafeitemname|保存的文件名\ntime|当前系统时间,格式:DD/MM/YYYY 00:00:00.\nuserdomain|用户所在的域\nusername|当前系统用户名\nyear|当前系统时间 YYY","slug":"back-end/Visual-Studio-Increase-Copyright-Information","published":1,"updated":"2019-10-08T04:21:13.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ygu0014m0tw16kyq24l","content":"<h2 id=\"Visual-Studio如何增加版权信息\"><a href=\"#Visual-Studio如何增加版权信息\" class=\"headerlink\" title=\"Visual Studio如何增加版权信息\"></a><a href=\"https://www.cnblogs.com/allenxt/p/8472979.html\" target=\"_blank\" rel=\"noopener\">Visual Studio如何增加版权信息</a></h2><blockquote>\n<p>怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。</p>\n</blockquote>\n<ul>\n<li><p>我本地vs2017安装位置的如下：<strong>E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class</strong></p>\n<pre><code>/*\n * CLR版本:          $clrversion$\n * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n * 作    者：天上有木月\n * 创建时间：$time$\n * 邮箱：igeekfan@foxmail.com\n * 文件功能描述： \n * \n * 修改人： \n * 时间：\n * 修改说明：\n */</code></pre></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clrversion</td>\n<td>当前系统CLR版本号</td>\n</tr>\n<tr>\n<td>GUID [1-10]</td>\n<td>生成全局唯一标识符,可以生成10个 (例如:guid1)</td>\n</tr>\n<tr>\n<td>itemname</td>\n<td>打开添加新建项时输入的文件名称</td>\n</tr>\n<tr>\n<td>machinename</td>\n<td>当前机器的名称(如:pc1)</td>\n</tr>\n<tr>\n<td>registeredorganization</td>\n<td>注册的组织名</td>\n</tr>\n<tr>\n<td>rootnamespace</td>\n<td>命名空间名</td>\n</tr>\n<tr>\n<td>safeitemname</td>\n<td>保存的文件名</td>\n</tr>\n<tr>\n<td>time</td>\n<td>当前系统时间,格式:DD/MM/YYYY 00:00:00.</td>\n</tr>\n<tr>\n<td>userdomain</td>\n<td>用户所在的域</td>\n</tr>\n<tr>\n<td>username</td>\n<td>当前系统用户名</td>\n</tr>\n<tr>\n<td>year</td>\n<td>当前系统时间 YYY</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Visual-Studio如何增加版权信息\"><a href=\"#Visual-Studio如何增加版权信息\" class=\"headerlink\" title=\"Visual Studio如何增加版权信息\"></a><a href=\"https://www.cnblogs.com/allenxt/p/8472979.html\" target=\"_blank\" rel=\"noopener\">Visual Studio如何增加版权信息</a></h2><blockquote>\n<p>怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。</p>\n</blockquote>\n<ul>\n<li><p>我本地vs2017安装位置的如下：<strong>E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class</strong></p>\n<pre><code>/*\n * CLR版本:          $clrversion$\n * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n * 作    者：天上有木月\n * 创建时间：$time$\n * 邮箱：igeekfan@foxmail.com\n * 文件功能描述： \n * \n * 修改人： \n * 时间：\n * 修改说明：\n */</code></pre></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clrversion</td>\n<td>当前系统CLR版本号</td>\n</tr>\n<tr>\n<td>GUID [1-10]</td>\n<td>生成全局唯一标识符,可以生成10个 (例如:guid1)</td>\n</tr>\n<tr>\n<td>itemname</td>\n<td>打开添加新建项时输入的文件名称</td>\n</tr>\n<tr>\n<td>machinename</td>\n<td>当前机器的名称(如:pc1)</td>\n</tr>\n<tr>\n<td>registeredorganization</td>\n<td>注册的组织名</td>\n</tr>\n<tr>\n<td>rootnamespace</td>\n<td>命名空间名</td>\n</tr>\n<tr>\n<td>safeitemname</td>\n<td>保存的文件名</td>\n</tr>\n<tr>\n<td>time</td>\n<td>当前系统时间,格式:DD/MM/YYYY 00:00:00.</td>\n</tr>\n<tr>\n<td>userdomain</td>\n<td>用户所在的域</td>\n</tr>\n<tr>\n<td>username</td>\n<td>当前系统用户名</td>\n</tr>\n<tr>\n<td>year</td>\n<td>当前系统时间 YYY</td>\n</tr>\n</tbody></table>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"Visual Studio如何增加版权信息","path":"2019/06/12/back-end/Visual-Studio-Increase-Copyright-Information/","eyeCatchImage":null,"excerpt":"关于VS增加版权问题，及相关配置项，参考等。","date":"2019-06-11T16:56:03.000Z","pv":0,"totalPV":0,"categories":"Visual Studio","tags":[".NET","Visual Studio"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ssl-nginx-https配置二级域名","date":"2019-08-01T09:51:03.000Z","_content":"\n## ubuntu下nginx配置二级域名https\n通过反向代理转发至后台一个简单 [asp.net core  七牛云文件上传](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu/Qiniu.Web)项目。\n\n\n## 前提\n- 有自己的域名\n- 并配置好域名解析\n![](https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg)\n- 可去腾讯申请[域名型免费版的ssl（DV）](https://buy.cloud.tencent.com/ssl)\n\n<!-- more -->\n\n## 配置项\n申请完ssl，把nginx里的二个文件复制到nginx的/etc/nginx目录中。\n\n![](https://ae01.alicdn.com/kf/Hb2fb43a0c6ef469c82dd1fd99c051fa1w.jpg)\n\n\n![](https://ae01.alicdn.com/kf/H0e2ab0c30412464c94d77b68afe244edT.jpg)\n\n在/etc/nginx/conf.d文件夹新建任意以.conf后缀的文件，\n```\nserver {  \n    listen 443;\n    server_name docs.igeekfan.cn;\n    ssl on; #启用 SSL 功能\n    ssl_certificate 1_docs.igeekfan.cn_bundle.crt; #证书文件名称\n    ssl_certificate_key 2_docs.igeekfan.cn.key; #私钥文件名称\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照这个协议配置\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:5000;\n    }\n}\n\nserver {\n\tlisten 80;\n\tserver_name docs.igeekfan.cn; #填写绑定证书的域名\n\trewrite ^(.*)$ https://docs.igeekfan.cn/$1 permanent; #把http的域名请求转成https\n}\n\n```\n\n## 测试\n\n原本 [122.152.192.161:5000/swagger/index.html](122.152.192.161:5000/swagger/index.html) 即可访问项目 ，\n现在可通过域名  [https://docs.igeekfan.cn/swagger/index.html](https://docs.igeekfan.cn/swagger/index.html)\n\n## 参考\n- [Nginx 服务器证书安装](https://cloud.tencent.com/document/product/400/35244)","source":"_posts/back-end/ssl-nginx-https-in-2-domain.md","raw":"\n---\ntitle:  ssl-nginx-https配置二级域名\ndate: 2019-8-1 17:51:03\ntags:\n- ubuntu\n- nginx\n- https\ncategory:\n- 大后端\n---\n\n## ubuntu下nginx配置二级域名https\n通过反向代理转发至后台一个简单 [asp.net core  七牛云文件上传](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu/Qiniu.Web)项目。\n\n\n## 前提\n- 有自己的域名\n- 并配置好域名解析\n![](https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg)\n- 可去腾讯申请[域名型免费版的ssl（DV）](https://buy.cloud.tencent.com/ssl)\n\n<!-- more -->\n\n## 配置项\n申请完ssl，把nginx里的二个文件复制到nginx的/etc/nginx目录中。\n\n![](https://ae01.alicdn.com/kf/Hb2fb43a0c6ef469c82dd1fd99c051fa1w.jpg)\n\n\n![](https://ae01.alicdn.com/kf/H0e2ab0c30412464c94d77b68afe244edT.jpg)\n\n在/etc/nginx/conf.d文件夹新建任意以.conf后缀的文件，\n```\nserver {  \n    listen 443;\n    server_name docs.igeekfan.cn;\n    ssl on; #启用 SSL 功能\n    ssl_certificate 1_docs.igeekfan.cn_bundle.crt; #证书文件名称\n    ssl_certificate_key 2_docs.igeekfan.cn.key; #私钥文件名称\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照这个协议配置\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:5000;\n    }\n}\n\nserver {\n\tlisten 80;\n\tserver_name docs.igeekfan.cn; #填写绑定证书的域名\n\trewrite ^(.*)$ https://docs.igeekfan.cn/$1 permanent; #把http的域名请求转成https\n}\n\n```\n\n## 测试\n\n原本 [122.152.192.161:5000/swagger/index.html](122.152.192.161:5000/swagger/index.html) 即可访问项目 ，\n现在可通过域名  [https://docs.igeekfan.cn/swagger/index.html](https://docs.igeekfan.cn/swagger/index.html)\n\n## 参考\n- [Nginx 服务器证书安装](https://cloud.tencent.com/document/product/400/35244)","slug":"back-end/ssl-nginx-https-in-2-domain","published":1,"updated":"2019-10-08T04:21:13.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yh20017m0twfpdscazy","content":"<h2 id=\"ubuntu下nginx配置二级域名https\"><a href=\"#ubuntu下nginx配置二级域名https\" class=\"headerlink\" title=\"ubuntu下nginx配置二级域名https\"></a>ubuntu下nginx配置二级域名https</h2><p>通过反向代理转发至后台一个简单 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu/Qiniu.Web\" target=\"_blank\" rel=\"noopener\">asp.net core  七牛云文件上传</a>项目。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>有自己的域名</li>\n<li>并配置好域名解析<br><img src=\"https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg\" alt></li>\n<li>可去腾讯申请<a href=\"https://buy.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">域名型免费版的ssl（DV）</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><p>申请完ssl，把nginx里的二个文件复制到nginx的/etc/nginx目录中。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/Hb2fb43a0c6ef469c82dd1fd99c051fa1w.jpg\" alt></p>\n<p><img src=\"https://ae01.alicdn.com/kf/H0e2ab0c30412464c94d77b68afe244edT.jpg\" alt></p>\n<p>在/etc/nginx/conf.d文件夹新建任意以.conf后缀的文件，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\">    ssl on; #启用 SSL 功能</span><br><span class=\"line\">    ssl_certificate 1_docs.igeekfan.cn_bundle.crt; #证书文件名称</span><br><span class=\"line\">    ssl_certificate_key 2_docs.igeekfan.cn.key; #私钥文件名称</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照这个协议配置</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name docs.igeekfan.cn; #填写绑定证书的域名</span><br><span class=\"line\">\trewrite ^(.*)$ https://docs.igeekfan.cn/$1 permanent; #把http的域名请求转成https</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>原本 <a href=\"122.152.192.161:5000/swagger/index.html\" target=\"_blank\" rel=\"noopener\">122.152.192.161:5000/swagger/index.html</a> 即可访问项目 ，<br>现在可通过域名  <a href=\"https://docs.igeekfan.cn/swagger/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.igeekfan.cn/swagger/index.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://cloud.tencent.com/document/product/400/35244\" target=\"_blank\" rel=\"noopener\">Nginx 服务器证书安装</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"ubuntu下nginx配置二级域名https\"><a href=\"#ubuntu下nginx配置二级域名https\" class=\"headerlink\" title=\"ubuntu下nginx配置二级域名https\"></a>ubuntu下nginx配置二级域名https</h2><p>通过反向代理转发至后台一个简单 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu/Qiniu.Web\" target=\"_blank\" rel=\"noopener\">asp.net core  七牛云文件上传</a>项目。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>有自己的域名</li>\n<li>并配置好域名解析<br><img src=\"https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg\" alt></li>\n<li>可去腾讯申请<a href=\"https://buy.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">域名型免费版的ssl（DV）</a></li>\n</ul>","more":"<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><p>申请完ssl，把nginx里的二个文件复制到nginx的/etc/nginx目录中。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/Hb2fb43a0c6ef469c82dd1fd99c051fa1w.jpg\" alt></p>\n<p><img src=\"https://ae01.alicdn.com/kf/H0e2ab0c30412464c94d77b68afe244edT.jpg\" alt></p>\n<p>在/etc/nginx/conf.d文件夹新建任意以.conf后缀的文件，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\">    ssl on; #启用 SSL 功能</span><br><span class=\"line\">    ssl_certificate 1_docs.igeekfan.cn_bundle.crt; #证书文件名称</span><br><span class=\"line\">    ssl_certificate_key 2_docs.igeekfan.cn.key; #私钥文件名称</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照这个协议配置</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name docs.igeekfan.cn; #填写绑定证书的域名</span><br><span class=\"line\">\trewrite ^(.*)$ https://docs.igeekfan.cn/$1 permanent; #把http的域名请求转成https</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>原本 <a href=\"122.152.192.161:5000/swagger/index.html\" target=\"_blank\" rel=\"noopener\">122.152.192.161:5000/swagger/index.html</a> 即可访问项目 ，<br>现在可通过域名  <a href=\"https://docs.igeekfan.cn/swagger/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.igeekfan.cn/swagger/index.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://cloud.tencent.com/document/product/400/35244\" target=\"_blank\" rel=\"noopener\">Nginx 服务器证书安装</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ssl-nginx-https配置二级域名","path":"2019/08/01/back-end/ssl-nginx-https-in-2-domain/","eyeCatchImage":"https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg","excerpt":"<h2 id=\"ubuntu下nginx配置二级域名https\"><a href=\"#ubuntu下nginx配置二级域名https\" class=\"headerlink\" title=\"ubuntu下nginx配置二级域名https\"></a>ubuntu下nginx配置二级域名https</h2><p>通过反向代理转发至后台一个简单 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu/Qiniu.Web\" target=\"_blank\" rel=\"noopener\">asp.net core  七牛云文件上传</a>项目。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>有自己的域名</li>\n<li>并配置好域名解析<br><img src=\"https://ae01.alicdn.com/kf/H8e464efd6fde43c7b1c1ced1e3f9eeb84.jpg\" alt></li>\n<li>可去腾讯申请<a href=\"https://buy.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">域名型免费版的ssl（DV）</a></li>\n</ul>","date":"2019-08-01T09:51:03.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["nginx","ubuntu","https"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core 部署至Ubuntu下的Docker","date":"2019-06-08T16:54:15.000Z","_content":"## 使用Docker 方式部署\n\n* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至Docker的记录\n> 相关技术 .NET Core2.2+Docker\n\n<!-- more -->\n\n\n可参考此文档 ：[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n~~~\n#1.本地安装Docker for Windows后，可使用Docker方式运行\nFROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\nWORKDIR /app\nEXPOSE 80\n\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build\nWORKDIR /src\nCOPY [\"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\", \"SJNScaffolding.RazorPage/\"]\nCOPY [\"SJNScaffolding/SJNScaffolding.csproj\", \"SJNScaffolding/\"]\nRUN dotnet restore \"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\"\nCOPY . .\nWORKDIR \"/src/SJNScaffolding.RazorPage\"\nRUN dotnet build \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n\n#2. 发布时，使用此Dockerfile配置\n#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\n#COPY . /app\n#WORKDIR /app\n#EXPOSE 80\n#ENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n~~~\n\n把第\"2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。\n[![Dockerfileea151.png](https://miao.su/images/2019/06/09/Dockerfileea151.png)](https://miao.su/image/ftdf5)\n\n\n右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n[![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)](https://miao.su/image/ftwvM)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n\n[![PXKF63RUOC5L99LPWe1367.png](https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png)](https://miao.su/image/ftxWU)\n\n具体上传步骤就不说了。\n\n[![MYGE3MZ5BNFJQ6R476cf92.png](https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png)](https://miao.su/image/ftuw8)\n\n\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n    \n**-d** 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndocker build -t igeekfan/sjnscaffolding .     #生成images\ndocker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口\n~~~\n\n此时打开 浏览器， ip+端口5000即可访问服务。","source":"_posts/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu.md","raw":"---\ntitle: ASP.NET Core 部署至Ubuntu下的Docker\ndate: 2019-06-09 00:54:15\ntags:\n- ASP.NET Core\n- Ubuntu\n- Docker\ncategory:\n- .NET Core\n---\n## 使用Docker 方式部署\n\n* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至Docker的记录\n> 相关技术 .NET Core2.2+Docker\n\n<!-- more -->\n\n\n可参考此文档 ：[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n~~~\n#1.本地安装Docker for Windows后，可使用Docker方式运行\nFROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\nWORKDIR /app\nEXPOSE 80\n\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build\nWORKDIR /src\nCOPY [\"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\", \"SJNScaffolding.RazorPage/\"]\nCOPY [\"SJNScaffolding/SJNScaffolding.csproj\", \"SJNScaffolding/\"]\nRUN dotnet restore \"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\"\nCOPY . .\nWORKDIR \"/src/SJNScaffolding.RazorPage\"\nRUN dotnet build \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n\n#2. 发布时，使用此Dockerfile配置\n#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\n#COPY . /app\n#WORKDIR /app\n#EXPOSE 80\n#ENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n~~~\n\n把第\"2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。\n[![Dockerfileea151.png](https://miao.su/images/2019/06/09/Dockerfileea151.png)](https://miao.su/image/ftdf5)\n\n\n右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n[![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)](https://miao.su/image/ftwvM)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n\n[![PXKF63RUOC5L99LPWe1367.png](https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png)](https://miao.su/image/ftxWU)\n\n具体上传步骤就不说了。\n\n[![MYGE3MZ5BNFJQ6R476cf92.png](https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png)](https://miao.su/image/ftuw8)\n\n\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n    \n**-d** 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndocker build -t igeekfan/sjnscaffolding .     #生成images\ndocker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口\n~~~\n\n此时打开 浏览器， ip+端口5000即可访问服务。","slug":"dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu","published":1,"updated":"2019-10-08T04:21:13.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yh80019m0twskjkfq6t","content":"<h2 id=\"使用Docker-方式部署\"><a href=\"#使用Docker-方式部署\" class=\"headerlink\" title=\"使用Docker 方式部署\"></a>使用Docker 方式部署</h2><ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker</p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<p>可参考此文档 ：<a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#1.本地安装Docker for Windows后，可使用Docker方式运行</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build</span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY [&quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;, &quot;SJNScaffolding.RazorPage/&quot;]</span><br><span class=\"line\">COPY [&quot;SJNScaffolding/SJNScaffolding.csproj&quot;, &quot;SJNScaffolding/&quot;]</span><br><span class=\"line\">RUN dotnet restore &quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;/src/SJNScaffolding.RazorPage&quot;</span><br><span class=\"line\">RUN dotnet build &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=publish /app .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#2. 发布时，使用此Dockerfile配置</span><br><span class=\"line\">#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">#COPY . /app</span><br><span class=\"line\">#WORKDIR /app</span><br><span class=\"line\">#EXPOSE 80</span><br><span class=\"line\">#ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>把第”2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。<br><a href=\"https://miao.su/image/ftdf5\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Dockerfileea151.png\" alt=\"Dockerfileea151.png\"></a></p>\n<p>右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><a href=\"https://miao.su/image/ftwvM\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></a></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。</p>\n<p><a href=\"https://miao.su/image/ftxWU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png\" alt=\"PXKF63RUOC5L99LPWe1367.png\"></a></p>\n<p>具体上传步骤就不说了。</p>\n<p><a href=\"https://miao.su/image/ftuw8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png\" alt=\"MYGE3MZ5BNFJQ6R476cf92.png\"></a></p>\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p><strong>-d</strong> 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">docker build -t igeekfan/sjnscaffolding .     #生成images</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用Docker-方式部署\"><a href=\"#使用Docker-方式部署\" class=\"headerlink\" title=\"使用Docker 方式部署\"></a>使用Docker 方式部署</h2><ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker</p>\n</blockquote>","more":"<p>可参考此文档 ：<a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#1.本地安装Docker for Windows后，可使用Docker方式运行</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build</span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY [&quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;, &quot;SJNScaffolding.RazorPage/&quot;]</span><br><span class=\"line\">COPY [&quot;SJNScaffolding/SJNScaffolding.csproj&quot;, &quot;SJNScaffolding/&quot;]</span><br><span class=\"line\">RUN dotnet restore &quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;/src/SJNScaffolding.RazorPage&quot;</span><br><span class=\"line\">RUN dotnet build &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=publish /app .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#2. 发布时，使用此Dockerfile配置</span><br><span class=\"line\">#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">#COPY . /app</span><br><span class=\"line\">#WORKDIR /app</span><br><span class=\"line\">#EXPOSE 80</span><br><span class=\"line\">#ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>把第”2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。<br><a href=\"https://miao.su/image/ftdf5\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Dockerfileea151.png\" alt=\"Dockerfileea151.png\"></a></p>\n<p>右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><a href=\"https://miao.su/image/ftwvM\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></a></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。</p>\n<p><a href=\"https://miao.su/image/ftxWU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png\" alt=\"PXKF63RUOC5L99LPWe1367.png\"></a></p>\n<p>具体上传步骤就不说了。</p>\n<p><a href=\"https://miao.su/image/ftuw8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png\" alt=\"MYGE3MZ5BNFJQ6R476cf92.png\"></a></p>\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p><strong>-d</strong> 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">docker build -t igeekfan/sjnscaffolding .     #生成images</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/09/Dockerfileea151.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ASP.NET Core 部署至Ubuntu下的Docker","path":"2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/","eyeCatchImage":"https://miao.su/images/2019/06/09/Dockerfileea151.png","excerpt":"<h2 id=\"使用Docker-方式部署\"><a href=\"#使用Docker-方式部署\" class=\"headerlink\" title=\"使用Docker 方式部署\"></a>使用Docker 方式部署</h2><ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker</p>\n</blockquote>","date":"2019-06-08T16:54:15.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["Ubuntu","Docker","ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core 部署至Ubuntu","date":"2019-06-08T16:54:15.000Z","_content":"* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至ubuntu、Docker的记录\n> 相关技术 .NET Core2.2+Docker+Nginx+Supervisor \n\n<!-- more -->\n\n## 部署至ubuntu下\n\n可参考 [https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html](https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html)\n\n需要安装 .NET Core 2.2，直接看官网\n\n[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current](https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current)\n### 发布\n使用VS2017或VS2019,右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n使用以下命令运行\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000\n~~~\n参考下图\n\n<fancybox>![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)</fancybox>\n\nip:端口是无法访问到的，\n命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。\n~~~\nwget http://localhost:5000\n~~~\n\n### 需要使用nginx反向代理\n~~~\nsudo apt-get install nginx\n~~~\n\n安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下\n~~~\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n~~~\n\n然后重新启动 Nginx\n~~~\nsudo service nginx restart \n#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项\n~~~\n \n### Supervisor 守护进程\n此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用**Supervisor**，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目\n\n\n[ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）\n前言](https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html)\n\n[结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]](https://www.jianshu.com/p/f6d2203807ab)\n\n[Ubuntu 18.04 安装部署Net Core、Nginx全过程](https://www.cnblogs.com/xyfy/p/9881855.html)\n\n~~~\nsudo apt-get install supervisor  # 安装 守护进程 supervisor\ncd /etc/supervisor/conf.d/     # 进入配置目录 \nvim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。\n~~~\n\n在文件SJNScaffolding.conf中配置如下内容，\n~~~\n[program:SJNScaffolding]\ncommand=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll\ndirectory=/home/admin/SJNScaffolding.RazorPage\nenvironment=ASPNETCORE__ENVIRONMENT=Production\nuser=www-data\nstopsignal=INT\nautostart=true\nautorestart=true \nstartsecs=1\nstderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log \nstdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log \n\n~~~\n有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。\n~~~\n[program:HelloWebApp]\ncommand=dotnet HelloWebApp.dll  #要执行的命令\ndirectory=/home/yxd/Workspace/publish #命令执行的目录\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量\nuser=www-data  #进程执行的用户身份\nstopsignal=INT\nautostart=true #是否自动启动\nautorestart=true #是否自动重启\nstartsecs=1 #自动重启间隔\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志\n~~~\n\n重启守护进程\n~~~\nsudo /etc/init.d/supervisor restart #或 sudo service supervisor restart\n#或\n# 暂停服务supervisor，启动服务supervisor\nsudo service supervisor stop\nsudo service supervisor start\n#查看日志\ntail -f  /var/log/SJNScaffolding.RazorPage.out.log \n~~~\n\n设置ubuntu下的supervisor开机 自启动\n\n~~~\nvi /etc/rc.local\n~~~\n在exit 0 之前加入以下命令\n~~~\n/usr/local/bin/supervisord\n~~~\n\n此时打开 浏览器， ip+端口80即可访问服务。","source":"_posts/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu.md","raw":"---\ntitle: ASP.NET Core 部署至Ubuntu\ndate: 2019-06-09 00:54:15\ntags:\n- ASP.NET Core\n- Ubuntu\ncategory:\n- .NET Core\n---\n* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至ubuntu、Docker的记录\n> 相关技术 .NET Core2.2+Docker+Nginx+Supervisor \n\n<!-- more -->\n\n## 部署至ubuntu下\n\n可参考 [https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html](https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html)\n\n需要安装 .NET Core 2.2，直接看官网\n\n[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current](https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current)\n### 发布\n使用VS2017或VS2019,右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n使用以下命令运行\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000\n~~~\n参考下图\n\n<fancybox>![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)</fancybox>\n\nip:端口是无法访问到的，\n命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。\n~~~\nwget http://localhost:5000\n~~~\n\n### 需要使用nginx反向代理\n~~~\nsudo apt-get install nginx\n~~~\n\n安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下\n~~~\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n~~~\n\n然后重新启动 Nginx\n~~~\nsudo service nginx restart \n#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项\n~~~\n \n### Supervisor 守护进程\n此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用**Supervisor**，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目\n\n\n[ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）\n前言](https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html)\n\n[结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]](https://www.jianshu.com/p/f6d2203807ab)\n\n[Ubuntu 18.04 安装部署Net Core、Nginx全过程](https://www.cnblogs.com/xyfy/p/9881855.html)\n\n~~~\nsudo apt-get install supervisor  # 安装 守护进程 supervisor\ncd /etc/supervisor/conf.d/     # 进入配置目录 \nvim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。\n~~~\n\n在文件SJNScaffolding.conf中配置如下内容，\n~~~\n[program:SJNScaffolding]\ncommand=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll\ndirectory=/home/admin/SJNScaffolding.RazorPage\nenvironment=ASPNETCORE__ENVIRONMENT=Production\nuser=www-data\nstopsignal=INT\nautostart=true\nautorestart=true \nstartsecs=1\nstderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log \nstdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log \n\n~~~\n有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。\n~~~\n[program:HelloWebApp]\ncommand=dotnet HelloWebApp.dll  #要执行的命令\ndirectory=/home/yxd/Workspace/publish #命令执行的目录\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量\nuser=www-data  #进程执行的用户身份\nstopsignal=INT\nautostart=true #是否自动启动\nautorestart=true #是否自动重启\nstartsecs=1 #自动重启间隔\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志\n~~~\n\n重启守护进程\n~~~\nsudo /etc/init.d/supervisor restart #或 sudo service supervisor restart\n#或\n# 暂停服务supervisor，启动服务supervisor\nsudo service supervisor stop\nsudo service supervisor start\n#查看日志\ntail -f  /var/log/SJNScaffolding.RazorPage.out.log \n~~~\n\n设置ubuntu下的supervisor开机 自启动\n\n~~~\nvi /etc/rc.local\n~~~\n在exit 0 之前加入以下命令\n~~~\n/usr/local/bin/supervisord\n~~~\n\n此时打开 浏览器， ip+端口80即可访问服务。","slug":"dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu","published":1,"updated":"2019-10-08T04:21:13.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yhd001cm0twffaa5q6g","content":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"部署至ubuntu下\"><a href=\"#部署至ubuntu下\" class=\"headerlink\" title=\"部署至ubuntu下\"></a>部署至ubuntu下</h2><p>可参考 <a href=\"https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html</a></p>\n<p>需要安装 .NET Core 2.2，直接看官网</p>\n<p><a href=\"https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>使用VS2017或VS2019,右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。<br>使用以下命令运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">dotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<p>参考下图</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png\" alt=\"https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png\"></fancybox></p>\n<p>ip:端口是无法访问到的，<br>命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"需要使用nginx反向代理\"><a href=\"#需要使用nginx反向代理\" class=\"headerlink\" title=\"需要使用nginx反向代理\"></a>需要使用nginx反向代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection keep-alive;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart </span><br><span class=\"line\">#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Supervisor-守护进程\"><a href=\"#Supervisor-守护进程\" class=\"headerlink\" title=\"Supervisor 守护进程\"></a>Supervisor 守护进程</h3><p>此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用<strong>Supervisor</strong>，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目</p>\n<p><a href=\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）<br>前言</a></p>\n<p><a href=\"https://www.jianshu.com/p/f6d2203807ab\" target=\"_blank\" rel=\"noopener\">结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]</a></p>\n<p><a href=\"https://www.cnblogs.com/xyfy/p/9881855.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 安装部署Net Core、Nginx全过程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor  # 安装 守护进程 supervisor</span><br><span class=\"line\">cd /etc/supervisor/conf.d/     # 进入配置目录 </span><br><span class=\"line\">vim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。</span><br></pre></td></tr></table></figure>\n\n<p>在文件SJNScaffolding.conf中配置如下内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:SJNScaffolding]</span><br><span class=\"line\">command=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll</span><br><span class=\"line\">directory=/home/admin/SJNScaffolding.RazorPage</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production</span><br><span class=\"line\">user=www-data</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true </span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">stderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log </span><br><span class=\"line\">stdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:HelloWebApp]</span><br><span class=\"line\">command=dotnet HelloWebApp.dll  #要执行的命令</span><br><span class=\"line\">directory=/home/yxd/Workspace/publish #命令执行的目录</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class=\"line\">user=www-data  #进程执行的用户身份</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true #是否自动启动</span><br><span class=\"line\">autorestart=true #是否自动重启</span><br><span class=\"line\">startsecs=1 #自动重启间隔</span><br><span class=\"line\">stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志</span><br><span class=\"line\">stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志</span><br></pre></td></tr></table></figure>\n\n<p>重启守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/supervisor restart #或 sudo service supervisor restart</span><br><span class=\"line\">#或</span><br><span class=\"line\"># 暂停服务supervisor，启动服务supervisor</span><br><span class=\"line\">sudo service supervisor stop</span><br><span class=\"line\">sudo service supervisor start</span><br><span class=\"line\">#查看日志</span><br><span class=\"line\">tail -f  /var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>设置ubuntu下的supervisor开机 自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>在exit 0 之前加入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/supervisord</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口80即可访问服务。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>","more":"<h2 id=\"部署至ubuntu下\"><a href=\"#部署至ubuntu下\" class=\"headerlink\" title=\"部署至ubuntu下\"></a>部署至ubuntu下</h2><p>可参考 <a href=\"https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html</a></p>\n<p>需要安装 .NET Core 2.2，直接看官网</p>\n<p><a href=\"https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>使用VS2017或VS2019,右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。<br>使用以下命令运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">dotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<p>参考下图</p>\n<p><fancybox><img src=\"https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png\" alt=\"https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png\"></fancybox></p>\n<p>ip:端口是无法访问到的，<br>命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"需要使用nginx反向代理\"><a href=\"#需要使用nginx反向代理\" class=\"headerlink\" title=\"需要使用nginx反向代理\"></a>需要使用nginx反向代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection keep-alive;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart </span><br><span class=\"line\">#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Supervisor-守护进程\"><a href=\"#Supervisor-守护进程\" class=\"headerlink\" title=\"Supervisor 守护进程\"></a>Supervisor 守护进程</h3><p>此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用<strong>Supervisor</strong>，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目</p>\n<p><a href=\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）<br>前言</a></p>\n<p><a href=\"https://www.jianshu.com/p/f6d2203807ab\" target=\"_blank\" rel=\"noopener\">结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]</a></p>\n<p><a href=\"https://www.cnblogs.com/xyfy/p/9881855.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 安装部署Net Core、Nginx全过程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor  # 安装 守护进程 supervisor</span><br><span class=\"line\">cd /etc/supervisor/conf.d/     # 进入配置目录 </span><br><span class=\"line\">vim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。</span><br></pre></td></tr></table></figure>\n\n<p>在文件SJNScaffolding.conf中配置如下内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:SJNScaffolding]</span><br><span class=\"line\">command=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll</span><br><span class=\"line\">directory=/home/admin/SJNScaffolding.RazorPage</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production</span><br><span class=\"line\">user=www-data</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true </span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">stderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log </span><br><span class=\"line\">stdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:HelloWebApp]</span><br><span class=\"line\">command=dotnet HelloWebApp.dll  #要执行的命令</span><br><span class=\"line\">directory=/home/yxd/Workspace/publish #命令执行的目录</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class=\"line\">user=www-data  #进程执行的用户身份</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true #是否自动启动</span><br><span class=\"line\">autorestart=true #是否自动重启</span><br><span class=\"line\">startsecs=1 #自动重启间隔</span><br><span class=\"line\">stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志</span><br><span class=\"line\">stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志</span><br></pre></td></tr></table></figure>\n\n<p>重启守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/supervisor restart #或 sudo service supervisor restart</span><br><span class=\"line\">#或</span><br><span class=\"line\"># 暂停服务supervisor，启动服务supervisor</span><br><span class=\"line\">sudo service supervisor stop</span><br><span class=\"line\">sudo service supervisor start</span><br><span class=\"line\">#查看日志</span><br><span class=\"line\">tail -f  /var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>设置ubuntu下的supervisor开机 自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>在exit 0 之前加入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/supervisord</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口80即可访问服务。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ASP.NET Core 部署至Ubuntu","path":"2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/","eyeCatchImage":"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png","excerpt":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>","date":"2019-06-08T16:54:15.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["Ubuntu","ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET-Core-Get-Json-Array-using-IConfiguration","date":"2019-07-07T13:09:07.000Z","_content":"### ASP .NET Core Get Json Array using IConfiguration\n\nIn appsettings.json\n\n```\n{\n      \"MyArray\": [\n          \"str1\",\n          \"str2\",\n          \"str3\"\n      ]\n}\n```\n<!-- more -->\nIn Startup.cs\n\n\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n     services.AddSingleton<IConfiguration>(Configuration);\n}\n```\n\nIn HomeController\n\n\n```\npublic class HomeController : Controller\n{\n    private readonly IConfiguration _config;\n    public HomeController(IConfiguration config)\n    {\n        this._config = config;\n    }\n\n    public IActionResult Index()\n    {\n        return Json(_config.GetSection(\"MyArray\").AsEnumerable());\n    }\n}\n```\n\n\nIf you want to pick value of first item then you should do like this\n\n```\nvar item0 = _config.GetSection(\"MyArray:0\");\n```\n\nIf you want to pick value of entire array then you should do like this-\n```\nIConfigurationSection myArraySection = _config.GetSection(\"MyArray\");\nvar itemArray = myArraySection.AsEnumerable();\n```\n\nor  like \n```\nvar myArray = _config.GetSection(\"MyArray\").Get<string[]>();\n```\n\n\n### 相关链接\n* https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration\n* Options pattern in ASP .NET Core https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1","source":"_posts/dotnetcore/ASP.NET-Core-Get-Json-Array-using-IConfiguration.md","raw":"---\ntitle: ASP.NET-Core-Get-Json-Array-using-IConfiguration\ndate: 2019-07-07 21:09:07\ntags:\n- ASP.NET Core\ncategory:\n- .NET Core\n---\n### ASP .NET Core Get Json Array using IConfiguration\n\nIn appsettings.json\n\n```\n{\n      \"MyArray\": [\n          \"str1\",\n          \"str2\",\n          \"str3\"\n      ]\n}\n```\n<!-- more -->\nIn Startup.cs\n\n\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n     services.AddSingleton<IConfiguration>(Configuration);\n}\n```\n\nIn HomeController\n\n\n```\npublic class HomeController : Controller\n{\n    private readonly IConfiguration _config;\n    public HomeController(IConfiguration config)\n    {\n        this._config = config;\n    }\n\n    public IActionResult Index()\n    {\n        return Json(_config.GetSection(\"MyArray\").AsEnumerable());\n    }\n}\n```\n\n\nIf you want to pick value of first item then you should do like this\n\n```\nvar item0 = _config.GetSection(\"MyArray:0\");\n```\n\nIf you want to pick value of entire array then you should do like this-\n```\nIConfigurationSection myArraySection = _config.GetSection(\"MyArray\");\nvar itemArray = myArraySection.AsEnumerable();\n```\n\nor  like \n```\nvar myArray = _config.GetSection(\"MyArray\").Get<string[]>();\n```\n\n\n### 相关链接\n* https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration\n* Options pattern in ASP .NET Core https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1","slug":"dotnetcore/ASP.NET-Core-Get-Json-Array-using-IConfiguration","published":1,"updated":"2019-10-08T04:21:13.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ykn003am0tw3lk75wru","content":"<h3 id=\"ASP-NET-Core-Get-Json-Array-using-IConfiguration\"><a href=\"#ASP-NET-Core-Get-Json-Array-using-IConfiguration\" class=\"headerlink\" title=\"ASP .NET Core Get Json Array using IConfiguration\"></a>ASP .NET Core Get Json Array using IConfiguration</h3><p>In appsettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;MyArray&quot;: [</span><br><span class=\"line\">          &quot;str1&quot;,</span><br><span class=\"line\">          &quot;str2&quot;,</span><br><span class=\"line\">          &quot;str3&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<p>In Startup.cs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     services.AddSingleton&lt;IConfiguration&gt;(Configuration);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In HomeController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class HomeController : Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IConfiguration _config;</span><br><span class=\"line\">    public HomeController(IConfiguration config)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Json(_config.GetSection(&quot;MyArray&quot;).AsEnumerable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to pick value of first item then you should do like this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var item0 = _config.GetSection(&quot;MyArray:0&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>If you want to pick value of entire array then you should do like this-</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IConfigurationSection myArraySection = _config.GetSection(&quot;MyArray&quot;);</span><br><span class=\"line\">var itemArray = myArraySection.AsEnumerable();</span><br></pre></td></tr></table></figure>\n\n<p>or  like </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var myArray = _config.GetSection(&quot;MyArray&quot;).Get&lt;string[]&gt;();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration</a></li>\n<li>Options pattern in ASP .NET Core <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"ASP-NET-Core-Get-Json-Array-using-IConfiguration\"><a href=\"#ASP-NET-Core-Get-Json-Array-using-IConfiguration\" class=\"headerlink\" title=\"ASP .NET Core Get Json Array using IConfiguration\"></a>ASP .NET Core Get Json Array using IConfiguration</h3><p>In appsettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;MyArray&quot;: [</span><br><span class=\"line\">          &quot;str1&quot;,</span><br><span class=\"line\">          &quot;str2&quot;,</span><br><span class=\"line\">          &quot;str3&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>In Startup.cs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     services.AddSingleton&lt;IConfiguration&gt;(Configuration);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In HomeController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class HomeController : Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IConfiguration _config;</span><br><span class=\"line\">    public HomeController(IConfiguration config)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Json(_config.GetSection(&quot;MyArray&quot;).AsEnumerable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to pick value of first item then you should do like this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var item0 = _config.GetSection(&quot;MyArray:0&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>If you want to pick value of entire array then you should do like this-</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IConfigurationSection myArraySection = _config.GetSection(&quot;MyArray&quot;);</span><br><span class=\"line\">var itemArray = myArraySection.AsEnumerable();</span><br></pre></td></tr></table></figure>\n\n<p>or  like </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var myArray = _config.GetSection(&quot;MyArray&quot;).Get&lt;string[]&gt;();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/41329108/asp-net-core-get-json-array-using-iconfiguration</a></li>\n<li>Options pattern in ASP .NET Core <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ASP.NET-Core-Get-Json-Array-using-IConfiguration","path":"2019/07/07/dotnetcore/ASP.NET-Core-Get-Json-Array-using-IConfiguration/","eyeCatchImage":null,"excerpt":"<h3 id=\"ASP-NET-Core-Get-Json-Array-using-IConfiguration\"><a href=\"#ASP-NET-Core-Get-Json-Array-using-IConfiguration\" class=\"headerlink\" title=\"ASP .NET Core Get Json Array using IConfiguration\"></a>ASP .NET Core Get Json Array using IConfiguration</h3><p>In appsettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;MyArray&quot;: [</span><br><span class=\"line\">          &quot;str1&quot;,</span><br><span class=\"line\">          &quot;str2&quot;,</span><br><span class=\"line\">          &quot;str3&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","date":"2019-07-07T13:09:07.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)","date":"2019-06-27T02:30:26.000Z","_content":"\n\n## 主要完成的功能\n\n - hexo博客 master 分支 https://github.com/luoyunchong/hexo-blog\n - 放静态资源 https://github.com/luoyunchong/luoyunchong.github.io \n - github帮我发布的github Pages https://luoyunchong.github.io\n - 腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 http://blog.igeekfan.cn\n\n 我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);\n\n<!-- more -->\n\n### 相关技术\n- travis-ci\n- github、github pages\n- 腾讯云(ESC)、nginx、ssl(私钥、公钥)\n- hexo 使用markdown写的静态博客\n\n### 参考\n- [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [How to Encrypt/Decrypt SSH Keys for Deployment](https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md)\n- [Travis CI 自动化部署博客](https://segmentfault.com/a/1190000011218410)\n- [使用Travis自动部署前端页面到阿里云服务器](https://blog.csdn.net/u011350541/article/details/84034141)\n- [Linux命令详解之–scp命令](https://www.linuxdaxue.com/linux-command-intro-scp.html)\n- [Linux ssh/scp连接时避免输入yes(公钥验证)](https://www.cnblogs.com/imzye/p/5133749.html)\n### 备注\n这个是shell的多行注释\n~~~\n:<<!\n这里的内容 shell 不会执行\n!\n~~~\n单行注释\n~~~\n# 注释。。\n~~~\n\n**$NAME**\n\n在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables\n\nscp 命令用于linux下的跨主机之间的文件和目录复制\n\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n\nscp 拷文件可能会提示密码，或者检查key，如\n\n~~~\nAre you sure you want to continue connecting (yes/no)\n~~~\n\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n~~~\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n~~~\n\n### 相关命令行配置\n在要发布的服务器ubuntu中运行\nscp -r \n~~~\ncd ~/.ssh\n# create ssh key\nssh-keygen -t rsa -b 4096 -C \"TravisCIDeployKey\"  #一直回车\n\n#这个是生成ssh key后 命令行显示的内容\n#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.\n#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.\n#The key fingerprint is:\n#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com\n#The key's randomart image is:\n#+---[RSA 2048]----+\n#|E+o              |\n#|+X .             |\n#|X.=              |\n#|=o  * = .        |\n#| . = B BSo       |\n#|  . = * *o.      |\n#|     O *+..      |\n#|    o.=.=o       |\n#|     +o. .       |\n#+----[SHA256]-----+\n\nls\n# 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）\n#id_rsa  id_rsa.pub\n\n#append the public key to the list of \"authorized keys\":\ncat id_rsa.pub >> authorized_keys\n# ubuntu\nsudo apt-get install ruby-full\ngem install travis\ntravis login\n#输入github的用户名和密码，登录成功才能travis encrypt-file \n#Username: luoyunchong@foxmail.com\n#Password for luoyunchong@foxmail.com: ************\n#Successfully logged in as luoyunchong!\n\n# 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。\ntouch .travis.yml && travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    \n# 看到下面，生成了id_rsa.enc\n#storing result as id_rsa.enc\n#storing secure env variables for decryption\n#\n#Make sure to add id_rsa.enc to the git repository.\n#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.\n#Commit all changes to your .travis.yml.\n\n# 查看.travis.yml文件\ncat .travis.yml\n~~~\n你会看到如下内容 \n\n~~~\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件\n~~~\n\n### 注意\n把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，\n\n\n- www.travis-cli.org （免费,公有仓库）\n- www.travis-cli.com （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）\n\n在 www.travis-cli.com 是找不到key和iV，他们自动进入www.travis-cli.org，执行\n~~~\ntravis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog\n~~~\n自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。\n\n\nhexo 部署至luoyunchong.github.io后，github会自动部署至github Pages\n部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx\n\n### 完整.travis.yml文件配置\n~~~\n\nlanguage: node_js\nnode_js: stable\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n#before_script:\n # - npm install -g gulp\n\nscript:\n  - hexo clean  #清除\n  - hexo g\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\nafter_script:\n  # - cd ./public\n  # - git init\n  # - git config user.name \"luoyunchong\" # 修改name\n  # - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  # - git add .\n  # - git commit -m \"Travis CI Auto Builder\"\n  # - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 \n  - git config user.name \"luoyunchong\" # 修改name\n  - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  - sed -i \"s/gh_token/${GH_TOKEN}/g\" ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！\n  - hexo deploy\n\nafter_success:\n  - pwd\n  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n\nbranches:\n  only:\n    - master\nenv:\n global:\n   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git\n\n\nnotifications:\n  email:\n    - luoyunchong@foxmail.com\n  on_success: change\n  on_failure: always\n~~~","source":"_posts/devops/travis-ci-devops-to-hexo-ESC.md","raw":"---\ntitle: travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)\ndate: 2019-06-27 10:30:26\ntags: \n- travis-cli\n- ssl\n- Ubuntu\ncategory:\n- DevOps\n---\n\n\n## 主要完成的功能\n\n - hexo博客 master 分支 https://github.com/luoyunchong/hexo-blog\n - 放静态资源 https://github.com/luoyunchong/luoyunchong.github.io \n - github帮我发布的github Pages https://luoyunchong.github.io\n - 腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 http://blog.igeekfan.cn\n\n 我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);\n\n<!-- more -->\n\n### 相关技术\n- travis-ci\n- github、github pages\n- 腾讯云(ESC)、nginx、ssl(私钥、公钥)\n- hexo 使用markdown写的静态博客\n\n### 参考\n- [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [How to Encrypt/Decrypt SSH Keys for Deployment](https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md)\n- [Travis CI 自动化部署博客](https://segmentfault.com/a/1190000011218410)\n- [使用Travis自动部署前端页面到阿里云服务器](https://blog.csdn.net/u011350541/article/details/84034141)\n- [Linux命令详解之–scp命令](https://www.linuxdaxue.com/linux-command-intro-scp.html)\n- [Linux ssh/scp连接时避免输入yes(公钥验证)](https://www.cnblogs.com/imzye/p/5133749.html)\n### 备注\n这个是shell的多行注释\n~~~\n:<<!\n这里的内容 shell 不会执行\n!\n~~~\n单行注释\n~~~\n# 注释。。\n~~~\n\n**$NAME**\n\n在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables\n\nscp 命令用于linux下的跨主机之间的文件和目录复制\n\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n\nscp 拷文件可能会提示密码，或者检查key，如\n\n~~~\nAre you sure you want to continue connecting (yes/no)\n~~~\n\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n~~~\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n~~~\n\n### 相关命令行配置\n在要发布的服务器ubuntu中运行\nscp -r \n~~~\ncd ~/.ssh\n# create ssh key\nssh-keygen -t rsa -b 4096 -C \"TravisCIDeployKey\"  #一直回车\n\n#这个是生成ssh key后 命令行显示的内容\n#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.\n#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.\n#The key fingerprint is:\n#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com\n#The key's randomart image is:\n#+---[RSA 2048]----+\n#|E+o              |\n#|+X .             |\n#|X.=              |\n#|=o  * = .        |\n#| . = B BSo       |\n#|  . = * *o.      |\n#|     O *+..      |\n#|    o.=.=o       |\n#|     +o. .       |\n#+----[SHA256]-----+\n\nls\n# 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）\n#id_rsa  id_rsa.pub\n\n#append the public key to the list of \"authorized keys\":\ncat id_rsa.pub >> authorized_keys\n# ubuntu\nsudo apt-get install ruby-full\ngem install travis\ntravis login\n#输入github的用户名和密码，登录成功才能travis encrypt-file \n#Username: luoyunchong@foxmail.com\n#Password for luoyunchong@foxmail.com: ************\n#Successfully logged in as luoyunchong!\n\n# 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。\ntouch .travis.yml && travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    \n# 看到下面，生成了id_rsa.enc\n#storing result as id_rsa.enc\n#storing secure env variables for decryption\n#\n#Make sure to add id_rsa.enc to the git repository.\n#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.\n#Commit all changes to your .travis.yml.\n\n# 查看.travis.yml文件\ncat .travis.yml\n~~~\n你会看到如下内容 \n\n~~~\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件\n~~~\n\n### 注意\n把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，\n\n\n- www.travis-cli.org （免费,公有仓库）\n- www.travis-cli.com （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）\n\n在 www.travis-cli.com 是找不到key和iV，他们自动进入www.travis-cli.org，执行\n~~~\ntravis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog\n~~~\n自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。\n\n\nhexo 部署至luoyunchong.github.io后，github会自动部署至github Pages\n部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx\n\n### 完整.travis.yml文件配置\n~~~\n\nlanguage: node_js\nnode_js: stable\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n#before_script:\n # - npm install -g gulp\n\nscript:\n  - hexo clean  #清除\n  - hexo g\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\nafter_script:\n  # - cd ./public\n  # - git init\n  # - git config user.name \"luoyunchong\" # 修改name\n  # - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  # - git add .\n  # - git commit -m \"Travis CI Auto Builder\"\n  # - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 \n  - git config user.name \"luoyunchong\" # 修改name\n  - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  - sed -i \"s/gh_token/${GH_TOKEN}/g\" ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！\n  - hexo deploy\n\nafter_success:\n  - pwd\n  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n\nbranches:\n  only:\n    - master\nenv:\n global:\n   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git\n\n\nnotifications:\n  email:\n    - luoyunchong@foxmail.com\n  on_success: change\n  on_failure: always\n~~~","slug":"devops/travis-ci-devops-to-hexo-ESC","published":1,"updated":"2019-10-08T04:21:13.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yks003bm0tw149nhz3y","content":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h3><ul>\n<li>travis-ci</li>\n<li>github、github pages</li>\n<li>腾讯云(ESC)、nginx、ssl(私钥、公钥)</li>\n<li>hexo 使用markdown写的静态博客</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a></li>\n<li><a href=\"https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md\" target=\"_blank\" rel=\"noopener\">How to Encrypt/Decrypt SSH Keys for Deployment</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011218410\" target=\"_blank\" rel=\"noopener\">Travis CI 自动化部署博客</a></li>\n<li><a href=\"https://blog.csdn.net/u011350541/article/details/84034141\" target=\"_blank\" rel=\"noopener\">使用Travis自动部署前端页面到阿里云服务器</a></li>\n<li><a href=\"https://www.linuxdaxue.com/linux-command-intro-scp.html\" target=\"_blank\" rel=\"noopener\">Linux命令详解之–scp命令</a></li>\n<li><a href=\"https://www.cnblogs.com/imzye/p/5133749.html\" target=\"_blank\" rel=\"noopener\">Linux ssh/scp连接时避免输入yes(公钥验证)</a><h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3>这个是shell的多行注释<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;!</span><br><span class=\"line\">这里的内容 shell 不会执行</span><br><span class=\"line\">!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>单行注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 注释。。</span><br></pre></td></tr></table></figure>\n\n<p><strong>$NAME</strong></p>\n<p>在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables</p>\n<p>scp 命令用于linux下的跨主机之间的文件和目录复制</p>\n<p>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，</p>\n<p>scp 拷文件可能会提示密码，或者检查key，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)</span><br></pre></td></tr></table></figure>\n\n<p>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\">#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，</span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\">#可用-i指定私钥。</span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span><br><span class=\"line\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关命令行配置\"><a href=\"#相关命令行配置\" class=\"headerlink\" title=\"相关命令行配置\"></a>相关命令行配置</h3><p>在要发布的服务器ubuntu中运行<br>scp -r </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\"># create ssh key</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;TravisCIDeployKey&quot;  #一直回车</span><br><span class=\"line\"></span><br><span class=\"line\">#这个是生成ssh key后 命令行显示的内容</span><br><span class=\"line\">#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.</span><br><span class=\"line\">#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.</span><br><span class=\"line\">#The key fingerprint is:</span><br><span class=\"line\">#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com</span><br><span class=\"line\">#The key&apos;s randomart image is:</span><br><span class=\"line\">#+---[RSA 2048]----+</span><br><span class=\"line\">#|E+o              |</span><br><span class=\"line\">#|+X .             |</span><br><span class=\"line\">#|X.=              |</span><br><span class=\"line\">#|=o  * = .        |</span><br><span class=\"line\">#| . = B BSo       |</span><br><span class=\"line\">#|  . = * *o.      |</span><br><span class=\"line\">#|     O *+..      |</span><br><span class=\"line\">#|    o.=.=o       |</span><br><span class=\"line\">#|     +o. .       |</span><br><span class=\"line\">#+----[SHA256]-----+</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\"># 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</span><br><span class=\"line\">#id_rsa  id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">#append the public key to the list of &quot;authorized keys&quot;:</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class=\"line\"># ubuntu</span><br><span class=\"line\">sudo apt-get install ruby-full</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login</span><br><span class=\"line\">#输入github的用户名和密码，登录成功才能travis encrypt-file </span><br><span class=\"line\">#Username: luoyunchong@foxmail.com</span><br><span class=\"line\">#Password for luoyunchong@foxmail.com: ************</span><br><span class=\"line\">#Successfully logged in as luoyunchong!</span><br><span class=\"line\"></span><br><span class=\"line\"># 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。</span><br><span class=\"line\">touch .travis.yml &amp;&amp; travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    </span><br><span class=\"line\"># 看到下面，生成了id_rsa.enc</span><br><span class=\"line\">#storing result as id_rsa.enc</span><br><span class=\"line\">#storing secure env variables for decryption</span><br><span class=\"line\">#</span><br><span class=\"line\">#Make sure to add id_rsa.enc to the git repository.</span><br><span class=\"line\">#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.</span><br><span class=\"line\">#Commit all changes to your .travis.yml.</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看.travis.yml文件</span><br><span class=\"line\">cat .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，</p>\n<ul>\n<li><a href=\"http://www.travis-cli.org\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org</a> （免费,公有仓库）</li>\n<li><a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）</li>\n</ul>\n<p>在 <a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> 是找不到key和iV，他们自动进入<a href=\"http://www.travis-cli.org，执行\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org，执行</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。</p>\n<p>hexo 部署至luoyunchong.github.io后，github会自动部署至github Pages<br>部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx</p>\n<h3 id=\"完整-travis-yml文件配置\"><a href=\"#完整-travis-yml文件配置\" class=\"headerlink\" title=\"完整.travis.yml文件配置\"></a>完整.travis.yml文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"># S: Build Lifecycle</span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">#before_script:</span><br><span class=\"line\"> # - npm install -g gulp</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean  #清除</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: $DEPLOY_IP</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  # - cd ./public</span><br><span class=\"line\">  # - git init</span><br><span class=\"line\">  # - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  # - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  # - git add .</span><br><span class=\"line\">  # - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class=\"line\">  # - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 </span><br><span class=\"line\">  - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  - sed -i &quot;s/gh_token/$&#123;GH_TOKEN&#125;/g&quot; ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span><br><span class=\"line\">  - hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - pwd</span><br><span class=\"line\">  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - luoyunchong@foxmail.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>","more":"<h3 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h3><ul>\n<li>travis-ci</li>\n<li>github、github pages</li>\n<li>腾讯云(ESC)、nginx、ssl(私钥、公钥)</li>\n<li>hexo 使用markdown写的静态博客</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a></li>\n<li><a href=\"https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md\" target=\"_blank\" rel=\"noopener\">How to Encrypt/Decrypt SSH Keys for Deployment</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011218410\" target=\"_blank\" rel=\"noopener\">Travis CI 自动化部署博客</a></li>\n<li><a href=\"https://blog.csdn.net/u011350541/article/details/84034141\" target=\"_blank\" rel=\"noopener\">使用Travis自动部署前端页面到阿里云服务器</a></li>\n<li><a href=\"https://www.linuxdaxue.com/linux-command-intro-scp.html\" target=\"_blank\" rel=\"noopener\">Linux命令详解之–scp命令</a></li>\n<li><a href=\"https://www.cnblogs.com/imzye/p/5133749.html\" target=\"_blank\" rel=\"noopener\">Linux ssh/scp连接时避免输入yes(公钥验证)</a><h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3>这个是shell的多行注释<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;!</span><br><span class=\"line\">这里的内容 shell 不会执行</span><br><span class=\"line\">!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>单行注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 注释。。</span><br></pre></td></tr></table></figure>\n\n<p><strong>$NAME</strong></p>\n<p>在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables</p>\n<p>scp 命令用于linux下的跨主机之间的文件和目录复制</p>\n<p>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，</p>\n<p>scp 拷文件可能会提示密码，或者检查key，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)</span><br></pre></td></tr></table></figure>\n\n<p>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\">#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，</span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\">#可用-i指定私钥。</span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span><br><span class=\"line\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关命令行配置\"><a href=\"#相关命令行配置\" class=\"headerlink\" title=\"相关命令行配置\"></a>相关命令行配置</h3><p>在要发布的服务器ubuntu中运行<br>scp -r </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\"># create ssh key</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;TravisCIDeployKey&quot;  #一直回车</span><br><span class=\"line\"></span><br><span class=\"line\">#这个是生成ssh key后 命令行显示的内容</span><br><span class=\"line\">#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.</span><br><span class=\"line\">#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.</span><br><span class=\"line\">#The key fingerprint is:</span><br><span class=\"line\">#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com</span><br><span class=\"line\">#The key&apos;s randomart image is:</span><br><span class=\"line\">#+---[RSA 2048]----+</span><br><span class=\"line\">#|E+o              |</span><br><span class=\"line\">#|+X .             |</span><br><span class=\"line\">#|X.=              |</span><br><span class=\"line\">#|=o  * = .        |</span><br><span class=\"line\">#| . = B BSo       |</span><br><span class=\"line\">#|  . = * *o.      |</span><br><span class=\"line\">#|     O *+..      |</span><br><span class=\"line\">#|    o.=.=o       |</span><br><span class=\"line\">#|     +o. .       |</span><br><span class=\"line\">#+----[SHA256]-----+</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\"># 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</span><br><span class=\"line\">#id_rsa  id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">#append the public key to the list of &quot;authorized keys&quot;:</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class=\"line\"># ubuntu</span><br><span class=\"line\">sudo apt-get install ruby-full</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login</span><br><span class=\"line\">#输入github的用户名和密码，登录成功才能travis encrypt-file </span><br><span class=\"line\">#Username: luoyunchong@foxmail.com</span><br><span class=\"line\">#Password for luoyunchong@foxmail.com: ************</span><br><span class=\"line\">#Successfully logged in as luoyunchong!</span><br><span class=\"line\"></span><br><span class=\"line\"># 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。</span><br><span class=\"line\">touch .travis.yml &amp;&amp; travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    </span><br><span class=\"line\"># 看到下面，生成了id_rsa.enc</span><br><span class=\"line\">#storing result as id_rsa.enc</span><br><span class=\"line\">#storing secure env variables for decryption</span><br><span class=\"line\">#</span><br><span class=\"line\">#Make sure to add id_rsa.enc to the git repository.</span><br><span class=\"line\">#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.</span><br><span class=\"line\">#Commit all changes to your .travis.yml.</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看.travis.yml文件</span><br><span class=\"line\">cat .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，</p>\n<ul>\n<li><a href=\"http://www.travis-cli.org\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org</a> （免费,公有仓库）</li>\n<li><a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）</li>\n</ul>\n<p>在 <a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> 是找不到key和iV，他们自动进入<a href=\"http://www.travis-cli.org，执行\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org，执行</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。</p>\n<p>hexo 部署至luoyunchong.github.io后，github会自动部署至github Pages<br>部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx</p>\n<h3 id=\"完整-travis-yml文件配置\"><a href=\"#完整-travis-yml文件配置\" class=\"headerlink\" title=\"完整.travis.yml文件配置\"></a>完整.travis.yml文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"># S: Build Lifecycle</span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">#before_script:</span><br><span class=\"line\"> # - npm install -g gulp</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean  #清除</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: $DEPLOY_IP</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  # - cd ./public</span><br><span class=\"line\">  # - git init</span><br><span class=\"line\">  # - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  # - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  # - git add .</span><br><span class=\"line\">  # - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class=\"line\">  # - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 </span><br><span class=\"line\">  - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  - sed -i &quot;s/gh_token/$&#123;GH_TOKEN&#125;/g&quot; ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span><br><span class=\"line\">  - hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - pwd</span><br><span class=\"line\">  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - luoyunchong@foxmail.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)","path":"2019/06/27/devops/travis-ci-devops-to-hexo-ESC/","eyeCatchImage":null,"excerpt":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>","date":"2019-06-27T02:30:26.000Z","pv":0,"totalPV":0,"categories":"DevOps","tags":["Ubuntu","travis-cli","ssl"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"好用的前后端类库及安装包整合下载","date":"2019-06-09T17:00:22.000Z","description":"记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。","_content":"\n#### 记录平常使用的一些前端插件\n\n + [wangEditor3](http://www.wangeditor.com/) 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费\n + [webuploader](http://fex.baidu.com/webuploader/) 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+\n +  [docsify.js](https://docsify.js.org/#/)   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.\n + cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性\n +  [JQuery-EasyUI-insdep](https://www.insdep.com/) 基于Easyui的样式扩展UI，变得更好看，多了许多插件。\n +  jquery-extensions　[源文件下载地址](https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg) 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。\n* jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中\n* \n#### 安装包下载\n\n+ redis.msi文件  [安装包](https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw) 缓存使用redis\n+ redis-desktop-manager.exe 文件 链接：https://pan.baidu.com/s/1c3ra73E 密码：k81k\n+ SQL Server 2012 链接：https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ 密码：g8av  \n+  Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。\n+  TortoiseSVN [官网](https://tortoisesvn.net/downloads.html)\n+  MYSQL 官网下载即可，选择5.7.22版本\n+  Navicat for mysql [百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n\n#### 另外vs2017中的插件(可选)\n* visualsvn for visual studio 2017\n* resharper \n\n#### staticfiles开源库介绍、通用js\n\n> 维护地址为 http://ip/summary/libs/staticfiles.git\n> bower 静态资源地址 http://ip:5678/\n\n* easyui.default-extension.js为easyui增加默认属性，扩展jquery方法\n* base.js 大多数项目通用的com对象，\n* passwordComplexityHelper.js 让密码也可以在后台配置\n* libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果\n\n>根目录新建.bowerrc文件，实现自定义bower仓库\n~~~\n{\n    \"registry\": \"http://ip:5678\",\n    \"timeout\": 30000\n}\n~~~\n> 在web项目目录执行以下命令\n~~~\n    bower install staticfiles --save\n~~~\n\n### 后端技术\n> 后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   [官网](http://www.aspnetboilerplate.com/)\n* ABP框架有哪些好处，可以参考如下文章[ABP的一些优点](https://www.cnblogs.com/farb/p/ABPIntro.html)\n+ 在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，\n \n#### ABP 后端已完成的功能\n> 后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。\n\n * 用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置\n *\n","source":"_posts/front-end/Useful-front-end-and-back-end.md","raw":"---\ntitle: 好用的前后端类库及安装包整合下载\ndate: 2019-06-10 01:00:22\ndescription: 记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。\ntags:\ncategory:\n- 大前端\n---\n\n#### 记录平常使用的一些前端插件\n\n + [wangEditor3](http://www.wangeditor.com/) 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费\n + [webuploader](http://fex.baidu.com/webuploader/) 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+\n +  [docsify.js](https://docsify.js.org/#/)   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.\n + cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性\n +  [JQuery-EasyUI-insdep](https://www.insdep.com/) 基于Easyui的样式扩展UI，变得更好看，多了许多插件。\n +  jquery-extensions　[源文件下载地址](https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg) 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。\n* jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中\n* \n#### 安装包下载\n\n+ redis.msi文件  [安装包](https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw) 缓存使用redis\n+ redis-desktop-manager.exe 文件 链接：https://pan.baidu.com/s/1c3ra73E 密码：k81k\n+ SQL Server 2012 链接：https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ 密码：g8av  \n+  Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。\n+  TortoiseSVN [官网](https://tortoisesvn.net/downloads.html)\n+  MYSQL 官网下载即可，选择5.7.22版本\n+  Navicat for mysql [百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n\n#### 另外vs2017中的插件(可选)\n* visualsvn for visual studio 2017\n* resharper \n\n#### staticfiles开源库介绍、通用js\n\n> 维护地址为 http://ip/summary/libs/staticfiles.git\n> bower 静态资源地址 http://ip:5678/\n\n* easyui.default-extension.js为easyui增加默认属性，扩展jquery方法\n* base.js 大多数项目通用的com对象，\n* passwordComplexityHelper.js 让密码也可以在后台配置\n* libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果\n\n>根目录新建.bowerrc文件，实现自定义bower仓库\n~~~\n{\n    \"registry\": \"http://ip:5678\",\n    \"timeout\": 30000\n}\n~~~\n> 在web项目目录执行以下命令\n~~~\n    bower install staticfiles --save\n~~~\n\n### 后端技术\n> 后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   [官网](http://www.aspnetboilerplate.com/)\n* ABP框架有哪些好处，可以参考如下文章[ABP的一些优点](https://www.cnblogs.com/farb/p/ABPIntro.html)\n+ 在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，\n \n#### ABP 后端已完成的功能\n> 后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。\n\n * 用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置\n *\n","slug":"front-end/Useful-front-end-and-back-end","published":1,"updated":"2019-10-08T04:21:13.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ykx003dm0twi2y2wkmf","content":"<h4 id=\"记录平常使用的一些前端插件\"><a href=\"#记录平常使用的一些前端插件\" class=\"headerlink\" title=\"记录平常使用的一些前端插件\"></a>记录平常使用的一些前端插件</h4><ul>\n<li><a href=\"http://www.wangeditor.com/\" target=\"_blank\" rel=\"noopener\">wangEditor3</a> 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费</li>\n<li><a href=\"http://fex.baidu.com/webuploader/\" target=\"_blank\" rel=\"noopener\">webuploader</a> 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+</li>\n<li><a href=\"https://docsify.js.org/#/\" target=\"_blank\" rel=\"noopener\">docsify.js</a>   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.</li>\n<li>cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性</li>\n<li><a href=\"https://www.insdep.com/\" target=\"_blank\" rel=\"noopener\">JQuery-EasyUI-insdep</a> 基于Easyui的样式扩展UI，变得更好看，多了许多插件。</li>\n<li>jquery-extensions　<a href=\"https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg\" target=\"_blank\" rel=\"noopener\">源文件下载地址</a> 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。<ul>\n<li>jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中</li>\n<li><h4 id=\"安装包下载\"><a href=\"#安装包下载\" class=\"headerlink\" title=\"安装包下载\"></a>安装包下载</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>redis.msi文件  <a href=\"https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw\" target=\"_blank\" rel=\"noopener\">安装包</a> 缓存使用redis</li>\n<li>redis-desktop-manager.exe 文件 链接：<a href=\"https://pan.baidu.com/s/1c3ra73E\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1c3ra73E</a> 密码：k81k</li>\n<li>SQL Server 2012 链接：<a href=\"https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ</a> 密码：g8av  </li>\n<li>Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。</li>\n<li>TortoiseSVN <a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li>MYSQL 官网下载即可，选择5.7.22版本</li>\n<li>Navicat for mysql <a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p</li>\n</ul>\n<h4 id=\"另外vs2017中的插件-可选\"><a href=\"#另外vs2017中的插件-可选\" class=\"headerlink\" title=\"另外vs2017中的插件(可选)\"></a>另外vs2017中的插件(可选)</h4><ul>\n<li>visualsvn for visual studio 2017</li>\n<li>resharper </li>\n</ul>\n<h4 id=\"staticfiles开源库介绍、通用js\"><a href=\"#staticfiles开源库介绍、通用js\" class=\"headerlink\" title=\"staticfiles开源库介绍、通用js\"></a>staticfiles开源库介绍、通用js</h4><blockquote>\n<p>维护地址为 <a href=\"http://ip/summary/libs/staticfiles.git\" target=\"_blank\" rel=\"noopener\">http://ip/summary/libs/staticfiles.git</a><br>bower 静态资源地址 <a href=\"http://ip:5678/\" target=\"_blank\" rel=\"noopener\">http://ip:5678/</a></p>\n</blockquote>\n<ul>\n<li>easyui.default-extension.js为easyui增加默认属性，扩展jquery方法</li>\n<li>base.js 大多数项目通用的com对象，</li>\n<li>passwordComplexityHelper.js 让密码也可以在后台配置</li>\n<li>libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果</li>\n</ul>\n<blockquote>\n<p>根目录新建.bowerrc文件，实现自定义bower仓库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry&quot;: &quot;http://ip:5678&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;: 30000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在web项目目录执行以下命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install staticfiles --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><blockquote>\n<p>后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   <a href=\"http://www.aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<ul>\n<li>ABP框架有哪些好处，可以参考如下文章<a href=\"https://www.cnblogs.com/farb/p/ABPIntro.html\" target=\"_blank\" rel=\"noopener\">ABP的一些优点</a></li>\n</ul>\n<ul>\n<li>在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，</li>\n</ul>\n</blockquote>\n<h4 id=\"ABP-后端已完成的功能\"><a href=\"#ABP-后端已完成的功能\" class=\"headerlink\" title=\"ABP 后端已完成的功能\"></a>ABP 后端已完成的功能</h4><blockquote>\n<p>后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。</p>\n</blockquote>\n<ul>\n<li>用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"记录平常使用的一些前端插件\"><a href=\"#记录平常使用的一些前端插件\" class=\"headerlink\" title=\"记录平常使用的一些前端插件\"></a>记录平常使用的一些前端插件</h4><ul>\n<li><a href=\"http://www.wangeditor.com/\" target=\"_blank\" rel=\"noopener\">wangEditor3</a> 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费</li>\n<li><a href=\"http://fex.baidu.com/webuploader/\" target=\"_blank\" rel=\"noopener\">webuploader</a> 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+</li>\n<li><a href=\"https://docsify.js.org/#/\" target=\"_blank\" rel=\"noopener\">docsify.js</a>   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.</li>\n<li>cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性</li>\n<li><a href=\"https://www.insdep.com/\" target=\"_blank\" rel=\"noopener\">JQuery-EasyUI-insdep</a> 基于Easyui的样式扩展UI，变得更好看，多了许多插件。</li>\n<li>jquery-extensions　<a href=\"https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg\" target=\"_blank\" rel=\"noopener\">源文件下载地址</a> 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。<ul>\n<li>jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中</li>\n<li><h4 id=\"安装包下载\"><a href=\"#安装包下载\" class=\"headerlink\" title=\"安装包下载\"></a>安装包下载</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>redis.msi文件  <a href=\"https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw\" target=\"_blank\" rel=\"noopener\">安装包</a> 缓存使用redis</li>\n<li>redis-desktop-manager.exe 文件 链接：<a href=\"https://pan.baidu.com/s/1c3ra73E\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1c3ra73E</a> 密码：k81k</li>\n<li>SQL Server 2012 链接：<a href=\"https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ</a> 密码：g8av  </li>\n<li>Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。</li>\n<li>TortoiseSVN <a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li>MYSQL 官网下载即可，选择5.7.22版本</li>\n<li>Navicat for mysql <a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p</li>\n</ul>\n<h4 id=\"另外vs2017中的插件-可选\"><a href=\"#另外vs2017中的插件-可选\" class=\"headerlink\" title=\"另外vs2017中的插件(可选)\"></a>另外vs2017中的插件(可选)</h4><ul>\n<li>visualsvn for visual studio 2017</li>\n<li>resharper </li>\n</ul>\n<h4 id=\"staticfiles开源库介绍、通用js\"><a href=\"#staticfiles开源库介绍、通用js\" class=\"headerlink\" title=\"staticfiles开源库介绍、通用js\"></a>staticfiles开源库介绍、通用js</h4><blockquote>\n<p>维护地址为 <a href=\"http://ip/summary/libs/staticfiles.git\" target=\"_blank\" rel=\"noopener\">http://ip/summary/libs/staticfiles.git</a><br>bower 静态资源地址 <a href=\"http://ip:5678/\" target=\"_blank\" rel=\"noopener\">http://ip:5678/</a></p>\n</blockquote>\n<ul>\n<li>easyui.default-extension.js为easyui增加默认属性，扩展jquery方法</li>\n<li>base.js 大多数项目通用的com对象，</li>\n<li>passwordComplexityHelper.js 让密码也可以在后台配置</li>\n<li>libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果</li>\n</ul>\n<blockquote>\n<p>根目录新建.bowerrc文件，实现自定义bower仓库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry&quot;: &quot;http://ip:5678&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;: 30000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在web项目目录执行以下命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install staticfiles --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><blockquote>\n<p>后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   <a href=\"http://www.aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<ul>\n<li>ABP框架有哪些好处，可以参考如下文章<a href=\"https://www.cnblogs.com/farb/p/ABPIntro.html\" target=\"_blank\" rel=\"noopener\">ABP的一些优点</a></li>\n</ul>\n<ul>\n<li>在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，</li>\n</ul>\n</blockquote>\n<h4 id=\"ABP-后端已完成的功能\"><a href=\"#ABP-后端已完成的功能\" class=\"headerlink\" title=\"ABP 后端已完成的功能\"></a>ABP 后端已完成的功能</h4><blockquote>\n<p>后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。</p>\n</blockquote>\n<ul>\n<li>用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置</li>\n<li></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"好用的前后端类库及安装包整合下载","path":"2019/06/10/front-end/Useful-front-end-and-back-end/","eyeCatchImage":null,"excerpt":"记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。","date":"2019-06-09T17:00:22.000Z","pv":0,"totalPV":0,"categories":"大前端","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"程序员必备","date":"2019-09-05T02:30:26.000Z","_content":"\n## 程序员必备\n<!-- more -->\n### 软件工具\n* git(开源的分布式版本控制系统)，[链接](https://git-scm.com/downloads)\n* sourcetree（一个源代码管理的GUI）[链接](https://www.sourcetreeapp.com/)\n* 注册sourcetree帐号\n* 注册码云帐号(一个免费的可放置私有代码的平台):https://gitee.com  我们会把代码托管到这个平台\n* git的使用，请参考以下链接， [点我](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* markdown语法\n* 设计工具：axure\n*  数据库对比工具：sql-compare\n\n \n### VSCode插件 \n- Vue.js Extension Pack 和 jsconfig.json 可以定位跳转到@开头的路径等自定义路径","source":"_posts/devops/tools.md","raw":"---\ntitle: 程序员必备\ndate: 2019-9-05 10:30:26\ncategory:\n- DevOps\n---\n\n## 程序员必备\n<!-- more -->\n### 软件工具\n* git(开源的分布式版本控制系统)，[链接](https://git-scm.com/downloads)\n* sourcetree（一个源代码管理的GUI）[链接](https://www.sourcetreeapp.com/)\n* 注册sourcetree帐号\n* 注册码云帐号(一个免费的可放置私有代码的平台):https://gitee.com  我们会把代码托管到这个平台\n* git的使用，请参考以下链接， [点我](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* markdown语法\n* 设计工具：axure\n*  数据库对比工具：sql-compare\n\n \n### VSCode插件 \n- Vue.js Extension Pack 和 jsconfig.json 可以定位跳转到@开头的路径等自定义路径","slug":"devops/tools","published":1,"updated":"2019-10-08T05:18:17.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yl2003gm0twg6lxdrqg","content":"<h2 id=\"程序员必备\"><a href=\"#程序员必备\" class=\"headerlink\" title=\"程序员必备\"></a>程序员必备</h2><a id=\"more\"></a>\n<h3 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h3><ul>\n<li>git(开源的分布式版本控制系统)，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>sourcetree（一个源代码管理的GUI）<a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>注册sourcetree帐号</li>\n<li>注册码云帐号(一个免费的可放置私有代码的平台):<a href=\"https://gitee.com\" target=\"_blank\" rel=\"noopener\">https://gitee.com</a>  我们会把代码托管到这个平台</li>\n<li>git的使用，请参考以下链接， <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">点我</a></li>\n<li>markdown语法</li>\n<li>设计工具：axure</li>\n<li>数据库对比工具：sql-compare</li>\n</ul>\n<h3 id=\"VSCode插件\"><a href=\"#VSCode插件\" class=\"headerlink\" title=\"VSCode插件\"></a>VSCode插件</h3><ul>\n<li>Vue.js Extension Pack 和 jsconfig.json 可以定位跳转到@开头的路径等自定义路径</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"程序员必备\"><a href=\"#程序员必备\" class=\"headerlink\" title=\"程序员必备\"></a>程序员必备</h2>","more":"<h3 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h3><ul>\n<li>git(开源的分布式版本控制系统)，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>sourcetree（一个源代码管理的GUI）<a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>注册sourcetree帐号</li>\n<li>注册码云帐号(一个免费的可放置私有代码的平台):<a href=\"https://gitee.com\" target=\"_blank\" rel=\"noopener\">https://gitee.com</a>  我们会把代码托管到这个平台</li>\n<li>git的使用，请参考以下链接， <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">点我</a></li>\n<li>markdown语法</li>\n<li>设计工具：axure</li>\n<li>数据库对比工具：sql-compare</li>\n</ul>\n<h3 id=\"VSCode插件\"><a href=\"#VSCode插件\" class=\"headerlink\" title=\"VSCode插件\"></a>VSCode插件</h3><ul>\n<li>Vue.js Extension Pack 和 jsconfig.json 可以定位跳转到@开头的路径等自定义路径</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 13:18:17 GMT+0800 (GMT+08:00)","title":"程序员必备","path":"2019/09/05/devops/tools/","eyeCatchImage":null,"excerpt":"<h2 id=\"程序员必备\"><a href=\"#程序员必备\" class=\"headerlink\" title=\"程序员必备\"></a>程序员必备</h2>","date":"2019-09-05T02:30:26.000Z","pv":0,"totalPV":0,"categories":"DevOps","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"hexo-theme-material-x+gitalk","date":"2019-06-25T05:57:09.000Z","_content":"\n### hexo-theme-material-x +gitalk 实现评论系统集成\n关于hexo 中使用Material-x为主题时，增加评论系统 gitalk\n\n* material-x 主题  https://xaoxuu.com/wiki/material-x/third-party-services/index.html\n* gitalk开源地址 https://github.com/gitalk/gitalk\n\n<!-- more -->\n\n根目录的配置项\n~~~yml\ngitalk: 要使用哪个请复制到根目录配置文件！\n  clientID: 你的clientID\n  clientSecret: 你的clientSecret\n  repo: 你的repo名  #这个直接就是仓储名\n  owner: 你的GitHub名\n  admin: [] 至少填写你的GitHub名\n~~~\n\nclientID和clientSecret如何得到：\n1. 先要有github账号， 点击 New OAuth App（后面这个链接）： https://github.com/settings/applications/new\n2. 填写信息：\nApplication name 随便填，\nHomepage URL 和 Authorization callback URL 都写你的 网址，我的是：https://luoyunchong.github.io\n\n生成后，就会有clientID和clientSecret\n\n> 参考我的配置项\n\nhttps://github.com/luoyunchong/hexo-blog/blob/master/_config.yml\n\n\n~~~\ngitalk: \n  clientID: 70ba179c7cf0f158ad7d\n  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957\n  repo: hexo-blog\n  owner: luoyunchong\n  admin: [luoyunchong]\n~~~\n\n这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND\n\n\n\n* 报错出现 Error: Validation Failed.\n[https://github.com/gitalk/gitalk/issues/102](https://github.com/gitalk/gitalk/issues/102)\n总结主要的原因是\n> 由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.\n\n解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密\n\n我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容\n~~~javascript\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n  <script type=\"text/javascript\">\n    var gitalk = new Gitalk({\n      clientID: \"<%- config.gitalk.clientID %>\",\n      clientSecret: \"<%- config.gitalk.clientSecret %>\",\n      repo: \"<%- config.gitalk.repo %>\",\n      owner: \"<%- config.gitalk.owner %>\",\n      admin: \"<%- config.gitalk.admin %>\",\n      <% if(page.gitalk && page.gitalk.id) { %>\n        id: \"<%= page.gitalk.id %>\",\n      <% } else { %>\n        id: md5(location.pathname),      // Ensure uniqueness and length less than 50\n      <% } %>\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n    gitalk.render('gitalk-container');\n  </script>\n~~~\n最重要的是引用\n\n~~~\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script> \n~~~\n和\n~~~\nid: md5(location.pathname)\n~~~\n\n* 当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）\n~~~\ngitalk:\n  id: /404\n~~~\n\n完整title\n~~~\n---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n~~~","source":"_posts/front-end/hexo-theme-material-x-gitalk.md","raw":"---\ntitle: hexo-theme-material-x+gitalk\ndate: 2019-06-25 13:57:09\ntags: \n- hexo\n- material-x\n- gitalk\ncategory: hexo\n---\n\n### hexo-theme-material-x +gitalk 实现评论系统集成\n关于hexo 中使用Material-x为主题时，增加评论系统 gitalk\n\n* material-x 主题  https://xaoxuu.com/wiki/material-x/third-party-services/index.html\n* gitalk开源地址 https://github.com/gitalk/gitalk\n\n<!-- more -->\n\n根目录的配置项\n~~~yml\ngitalk: 要使用哪个请复制到根目录配置文件！\n  clientID: 你的clientID\n  clientSecret: 你的clientSecret\n  repo: 你的repo名  #这个直接就是仓储名\n  owner: 你的GitHub名\n  admin: [] 至少填写你的GitHub名\n~~~\n\nclientID和clientSecret如何得到：\n1. 先要有github账号， 点击 New OAuth App（后面这个链接）： https://github.com/settings/applications/new\n2. 填写信息：\nApplication name 随便填，\nHomepage URL 和 Authorization callback URL 都写你的 网址，我的是：https://luoyunchong.github.io\n\n生成后，就会有clientID和clientSecret\n\n> 参考我的配置项\n\nhttps://github.com/luoyunchong/hexo-blog/blob/master/_config.yml\n\n\n~~~\ngitalk: \n  clientID: 70ba179c7cf0f158ad7d\n  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957\n  repo: hexo-blog\n  owner: luoyunchong\n  admin: [luoyunchong]\n~~~\n\n这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND\n\n\n\n* 报错出现 Error: Validation Failed.\n[https://github.com/gitalk/gitalk/issues/102](https://github.com/gitalk/gitalk/issues/102)\n总结主要的原因是\n> 由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.\n\n解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密\n\n我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容\n~~~javascript\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n  <script type=\"text/javascript\">\n    var gitalk = new Gitalk({\n      clientID: \"<%- config.gitalk.clientID %>\",\n      clientSecret: \"<%- config.gitalk.clientSecret %>\",\n      repo: \"<%- config.gitalk.repo %>\",\n      owner: \"<%- config.gitalk.owner %>\",\n      admin: \"<%- config.gitalk.admin %>\",\n      <% if(page.gitalk && page.gitalk.id) { %>\n        id: \"<%= page.gitalk.id %>\",\n      <% } else { %>\n        id: md5(location.pathname),      // Ensure uniqueness and length less than 50\n      <% } %>\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n    gitalk.render('gitalk-container');\n  </script>\n~~~\n最重要的是引用\n\n~~~\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script> \n~~~\n和\n~~~\nid: md5(location.pathname)\n~~~\n\n* 当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）\n~~~\ngitalk:\n  id: /404\n~~~\n\n完整title\n~~~\n---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n~~~","slug":"front-end/hexo-theme-material-x-gitalk","published":1,"updated":"2019-10-08T04:21:13.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yl9003im0twrldf7uax","content":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<p>根目录的配置项</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span> <span class=\"string\">要使用哪个请复制到根目录配置文件！</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">你的clientID</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">你的clientSecret</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">你的repo名</span>  <span class=\"comment\">#这个直接就是仓储名</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">你的GitHub名</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">[]</span> <span class=\"string\">至少填写你的GitHub名</span></span><br></pre></td></tr></table></figure>\n\n<p>clientID和clientSecret如何得到：</p>\n<ol>\n<li>先要有github账号， 点击 New OAuth App（后面这个链接）： <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a></li>\n<li>填写信息：<br>Application name 随便填，<br>Homepage URL 和 Authorization callback URL 都写你的 网址，我的是：<a href=\"https://luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io</a></li>\n</ol>\n<p>生成后，就会有clientID和clientSecret</p>\n<blockquote>\n<p>参考我的配置项</p>\n</blockquote>\n<p><a href=\"https://github.com/luoyunchong/hexo-blog/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog/blob/master/_config.yml</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitalk: </span><br><span class=\"line\">  clientID: 70ba179c7cf0f158ad7d</span><br><span class=\"line\">  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957</span><br><span class=\"line\">  repo: hexo-blog</span><br><span class=\"line\">  owner: luoyunchong</span><br><span class=\"line\">  admin: [luoyunchong]</span><br></pre></td></tr></table></figure>\n\n<p>这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND</p>\n<ul>\n<li>报错出现 Error: Validation Failed.<br><a href=\"https://github.com/gitalk/gitalk/issues/102\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/issues/102</a><br>总结主要的原因是<blockquote>\n<p>由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.</p>\n</blockquote>\n</li>\n</ul>\n<p>解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密</p>\n<p>我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span><br><span class=\"line\">    clientID: <span class=\"string\">\"&lt;%- config.gitalk.clientID %&gt;\"</span>,</span><br><span class=\"line\">    clientSecret: <span class=\"string\">\"&lt;%- config.gitalk.clientSecret %&gt;\"</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">\"&lt;%- config.gitalk.repo %&gt;\"</span>,</span><br><span class=\"line\">    owner: <span class=\"string\">\"&lt;%- config.gitalk.owner %&gt;\"</span>,</span><br><span class=\"line\">    admin: <span class=\"string\">\"&lt;%- config.gitalk.admin %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span>(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class=\"line\">      id: <span class=\"string\">\"&lt;%= page.gitalk.id %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">      id: md5(location.pathname),      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  gitalk.render(<span class=\"string\">'gitalk-container'</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最重要的是引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id: md5(location.pathname)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  id: /404</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>完整title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: page</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">body: [article, comments]</span><br><span class=\"line\">meta:</span><br><span class=\"line\">  header: false</span><br><span class=\"line\">  footer: false</span><br><span class=\"line\">sidebar: false</span><br><span class=\"line\">valine:</span><br><span class=\"line\">  path: /404.html</span><br><span class=\"line\">  placeholder: 请留言告诉我您要访问哪个页面找不到了</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;**404 Not Found**&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;很抱歉，您访问的页面不存在&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;center&gt;可能是输入地址有误或该地址已被删除&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>","more":"<p>根目录的配置项</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span> <span class=\"string\">要使用哪个请复制到根目录配置文件！</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">你的clientID</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">你的clientSecret</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">你的repo名</span>  <span class=\"comment\">#这个直接就是仓储名</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">你的GitHub名</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">[]</span> <span class=\"string\">至少填写你的GitHub名</span></span><br></pre></td></tr></table></figure>\n\n<p>clientID和clientSecret如何得到：</p>\n<ol>\n<li>先要有github账号， 点击 New OAuth App（后面这个链接）： <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a></li>\n<li>填写信息：<br>Application name 随便填，<br>Homepage URL 和 Authorization callback URL 都写你的 网址，我的是：<a href=\"https://luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io</a></li>\n</ol>\n<p>生成后，就会有clientID和clientSecret</p>\n<blockquote>\n<p>参考我的配置项</p>\n</blockquote>\n<p><a href=\"https://github.com/luoyunchong/hexo-blog/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog/blob/master/_config.yml</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitalk: </span><br><span class=\"line\">  clientID: 70ba179c7cf0f158ad7d</span><br><span class=\"line\">  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957</span><br><span class=\"line\">  repo: hexo-blog</span><br><span class=\"line\">  owner: luoyunchong</span><br><span class=\"line\">  admin: [luoyunchong]</span><br></pre></td></tr></table></figure>\n\n<p>这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND</p>\n<ul>\n<li>报错出现 Error: Validation Failed.<br><a href=\"https://github.com/gitalk/gitalk/issues/102\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/issues/102</a><br>总结主要的原因是<blockquote>\n<p>由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.</p>\n</blockquote>\n</li>\n</ul>\n<p>解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密</p>\n<p>我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span><br><span class=\"line\">    clientID: <span class=\"string\">\"&lt;%- config.gitalk.clientID %&gt;\"</span>,</span><br><span class=\"line\">    clientSecret: <span class=\"string\">\"&lt;%- config.gitalk.clientSecret %&gt;\"</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">\"&lt;%- config.gitalk.repo %&gt;\"</span>,</span><br><span class=\"line\">    owner: <span class=\"string\">\"&lt;%- config.gitalk.owner %&gt;\"</span>,</span><br><span class=\"line\">    admin: <span class=\"string\">\"&lt;%- config.gitalk.admin %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span>(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class=\"line\">      id: <span class=\"string\">\"&lt;%= page.gitalk.id %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">      id: md5(location.pathname),      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  gitalk.render(<span class=\"string\">'gitalk-container'</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最重要的是引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id: md5(location.pathname)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  id: /404</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>完整title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: page</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">body: [article, comments]</span><br><span class=\"line\">meta:</span><br><span class=\"line\">  header: false</span><br><span class=\"line\">  footer: false</span><br><span class=\"line\">sidebar: false</span><br><span class=\"line\">valine:</span><br><span class=\"line\">  path: /404.html</span><br><span class=\"line\">  placeholder: 请留言告诉我您要访问哪个页面找不到了</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;**404 Not Found**&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;很抱歉，您访问的页面不存在&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;center&gt;可能是输入地址有误或该地址已被删除&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"hexo-theme-material-x+gitalk","path":"2019/06/25/front-end/hexo-theme-material-x-gitalk/","eyeCatchImage":null,"excerpt":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>","date":"2019-06-25T05:57:09.000Z","pv":0,"totalPV":0,"categories":"hexo","tags":["hexo","material-x","gitalk"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"学习spring-boot","date":"2019-08-26T03:09:07.000Z","_content":"\n## springboot \n\n- annotation注解\n\n1. @RestController=@Controller+@ResponseBody是在RESTful Web服务中，基于sprinboot 2.0首选方法。\n\n<!-- more -->\n## 多环境配置\n在spring-boot中使用多环境配置，可自已定义application-{name}.properties\n- 生产环境（application-prod.properties）\n- 开发环境（application-dev.properties）\n\n在application.properties文件中指定此值为\nspring.profiles.active=dev,则会加载application-dev.properties文件中的配置项。\n在发布和本地运行测试时，只需要修改此值即可。\n\n更佳的方式，将此值设置为一个变量spring.profiles.active=@profiles.active@\n\npom.xml中配置如下\n```\n<!-- 在maven中添加如下配置 -->\n<profiles>\n    <profile>\n        <!-- 测试环境 -->\n        <id>dev</id>\n        <properties>\n            <profiles.active>dev</profiles.active>\n        </properties>\n    </profile>\n    <profile>\n        <!-- 生产环境 -->\n        <id>prod</id>\n        <properties>\n            <profiles.active>prod</profiles.active>\n        </properties>\n    </profile>\n</profiles>\n```\n在控制台上,则可通过-P指定参数，此prod与<id>prod</id>相同，\n```\nmvn clean package -Pprod \n```\n\n## 将spring-boot 项目 部署至ubuntu上\n- 安装jdk8，并验证安装是否正常\n```\nroot@ubuntu:/home/java# sudo apt-get install openjdk-8-jdk  \nroot@ubuntu:/home/java# java -version\nopenjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10)\nOpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)\n```\n\n以生产环境生成jar包\n1. -Pprod 指定pom.xml文件中的profiles.active的值为prod，即prod\n2. -Dmaven.test.skip=true 排除测试代码后进行打包\n```\nmvn clean package -Pprod -Dmaven.test.skip=true\n```\n\n使用xftp上传.jar压缩名\n- 部署运行命令\n```\nnohup java -jar secrets-0.0.1-SNAPSHOT.jar &\n```\n\n- 查看日志\n```\ntail -500f nohup.out\n```\n\n第二次发布时，需要先杀死上次运行的进程\n```\na.捕获上一个版本程序的进程 ps -ef|grep secrets-0.0.1-SNAPSHOT.jar\n\nb.杀死对应的进程 kill+进程号\n\nc.启动程序 nohup java -jar secrets-0.0.1-SNAPSHOT.jar &\n\nd.退出 ctrl + c\n\ne.查看日志 tail -500f nohup.out\n```\n\n## 拦截器中判断控制器中是否包含某个注解\n\n用于在控制器及方法是否需要登录\n\nUserLoginToken可用于方法、控制器上\n\n```\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface UserLoginToken {\n    boolean required() default true;\n}\n```\n\n```\n\npublic class AuthenticationInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object) throws Exception {\n        // 如果不是映射到方法直接通过\n        if(!(object instanceof HandlerMethod)){\n            return true;\n        }\n        HandlerMethod handlerMethod=(HandlerMethod)object;\n        Method method=handlerMethod.getMethod();\n\n        //检查有没有需要登录的注解\n        if (method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)||method.isAnnotationPresent(UserLoginToken.class)) {\n            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);\n            UserLoginToken classLoginToken=method.getDeclaringClass().getAnnotation(UserLoginToken.class);\n\n            if ((userLoginToken!=null&&userLoginToken.required())||(classLoginToken!=null&&classLoginToken.required())) {\n               \n                return true;\n            }\n        }\n        return true;\n    }\n}\n```\n\n验证此方法上的控制器是否包含UserLoginToken注解，\n```\nmethod.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)\n```\n验证此方法上是否包含UserLoginToken注解\n```\nmethod.isAnnotationPresent(UserLoginToken.class)\n```\n\n此控制器下的方法都需要登录\n```\n@UserLoginToken\n@RestController\n@RequestMapping(\"/safebox\")\npublic class SafeBoxController {\n    @Autowired\n    private SafeBoxRepository safeBoxRepository;\n    @Autowired\n    protected Mapper dozerMapper;\n\n    @GetMapping\n    public List<SafeBox> getSafeBoxs(String title,String userName,@CurrentUserAnno CurrentUser user){\n        int addUserId=user.getId();\n        return safeBoxRepository.selectSafeBoxs(addUserId,title,userName);\n    }\n    。。。其他方法\n}\n```\n\n\n## 参考资料\n\n- [SpringMVC拦截器中获得Controller方法名和注解信息（用于验证权限）](https://blog.csdn.net/howroad/article/details/80220320)\n- [IntelliJ IDEA 无法热加载自动更新](https://blog.csdn.net/t0404/article/details/80449716","source":"_posts/java/learn-spring-boot-begin.md","raw":"---\ntitle: 学习spring-boot\ndate: 2019-08-26 11:09:07\ntags:\n- spring-boot\ncategory:\n- Java\n---\n\n## springboot \n\n- annotation注解\n\n1. @RestController=@Controller+@ResponseBody是在RESTful Web服务中，基于sprinboot 2.0首选方法。\n\n<!-- more -->\n## 多环境配置\n在spring-boot中使用多环境配置，可自已定义application-{name}.properties\n- 生产环境（application-prod.properties）\n- 开发环境（application-dev.properties）\n\n在application.properties文件中指定此值为\nspring.profiles.active=dev,则会加载application-dev.properties文件中的配置项。\n在发布和本地运行测试时，只需要修改此值即可。\n\n更佳的方式，将此值设置为一个变量spring.profiles.active=@profiles.active@\n\npom.xml中配置如下\n```\n<!-- 在maven中添加如下配置 -->\n<profiles>\n    <profile>\n        <!-- 测试环境 -->\n        <id>dev</id>\n        <properties>\n            <profiles.active>dev</profiles.active>\n        </properties>\n    </profile>\n    <profile>\n        <!-- 生产环境 -->\n        <id>prod</id>\n        <properties>\n            <profiles.active>prod</profiles.active>\n        </properties>\n    </profile>\n</profiles>\n```\n在控制台上,则可通过-P指定参数，此prod与<id>prod</id>相同，\n```\nmvn clean package -Pprod \n```\n\n## 将spring-boot 项目 部署至ubuntu上\n- 安装jdk8，并验证安装是否正常\n```\nroot@ubuntu:/home/java# sudo apt-get install openjdk-8-jdk  \nroot@ubuntu:/home/java# java -version\nopenjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10)\nOpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)\n```\n\n以生产环境生成jar包\n1. -Pprod 指定pom.xml文件中的profiles.active的值为prod，即prod\n2. -Dmaven.test.skip=true 排除测试代码后进行打包\n```\nmvn clean package -Pprod -Dmaven.test.skip=true\n```\n\n使用xftp上传.jar压缩名\n- 部署运行命令\n```\nnohup java -jar secrets-0.0.1-SNAPSHOT.jar &\n```\n\n- 查看日志\n```\ntail -500f nohup.out\n```\n\n第二次发布时，需要先杀死上次运行的进程\n```\na.捕获上一个版本程序的进程 ps -ef|grep secrets-0.0.1-SNAPSHOT.jar\n\nb.杀死对应的进程 kill+进程号\n\nc.启动程序 nohup java -jar secrets-0.0.1-SNAPSHOT.jar &\n\nd.退出 ctrl + c\n\ne.查看日志 tail -500f nohup.out\n```\n\n## 拦截器中判断控制器中是否包含某个注解\n\n用于在控制器及方法是否需要登录\n\nUserLoginToken可用于方法、控制器上\n\n```\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface UserLoginToken {\n    boolean required() default true;\n}\n```\n\n```\n\npublic class AuthenticationInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object) throws Exception {\n        // 如果不是映射到方法直接通过\n        if(!(object instanceof HandlerMethod)){\n            return true;\n        }\n        HandlerMethod handlerMethod=(HandlerMethod)object;\n        Method method=handlerMethod.getMethod();\n\n        //检查有没有需要登录的注解\n        if (method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)||method.isAnnotationPresent(UserLoginToken.class)) {\n            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);\n            UserLoginToken classLoginToken=method.getDeclaringClass().getAnnotation(UserLoginToken.class);\n\n            if ((userLoginToken!=null&&userLoginToken.required())||(classLoginToken!=null&&classLoginToken.required())) {\n               \n                return true;\n            }\n        }\n        return true;\n    }\n}\n```\n\n验证此方法上的控制器是否包含UserLoginToken注解，\n```\nmethod.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)\n```\n验证此方法上是否包含UserLoginToken注解\n```\nmethod.isAnnotationPresent(UserLoginToken.class)\n```\n\n此控制器下的方法都需要登录\n```\n@UserLoginToken\n@RestController\n@RequestMapping(\"/safebox\")\npublic class SafeBoxController {\n    @Autowired\n    private SafeBoxRepository safeBoxRepository;\n    @Autowired\n    protected Mapper dozerMapper;\n\n    @GetMapping\n    public List<SafeBox> getSafeBoxs(String title,String userName,@CurrentUserAnno CurrentUser user){\n        int addUserId=user.getId();\n        return safeBoxRepository.selectSafeBoxs(addUserId,title,userName);\n    }\n    。。。其他方法\n}\n```\n\n\n## 参考资料\n\n- [SpringMVC拦截器中获得Controller方法名和注解信息（用于验证权限）](https://blog.csdn.net/howroad/article/details/80220320)\n- [IntelliJ IDEA 无法热加载自动更新](https://blog.csdn.net/t0404/article/details/80449716","slug":"java/learn-spring-boot-begin","published":1,"updated":"2019-10-08T04:21:13.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ylc003jm0twxdqyz4bb","content":"<h2 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h2><ul>\n<li>annotation注解</li>\n</ul>\n<ol>\n<li>@RestController=@Controller+@ResponseBody是在RESTful Web服务中，基于sprinboot 2.0首选方法。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>在spring-boot中使用多环境配置，可自已定义application-{name}.properties</p>\n<ul>\n<li>生产环境（application-prod.properties）</li>\n<li>开发环境（application-dev.properties）</li>\n</ul>\n<p>在application.properties文件中指定此值为<br>spring.profiles.active=dev,则会加载application-dev.properties文件中的配置项。<br>在发布和本地运行测试时，只需要修改此值即可。</p>\n<p>更佳的方式，将此值设置为一个变量spring.profiles.active=@profiles.active@</p>\n<p>pom.xml中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 在maven中添加如下配置 --&gt;</span><br><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">        &lt;!-- 测试环境 --&gt;</span><br><span class=\"line\">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">        &lt;properties&gt;</span><br><span class=\"line\">            &lt;profiles.active&gt;dev&lt;/profiles.active&gt;</span><br><span class=\"line\">        &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">        &lt;!-- 生产环境 --&gt;</span><br><span class=\"line\">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">        &lt;properties&gt;</span><br><span class=\"line\">            &lt;profiles.active&gt;prod&lt;/profiles.active&gt;</span><br><span class=\"line\">        &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在控制台上,则可通过-P指定参数，此prod与<id>prod</id>相同，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pprod</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将spring-boot-项目-部署至ubuntu上\"><a href=\"#将spring-boot-项目-部署至ubuntu上\" class=\"headerlink\" title=\"将spring-boot 项目 部署至ubuntu上\"></a>将spring-boot 项目 部署至ubuntu上</h2><ul>\n<li>安装jdk8，并验证安装是否正常<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/home/java# sudo apt-get install openjdk-8-jdk  </span><br><span class=\"line\">root@ubuntu:/home/java# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_222&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>以生产环境生成jar包</p>\n<ol>\n<li>-Pprod 指定pom.xml文件中的profiles.active的值为prod，即prod</li>\n<li>-Dmaven.test.skip=true 排除测试代码后进行打包<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pprod -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>使用xftp上传.jar压缩名</p>\n<ul>\n<li><p>部署运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java -jar secrets-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tail -500f nohup.out</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>第二次发布时，需要先杀死上次运行的进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a.捕获上一个版本程序的进程 ps -ef|grep secrets-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\"></span><br><span class=\"line\">b.杀死对应的进程 kill+进程号</span><br><span class=\"line\"></span><br><span class=\"line\">c.启动程序 nohup java -jar secrets-0.0.1-SNAPSHOT.jar &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">d.退出 ctrl + c</span><br><span class=\"line\"></span><br><span class=\"line\">e.查看日志 tail -500f nohup.out</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器中判断控制器中是否包含某个注解\"><a href=\"#拦截器中判断控制器中是否包含某个注解\" class=\"headerlink\" title=\"拦截器中判断控制器中是否包含某个注解\"></a>拦截器中判断控制器中是否包含某个注解</h2><p>用于在控制器及方法是否需要登录</p>\n<p>UserLoginToken可用于方法、控制器上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface UserLoginToken &#123;</span><br><span class=\"line\">    boolean required() default true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class AuthenticationInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object) throws Exception &#123;</span><br><span class=\"line\">        // 如果不是映射到方法直接通过</span><br><span class=\"line\">        if(!(object instanceof HandlerMethod))&#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HandlerMethod handlerMethod=(HandlerMethod)object;</span><br><span class=\"line\">        Method method=handlerMethod.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">        //检查有没有需要登录的注解</span><br><span class=\"line\">        if (method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)||method.isAnnotationPresent(UserLoginToken.class)) &#123;</span><br><span class=\"line\">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);</span><br><span class=\"line\">            UserLoginToken classLoginToken=method.getDeclaringClass().getAnnotation(UserLoginToken.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            if ((userLoginToken!=null&amp;&amp;userLoginToken.required())||(classLoginToken!=null&amp;&amp;classLoginToken.required())) &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>验证此方法上的控制器是否包含UserLoginToken注解，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)</span><br></pre></td></tr></table></figure>\n\n<p>验证此方法上是否包含UserLoginToken注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.isAnnotationPresent(UserLoginToken.class)</span><br></pre></td></tr></table></figure>\n\n<p>此控制器下的方法都需要登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@UserLoginToken</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/safebox&quot;)</span><br><span class=\"line\">public class SafeBoxController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SafeBoxRepository safeBoxRepository;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    protected Mapper dozerMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping</span><br><span class=\"line\">    public List&lt;SafeBox&gt; getSafeBoxs(String title,String userName,@CurrentUserAnno CurrentUser user)&#123;</span><br><span class=\"line\">        int addUserId=user.getId();</span><br><span class=\"line\">        return safeBoxRepository.selectSafeBoxs(addUserId,title,userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    。。。其他方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/howroad/article/details/80220320\" target=\"_blank\" rel=\"noopener\">SpringMVC拦截器中获得Controller方法名和注解信息（用于验证权限）</a></li>\n<li>[IntelliJ IDEA 无法热加载自动更新](<a href=\"https://blog.csdn.net/t0404/article/details/80449716\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/t0404/article/details/80449716</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h2><ul>\n<li>annotation注解</li>\n</ul>\n<ol>\n<li>@RestController=@Controller+@ResponseBody是在RESTful Web服务中，基于sprinboot 2.0首选方法。</li>\n</ol>","more":"<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>在spring-boot中使用多环境配置，可自已定义application-{name}.properties</p>\n<ul>\n<li>生产环境（application-prod.properties）</li>\n<li>开发环境（application-dev.properties）</li>\n</ul>\n<p>在application.properties文件中指定此值为<br>spring.profiles.active=dev,则会加载application-dev.properties文件中的配置项。<br>在发布和本地运行测试时，只需要修改此值即可。</p>\n<p>更佳的方式，将此值设置为一个变量spring.profiles.active=@profiles.active@</p>\n<p>pom.xml中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 在maven中添加如下配置 --&gt;</span><br><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">        &lt;!-- 测试环境 --&gt;</span><br><span class=\"line\">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">        &lt;properties&gt;</span><br><span class=\"line\">            &lt;profiles.active&gt;dev&lt;/profiles.active&gt;</span><br><span class=\"line\">        &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">        &lt;!-- 生产环境 --&gt;</span><br><span class=\"line\">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">        &lt;properties&gt;</span><br><span class=\"line\">            &lt;profiles.active&gt;prod&lt;/profiles.active&gt;</span><br><span class=\"line\">        &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在控制台上,则可通过-P指定参数，此prod与<id>prod</id>相同，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pprod</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将spring-boot-项目-部署至ubuntu上\"><a href=\"#将spring-boot-项目-部署至ubuntu上\" class=\"headerlink\" title=\"将spring-boot 项目 部署至ubuntu上\"></a>将spring-boot 项目 部署至ubuntu上</h2><ul>\n<li>安装jdk8，并验证安装是否正常<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/home/java# sudo apt-get install openjdk-8-jdk  </span><br><span class=\"line\">root@ubuntu:/home/java# java -version</span><br><span class=\"line\">openjdk version &quot;1.8.0_222&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>以生产环境生成jar包</p>\n<ol>\n<li>-Pprod 指定pom.xml文件中的profiles.active的值为prod，即prod</li>\n<li>-Dmaven.test.skip=true 排除测试代码后进行打包<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pprod -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>使用xftp上传.jar压缩名</p>\n<ul>\n<li><p>部署运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java -jar secrets-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tail -500f nohup.out</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>第二次发布时，需要先杀死上次运行的进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a.捕获上一个版本程序的进程 ps -ef|grep secrets-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\"></span><br><span class=\"line\">b.杀死对应的进程 kill+进程号</span><br><span class=\"line\"></span><br><span class=\"line\">c.启动程序 nohup java -jar secrets-0.0.1-SNAPSHOT.jar &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">d.退出 ctrl + c</span><br><span class=\"line\"></span><br><span class=\"line\">e.查看日志 tail -500f nohup.out</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器中判断控制器中是否包含某个注解\"><a href=\"#拦截器中判断控制器中是否包含某个注解\" class=\"headerlink\" title=\"拦截器中判断控制器中是否包含某个注解\"></a>拦截器中判断控制器中是否包含某个注解</h2><p>用于在控制器及方法是否需要登录</p>\n<p>UserLoginToken可用于方法、控制器上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface UserLoginToken &#123;</span><br><span class=\"line\">    boolean required() default true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class AuthenticationInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object) throws Exception &#123;</span><br><span class=\"line\">        // 如果不是映射到方法直接通过</span><br><span class=\"line\">        if(!(object instanceof HandlerMethod))&#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HandlerMethod handlerMethod=(HandlerMethod)object;</span><br><span class=\"line\">        Method method=handlerMethod.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">        //检查有没有需要登录的注解</span><br><span class=\"line\">        if (method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)||method.isAnnotationPresent(UserLoginToken.class)) &#123;</span><br><span class=\"line\">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);</span><br><span class=\"line\">            UserLoginToken classLoginToken=method.getDeclaringClass().getAnnotation(UserLoginToken.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            if ((userLoginToken!=null&amp;&amp;userLoginToken.required())||(classLoginToken!=null&amp;&amp;classLoginToken.required())) &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>验证此方法上的控制器是否包含UserLoginToken注解，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.getDeclaringClass().isAnnotationPresent(UserLoginToken.class)</span><br></pre></td></tr></table></figure>\n\n<p>验证此方法上是否包含UserLoginToken注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.isAnnotationPresent(UserLoginToken.class)</span><br></pre></td></tr></table></figure>\n\n<p>此控制器下的方法都需要登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@UserLoginToken</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/safebox&quot;)</span><br><span class=\"line\">public class SafeBoxController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SafeBoxRepository safeBoxRepository;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    protected Mapper dozerMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping</span><br><span class=\"line\">    public List&lt;SafeBox&gt; getSafeBoxs(String title,String userName,@CurrentUserAnno CurrentUser user)&#123;</span><br><span class=\"line\">        int addUserId=user.getId();</span><br><span class=\"line\">        return safeBoxRepository.selectSafeBoxs(addUserId,title,userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    。。。其他方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/howroad/article/details/80220320\" target=\"_blank\" rel=\"noopener\">SpringMVC拦截器中获得Controller方法名和注解信息（用于验证权限）</a></li>\n<li>[IntelliJ IDEA 无法热加载自动更新](<a href=\"https://blog.csdn.net/t0404/article/details/80449716\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/t0404/article/details/80449716</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"学习spring-boot","path":"2019/08/26/java/learn-spring-boot-begin/","eyeCatchImage":null,"excerpt":"<h2 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h2><ul>\n<li>annotation注解</li>\n</ul>\n<ol>\n<li>@RestController=@Controller+@ResponseBody是在RESTful Web服务中，基于sprinboot 2.0首选方法。</li>\n</ol>","date":"2019-08-26T03:09:07.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["spring-boot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".NET Core下集成七牛云下的对象存储","date":"2019-07-28T10:43:22.000Z","_content":"\n## 七牛云对象存储\n\n.NET Core下集成 七牛云下的对象存储\n\n## 开源地址\n[https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu)\n\n<!-- more -->\n\n## 集成类库\n|基础类库集成方案|开源地址|文档|说明|\n|---|---|---|---|\n|[Qiniu云对象存储](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore)|[.net](https://github.com/qiniu/csharp-sdk)/[.net core](https://github.com/Hello-Mango/MQiniu.Core)|[c# sdk](https://developer.qiniu.com/kodo/sdk/1237/csharp)|由于官网未支持. net core，所以 大家看[社区版解决方案](https://github.com/Hello-Mango/MQiniu.Core)|\n\n## 前提\n* 本地windows 10,安装 .net core 2.2+\n* Linux 服务器 Ubuntu Server 16+\n* 服务器安装了Docker\n* 本地xftp、xshell（这二个分别是windows传文件至linux，执行命令行。）\n## 准备\n在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（https://portal.qiniu.com/user/key）\nv* AK，SK分别代表：AccessKey/SecretKey\n* Bucket中的vant-ui，是创建对象存储时起的名字\n* PrefixPath中的值，随意字符串，前缀地址。\n* Host为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。\n## appsettings.json配置项\n```\n  \"Qiniu\": {\n    \"AK\": \"eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq\",\n    \"SK\": \"4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9\",\n    \"Bucket\": \"vant-ui\",\n    \"PrefixPath\": \"ui\",\n    \"Host\": \"http://pu5vnz60k.bkt.clouddn.com/\"\n  }\n```\n## 安装包\n\n```\nInstall-Package MQiniu.Core \n```\n## 代码解读\n配置swagger的过程就不说了，创建QiniuController\n```\n  /// <summary>\n/// 七牛云上传服务\n/// </summary>\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class QiniuController : ControllerBase\n{\n    private readonly IConfiguration _configuration;\n\n    public QiniuController(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    /// <summary>\n    /// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务\n    /// </summary>\n    /// <returns></returns>\n    [HttpGet(\"access_token\")]\n    public string GetAccessToken()\n    {\n        Mac mac = new Mac(_configuration[\"Qiniu:AK\"], _configuration[\"Qiniu:SK\"]);\n        PutPolicy putPolicy = new PutPolicy { Scope = _configuration[\"Qiniu:Bucket\"] };\n        return Auth.CreateUploadToken(mac, putPolicy.ToJsonString());\n    }\n\n    /// <summary>\n    /// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功\n    /// </summary>\n    /// <param name=\"file\">单个文件</param>\n    /// <returns>new { code = 200, data =\"七牛云文件地址，包括http://....mm.png\", msg = \"上传成功\" };</returns>\n    [HttpPost(\"upload\")]\n    public dynamic Upload(IFormFile file)\n    {\n        if (file.Length == 0)\n        {\n            return new { code = 1, msg = \"文件为空\" };\n        }\n\n        FormUploader upload = new FormUploader(new Config()\n        {\n            Zone = Zone.ZONE_CN_South,//华南 \n            UseHttps = true\n        });\n\n        var fileName = ContentDispositionHeaderValue\n            .Parse(file.ContentDisposition)\n            .FileName.Trim();\n\n        string qiniuName = _configuration[\"Qiniu:PrefixPath\"] + \"/\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffffff\") + fileName;\n        Stream stream = file.OpenReadStream();\n        HttpResult result = upload.UploadStream(stream, qiniuName, GetAccessToken(), null);\n\n        if (result.Code == 200)\n        {\n            return new { code = 200, data = _configuration[\"Qiniu:Host\"] + qiniuName, msg = \"上传成功\" };\n        }\n\n        return new { code = 1, msg = \"上传失败\" };\n    }\n}\n\n```\n\n\nUpload方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改Zone所在地区的枚举值即可。\n```\nFormUploader upload = new FormUploader(new Config()\n{\n    Zone = Zone.ZONE_CN_South,//华南 \n    UseHttps = true\n});\n\n```\n\n## 发布至Linux下的Docker\n双击 publish.bat，生成的文件夹为如下：\n\n<fancybox>![](https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg)</fancybox>\n\n修改项目名为qiniu-web，复制 至linux服务器中，（xftp工具）\n<fancybox>[![image](https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](https://ae01.alicdn.com/kf/Heb3f16360c6b4cf1b5b4eeaa90f02969r.jpg)</fancybox>\n\n使用xshell远程登录后，进入root权限。\n```bash\nroot@VM-37-104-ubuntu:/home/ubuntu/# sudo su\nroot@VM-37-104-ubuntu:/home/ubuntu/# cd qiniu-web\n```\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n\n-d 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n\n```bash\ndocker build -t igeekfan/qiniu .     #生成images\ndocker run -d -p 5000:80 igeekfan/qiniu  # 生成 container 并运行在5000端口\n```\n此时打开 浏览器， ip+端口5000即可访问服务，请加/swagger。\n\n本项目已部署至服务器 [http://122.152.192.161:5000/swagger/index.html](http://122.152.192.161:5000/swagger/index.html)\n\n## 重新部署\n*　删除启动后的容器。先stop，再删除镜像，id是第一列，输入前面几个字符即可。\n```\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES\nb2c6f61637d4        igeekfan/qiniu        \"dotnet Qiniu.Web.dll\"   3 minutes ago       Up 3 minutes        0.0.0.0:5000->80/tcp     compassionate_williamson\n0a5e0deb3b2e        portainer/portainer   \"/portainer\"             7 weeks ago         Up 3 days           0.0.0.0:9000->9000/tcp   prtainer\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker stop b2c\nb2c\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker rm b2c\nb2c\n```\n\n- 删除之前的镜像\n\n```\ndocker rmi igeekfan/qiniu  #删除igeekfan/qiniu镜像\n```\n想要重新部署则再走上面部署即可。\n\n### 参考如下命令\n[https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/](https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/)\n```\ndocker images  # 查看所有镜像\ndocker ps -a #所有正在运行的容器Container\n\ndocker stop 容器id #终止容器\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rm 容器id   #删除容器\n```\n\n##  运行结果\n<fancybox>![](https://ae01.alicdn.com/kf/H2d84f03351814b1b90739be2477f0a05Q.jpg)</fancybox>\n\n\n## 参考\n\n- .NET Core版本七牛云SDK使用[https://www.cnblogs.com/OMango/p/8447480.html](https://www.cnblogs.com/OMango/p/8447480.html)\n- .NET Core部署至Linux 下的Docker [http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/](http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/)\n\n\n<RightMenu />","source":"_posts/dotnetcore/Qiniu-Object-Storage.md","raw":"---\ntitle: .NET Core下集成七牛云下的对象存储\ndate: 2019-7-28 18:43:22\n# top: 近期更新\ntags:\n- 对象存储\ncategory:\n- .NET Core\n---\n\n## 七牛云对象存储\n\n.NET Core下集成 七牛云下的对象存储\n\n## 开源地址\n[https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu)\n\n<!-- more -->\n\n## 集成类库\n|基础类库集成方案|开源地址|文档|说明|\n|---|---|---|---|\n|[Qiniu云对象存储](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore)|[.net](https://github.com/qiniu/csharp-sdk)/[.net core](https://github.com/Hello-Mango/MQiniu.Core)|[c# sdk](https://developer.qiniu.com/kodo/sdk/1237/csharp)|由于官网未支持. net core，所以 大家看[社区版解决方案](https://github.com/Hello-Mango/MQiniu.Core)|\n\n## 前提\n* 本地windows 10,安装 .net core 2.2+\n* Linux 服务器 Ubuntu Server 16+\n* 服务器安装了Docker\n* 本地xftp、xshell（这二个分别是windows传文件至linux，执行命令行。）\n## 准备\n在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（https://portal.qiniu.com/user/key）\nv* AK，SK分别代表：AccessKey/SecretKey\n* Bucket中的vant-ui，是创建对象存储时起的名字\n* PrefixPath中的值，随意字符串，前缀地址。\n* Host为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。\n## appsettings.json配置项\n```\n  \"Qiniu\": {\n    \"AK\": \"eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq\",\n    \"SK\": \"4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9\",\n    \"Bucket\": \"vant-ui\",\n    \"PrefixPath\": \"ui\",\n    \"Host\": \"http://pu5vnz60k.bkt.clouddn.com/\"\n  }\n```\n## 安装包\n\n```\nInstall-Package MQiniu.Core \n```\n## 代码解读\n配置swagger的过程就不说了，创建QiniuController\n```\n  /// <summary>\n/// 七牛云上传服务\n/// </summary>\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class QiniuController : ControllerBase\n{\n    private readonly IConfiguration _configuration;\n\n    public QiniuController(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    /// <summary>\n    /// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务\n    /// </summary>\n    /// <returns></returns>\n    [HttpGet(\"access_token\")]\n    public string GetAccessToken()\n    {\n        Mac mac = new Mac(_configuration[\"Qiniu:AK\"], _configuration[\"Qiniu:SK\"]);\n        PutPolicy putPolicy = new PutPolicy { Scope = _configuration[\"Qiniu:Bucket\"] };\n        return Auth.CreateUploadToken(mac, putPolicy.ToJsonString());\n    }\n\n    /// <summary>\n    /// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功\n    /// </summary>\n    /// <param name=\"file\">单个文件</param>\n    /// <returns>new { code = 200, data =\"七牛云文件地址，包括http://....mm.png\", msg = \"上传成功\" };</returns>\n    [HttpPost(\"upload\")]\n    public dynamic Upload(IFormFile file)\n    {\n        if (file.Length == 0)\n        {\n            return new { code = 1, msg = \"文件为空\" };\n        }\n\n        FormUploader upload = new FormUploader(new Config()\n        {\n            Zone = Zone.ZONE_CN_South,//华南 \n            UseHttps = true\n        });\n\n        var fileName = ContentDispositionHeaderValue\n            .Parse(file.ContentDisposition)\n            .FileName.Trim();\n\n        string qiniuName = _configuration[\"Qiniu:PrefixPath\"] + \"/\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffffff\") + fileName;\n        Stream stream = file.OpenReadStream();\n        HttpResult result = upload.UploadStream(stream, qiniuName, GetAccessToken(), null);\n\n        if (result.Code == 200)\n        {\n            return new { code = 200, data = _configuration[\"Qiniu:Host\"] + qiniuName, msg = \"上传成功\" };\n        }\n\n        return new { code = 1, msg = \"上传失败\" };\n    }\n}\n\n```\n\n\nUpload方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改Zone所在地区的枚举值即可。\n```\nFormUploader upload = new FormUploader(new Config()\n{\n    Zone = Zone.ZONE_CN_South,//华南 \n    UseHttps = true\n});\n\n```\n\n## 发布至Linux下的Docker\n双击 publish.bat，生成的文件夹为如下：\n\n<fancybox>![](https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg)</fancybox>\n\n修改项目名为qiniu-web，复制 至linux服务器中，（xftp工具）\n<fancybox>[![image](https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](https://ae01.alicdn.com/kf/Heb3f16360c6b4cf1b5b4eeaa90f02969r.jpg)</fancybox>\n\n使用xshell远程登录后，进入root权限。\n```bash\nroot@VM-37-104-ubuntu:/home/ubuntu/# sudo su\nroot@VM-37-104-ubuntu:/home/ubuntu/# cd qiniu-web\n```\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n\n-d 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n\n```bash\ndocker build -t igeekfan/qiniu .     #生成images\ndocker run -d -p 5000:80 igeekfan/qiniu  # 生成 container 并运行在5000端口\n```\n此时打开 浏览器， ip+端口5000即可访问服务，请加/swagger。\n\n本项目已部署至服务器 [http://122.152.192.161:5000/swagger/index.html](http://122.152.192.161:5000/swagger/index.html)\n\n## 重新部署\n*　删除启动后的容器。先stop，再删除镜像，id是第一列，输入前面几个字符即可。\n```\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES\nb2c6f61637d4        igeekfan/qiniu        \"dotnet Qiniu.Web.dll\"   3 minutes ago       Up 3 minutes        0.0.0.0:5000->80/tcp     compassionate_williamson\n0a5e0deb3b2e        portainer/portainer   \"/portainer\"             7 weeks ago         Up 3 days           0.0.0.0:9000->9000/tcp   prtainer\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker stop b2c\nb2c\nroot@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker rm b2c\nb2c\n```\n\n- 删除之前的镜像\n\n```\ndocker rmi igeekfan/qiniu  #删除igeekfan/qiniu镜像\n```\n想要重新部署则再走上面部署即可。\n\n### 参考如下命令\n[https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/](https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/)\n```\ndocker images  # 查看所有镜像\ndocker ps -a #所有正在运行的容器Container\n\ndocker stop 容器id #终止容器\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rm 容器id   #删除容器\n```\n\n##  运行结果\n<fancybox>![](https://ae01.alicdn.com/kf/H2d84f03351814b1b90739be2477f0a05Q.jpg)</fancybox>\n\n\n## 参考\n\n- .NET Core版本七牛云SDK使用[https://www.cnblogs.com/OMango/p/8447480.html](https://www.cnblogs.com/OMango/p/8447480.html)\n- .NET Core部署至Linux 下的Docker [http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/](http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/)\n\n\n<RightMenu />","slug":"dotnetcore/Qiniu-Object-Storage","published":1,"updated":"2019-10-08T04:21:13.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ylh003mm0twdjsmz53h","content":"<h2 id=\"七牛云对象存储\"><a href=\"#七牛云对象存储\" class=\"headerlink\" title=\"七牛云对象存储\"></a>七牛云对象存储</h2><p>.NET Core下集成 七牛云下的对象存储</p>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"集成类库\"><a href=\"#集成类库\" class=\"headerlink\" title=\"集成类库\"></a>集成类库</h2><table>\n<thead>\n<tr>\n<th>基础类库集成方案</th>\n<th>开源地址</th>\n<th>文档</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore\" target=\"_blank\" rel=\"noopener\">Qiniu云对象存储</a></td>\n<td><a href=\"https://github.com/qiniu/csharp-sdk\" target=\"_blank\" rel=\"noopener\">.net</a>/<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener\">.net core</a></td>\n<td><a href=\"https://developer.qiniu.com/kodo/sdk/1237/csharp\" target=\"_blank\" rel=\"noopener\">c# sdk</a></td>\n<td>由于官网未支持. net core，所以 大家看<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener\">社区版解决方案</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>本地windows 10,安装 .net core 2.2+</li>\n<li>Linux 服务器 Ubuntu Server 16+</li>\n<li>服务器安装了Docker</li>\n<li>本地xftp、xshell（这二个分别是windows传文件至linux，执行命令行。）<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2>在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（<a href=\"https://portal.qiniu.com/user/key）\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/user/key）</a><br>v* AK，SK分别代表：AccessKey/SecretKey</li>\n<li>Bucket中的vant-ui，是创建对象存储时起的名字</li>\n<li>PrefixPath中的值，随意字符串，前缀地址。</li>\n<li>Host为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。<h2 id=\"appsettings-json配置项\"><a href=\"#appsettings-json配置项\" class=\"headerlink\" title=\"appsettings.json配置项\"></a>appsettings.json配置项</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Qiniu&quot;: &#123;</span><br><span class=\"line\">  &quot;AK&quot;: &quot;eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq&quot;,</span><br><span class=\"line\">  &quot;SK&quot;: &quot;4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9&quot;,</span><br><span class=\"line\">  &quot;Bucket&quot;: &quot;vant-ui&quot;,</span><br><span class=\"line\">  &quot;PrefixPath&quot;: &quot;ui&quot;,</span><br><span class=\"line\">  &quot;Host&quot;: &quot;http://pu5vnz60k.bkt.clouddn.com/&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package MQiniu.Core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解读\"><a href=\"#代码解读\" class=\"headerlink\" title=\"代码解读\"></a>代码解读</h2><p>配置swagger的过程就不说了，创建QiniuController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  /// &lt;summary&gt;</span><br><span class=\"line\">/// 七牛云上传服务</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">[Route(&quot;api/[controller]&quot;)]</span><br><span class=\"line\">[ApiController]</span><br><span class=\"line\">public class QiniuController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    public QiniuController(IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    [HttpGet(&quot;access_token&quot;)]</span><br><span class=\"line\">    public string GetAccessToken()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mac mac = new Mac(_configuration[&quot;Qiniu:AK&quot;], _configuration[&quot;Qiniu:SK&quot;]);</span><br><span class=\"line\">        PutPolicy putPolicy = new PutPolicy &#123; Scope = _configuration[&quot;Qiniu:Bucket&quot;] &#125;;</span><br><span class=\"line\">        return Auth.CreateUploadToken(mac, putPolicy.ToJsonString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;file&quot;&gt;单个文件&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;new &#123; code = 200, data =&quot;七牛云文件地址，包括http://....mm.png&quot;, msg = &quot;上传成功&quot; &#125;;&lt;/returns&gt;</span><br><span class=\"line\">    [HttpPost(&quot;upload&quot;)]</span><br><span class=\"line\">    public dynamic Upload(IFormFile file)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (file.Length == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new &#123; code = 1, msg = &quot;文件为空&quot; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        FormUploader upload = new FormUploader(new Config()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zone = Zone.ZONE_CN_South,//华南 </span><br><span class=\"line\">            UseHttps = true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var fileName = ContentDispositionHeaderValue</span><br><span class=\"line\">            .Parse(file.ContentDisposition)</span><br><span class=\"line\">            .FileName.Trim();</span><br><span class=\"line\"></span><br><span class=\"line\">        string qiniuName = _configuration[&quot;Qiniu:PrefixPath&quot;] + &quot;/&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmssffffff&quot;) + fileName;</span><br><span class=\"line\">        Stream stream = file.OpenReadStream();</span><br><span class=\"line\">        HttpResult result = upload.UploadStream(stream, qiniuName, GetAccessToken(), null);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (result.Code == 200)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new &#123; code = 200, data = _configuration[&quot;Qiniu:Host&quot;] + qiniuName, msg = &quot;上传成功&quot; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new &#123; code = 1, msg = &quot;上传失败&quot; &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Upload方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改Zone所在地区的枚举值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FormUploader upload = new FormUploader(new Config()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zone = Zone.ZONE_CN_South,//华南 </span><br><span class=\"line\">    UseHttps = true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布至Linux下的Docker\"><a href=\"#发布至Linux下的Docker\" class=\"headerlink\" title=\"发布至Linux下的Docker\"></a>发布至Linux下的Docker</h2><p>双击 publish.bat，生成的文件夹为如下：</p>\n<p><fancybox><img src=\"https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg\" alt></fancybox></p>\n<p>修改项目名为qiniu-web，复制 至linux服务器中，（xftp工具）<br><fancybox><a href=\"https://ae01.alicdn.com/kf/Heb3f16360c6b4cf1b5b4eeaa90f02969r.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></a></fancybox></p>\n<p>使用xshell远程登录后，进入root权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/<span class=\"comment\"># sudo su</span></span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/<span class=\"comment\"># cd qiniu-web</span></span><br></pre></td></tr></table></figure>\n\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p>-d 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t igeekfan/qiniu .     <span class=\"comment\">#生成images</span></span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/qiniu  <span class=\"comment\"># 生成 container 并运行在5000端口</span></span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务，请加/swagger。</p>\n<p>本项目已部署至服务器 <a href=\"http://122.152.192.161:5000/swagger/index.html\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:5000/swagger/index.html</a></p>\n<h2 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h2><p>*　删除启动后的容器。先stop，再删除镜像，id是第一列，输入前面几个字符即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">b2c6f61637d4        igeekfan/qiniu        &quot;dotnet Qiniu.Web.dll&quot;   3 minutes ago       Up 3 minutes        0.0.0.0:5000-&gt;80/tcp     compassionate_williamson</span><br><span class=\"line\">0a5e0deb3b2e        portainer/portainer   &quot;/portainer&quot;             7 weeks ago         Up 3 days           0.0.0.0:9000-&gt;9000/tcp   prtainer</span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker stop b2c</span><br><span class=\"line\">b2c</span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker rm b2c</span><br><span class=\"line\">b2c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除之前的镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi igeekfan/qiniu  #删除igeekfan/qiniu镜像</span><br></pre></td></tr></table></figure>\n\n<p>想要重新部署则再走上面部署即可。</p>\n<h3 id=\"参考如下命令\"><a href=\"#参考如下命令\" class=\"headerlink\" title=\"参考如下命令\"></a>参考如下命令</h3><p><a href=\"https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/\">https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop 容器id #终止容器</span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><fancybox><img src=\"https://ae01.alicdn.com/kf/H2d84f03351814b1b90739be2477f0a05Q.jpg\" alt></fancybox></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>.NET Core版本七牛云SDK使用<a href=\"https://www.cnblogs.com/OMango/p/8447480.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/OMango/p/8447480.html</a></li>\n<li>.NET Core部署至Linux 下的Docker <a href=\"http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/\">http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/</a></li>\n</ul>\n<rightmenu></rightmenu>","site":{"data":{}},"excerpt":"<h2 id=\"七牛云对象存储\"><a href=\"#七牛云对象存储\" class=\"headerlink\" title=\"七牛云对象存储\"></a>七牛云对象存储</h2><p>.NET Core下集成 七牛云下的对象存储</p>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu</a></p>","more":"<h2 id=\"集成类库\"><a href=\"#集成类库\" class=\"headerlink\" title=\"集成类库\"></a>集成类库</h2><table>\n<thead>\n<tr>\n<th>基础类库集成方案</th>\n<th>开源地址</th>\n<th>文档</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore\" target=\"_blank\" rel=\"noopener\">Qiniu云对象存储</a></td>\n<td><a href=\"https://github.com/qiniu/csharp-sdk\" target=\"_blank\" rel=\"noopener\">.net</a>/<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener\">.net core</a></td>\n<td><a href=\"https://developer.qiniu.com/kodo/sdk/1237/csharp\" target=\"_blank\" rel=\"noopener\">c# sdk</a></td>\n<td>由于官网未支持. net core，所以 大家看<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener\">社区版解决方案</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>本地windows 10,安装 .net core 2.2+</li>\n<li>Linux 服务器 Ubuntu Server 16+</li>\n<li>服务器安装了Docker</li>\n<li>本地xftp、xshell（这二个分别是windows传文件至linux，执行命令行。）<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2>在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（<a href=\"https://portal.qiniu.com/user/key）\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/user/key）</a><br>v* AK，SK分别代表：AccessKey/SecretKey</li>\n<li>Bucket中的vant-ui，是创建对象存储时起的名字</li>\n<li>PrefixPath中的值，随意字符串，前缀地址。</li>\n<li>Host为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。<h2 id=\"appsettings-json配置项\"><a href=\"#appsettings-json配置项\" class=\"headerlink\" title=\"appsettings.json配置项\"></a>appsettings.json配置项</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Qiniu&quot;: &#123;</span><br><span class=\"line\">  &quot;AK&quot;: &quot;eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq&quot;,</span><br><span class=\"line\">  &quot;SK&quot;: &quot;4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9&quot;,</span><br><span class=\"line\">  &quot;Bucket&quot;: &quot;vant-ui&quot;,</span><br><span class=\"line\">  &quot;PrefixPath&quot;: &quot;ui&quot;,</span><br><span class=\"line\">  &quot;Host&quot;: &quot;http://pu5vnz60k.bkt.clouddn.com/&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package MQiniu.Core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解读\"><a href=\"#代码解读\" class=\"headerlink\" title=\"代码解读\"></a>代码解读</h2><p>配置swagger的过程就不说了，创建QiniuController</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  /// &lt;summary&gt;</span><br><span class=\"line\">/// 七牛云上传服务</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">[Route(&quot;api/[controller]&quot;)]</span><br><span class=\"line\">[ApiController]</span><br><span class=\"line\">public class QiniuController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    public QiniuController(IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    [HttpGet(&quot;access_token&quot;)]</span><br><span class=\"line\">    public string GetAccessToken()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mac mac = new Mac(_configuration[&quot;Qiniu:AK&quot;], _configuration[&quot;Qiniu:SK&quot;]);</span><br><span class=\"line\">        PutPolicy putPolicy = new PutPolicy &#123; Scope = _configuration[&quot;Qiniu:Bucket&quot;] &#125;;</span><br><span class=\"line\">        return Auth.CreateUploadToken(mac, putPolicy.ToJsonString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;file&quot;&gt;单个文件&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;new &#123; code = 200, data =&quot;七牛云文件地址，包括http://....mm.png&quot;, msg = &quot;上传成功&quot; &#125;;&lt;/returns&gt;</span><br><span class=\"line\">    [HttpPost(&quot;upload&quot;)]</span><br><span class=\"line\">    public dynamic Upload(IFormFile file)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (file.Length == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new &#123; code = 1, msg = &quot;文件为空&quot; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        FormUploader upload = new FormUploader(new Config()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Zone = Zone.ZONE_CN_South,//华南 </span><br><span class=\"line\">            UseHttps = true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var fileName = ContentDispositionHeaderValue</span><br><span class=\"line\">            .Parse(file.ContentDisposition)</span><br><span class=\"line\">            .FileName.Trim();</span><br><span class=\"line\"></span><br><span class=\"line\">        string qiniuName = _configuration[&quot;Qiniu:PrefixPath&quot;] + &quot;/&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmssffffff&quot;) + fileName;</span><br><span class=\"line\">        Stream stream = file.OpenReadStream();</span><br><span class=\"line\">        HttpResult result = upload.UploadStream(stream, qiniuName, GetAccessToken(), null);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (result.Code == 200)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new &#123; code = 200, data = _configuration[&quot;Qiniu:Host&quot;] + qiniuName, msg = &quot;上传成功&quot; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return new &#123; code = 1, msg = &quot;上传失败&quot; &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Upload方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改Zone所在地区的枚举值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FormUploader upload = new FormUploader(new Config()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Zone = Zone.ZONE_CN_South,//华南 </span><br><span class=\"line\">    UseHttps = true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布至Linux下的Docker\"><a href=\"#发布至Linux下的Docker\" class=\"headerlink\" title=\"发布至Linux下的Docker\"></a>发布至Linux下的Docker</h2><p>双击 publish.bat，生成的文件夹为如下：</p>\n<p><fancybox><img src=\"https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg\" alt></fancybox></p>\n<p>修改项目名为qiniu-web，复制 至linux服务器中，（xftp工具）<br><fancybox><a href=\"https://ae01.alicdn.com/kf/Heb3f16360c6b4cf1b5b4eeaa90f02969r.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></a></fancybox></p>\n<p>使用xshell远程登录后，进入root权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/<span class=\"comment\"># sudo su</span></span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/<span class=\"comment\"># cd qiniu-web</span></span><br></pre></td></tr></table></figure>\n\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p>-d 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t igeekfan/qiniu .     <span class=\"comment\">#生成images</span></span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/qiniu  <span class=\"comment\"># 生成 container 并运行在5000端口</span></span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务，请加/swagger。</p>\n<p>本项目已部署至服务器 <a href=\"http://122.152.192.161:5000/swagger/index.html\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:5000/swagger/index.html</a></p>\n<h2 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h2><p>*　删除启动后的容器。先stop，再删除镜像，id是第一列，输入前面几个字符即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">b2c6f61637d4        igeekfan/qiniu        &quot;dotnet Qiniu.Web.dll&quot;   3 minutes ago       Up 3 minutes        0.0.0.0:5000-&gt;80/tcp     compassionate_williamson</span><br><span class=\"line\">0a5e0deb3b2e        portainer/portainer   &quot;/portainer&quot;             7 weeks ago         Up 3 days           0.0.0.0:9000-&gt;9000/tcp   prtainer</span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker stop b2c</span><br><span class=\"line\">b2c</span><br><span class=\"line\">root@VM-37-104-ubuntu:/home/ubuntu/qiniu-web# docker rm b2c</span><br><span class=\"line\">b2c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除之前的镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi igeekfan/qiniu  #删除igeekfan/qiniu镜像</span><br></pre></td></tr></table></figure>\n\n<p>想要重新部署则再走上面部署即可。</p>\n<h3 id=\"参考如下命令\"><a href=\"#参考如下命令\" class=\"headerlink\" title=\"参考如下命令\"></a>参考如下命令</h3><p><a href=\"https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/\">https://blog.igeekfan.cn/2019/06/10/back-end/Docker-nginx-Learn/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop 容器id #终止容器</span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><fancybox><img src=\"https://ae01.alicdn.com/kf/H2d84f03351814b1b90739be2477f0a05Q.jpg\" alt></fancybox></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>.NET Core版本七牛云SDK使用<a href=\"https://www.cnblogs.com/OMango/p/8447480.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/OMango/p/8447480.html</a></li>\n<li>.NET Core部署至Linux 下的Docker <a href=\"http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/\">http://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/</a></li>\n</ul>\n<rightmenu></rightmenu>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":".NET Core下集成七牛云下的对象存储","path":"2019/07/28/dotnetcore/Qiniu-Object-Storage/","eyeCatchImage":"https://ae01.alicdn.com/kf/Hb55f140a2c614cc5a3f98ec62e2f00b2B.jpg","excerpt":"<h2 id=\"七牛云对象存储\"><a href=\"#七牛云对象存储\" class=\"headerlink\" title=\"七牛云对象存储\"></a>七牛云对象存储</h2><p>.NET Core下集成 七牛云下的对象存储</p>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-qiniu</a></p>","date":"2019-07-28T10:43:22.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["对象存储"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"lin-cms-dotnetcore的开源之路","date":"2019-10-08T04:44:22.000Z","_content":"\n\n## 开源lin-cms-dotnetcore\n- 地址：https://github.com/luoyunchong/lin-cms-dotnetcore\n\n1.什么是cms？\n\nContent Management System，内容管理系统。\n\n2.dotnetcore是什么\n\n.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序。跨平台，支持Linux \n- 更多功能（自定义扩展-模块系统）\n<!-- more -->\n3.lin-cms 是什么\n\nLin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin\n\n4.lin-cms-dotnetcore有哪些特点？\n\n前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。\n- 用户管理、分组管理、分组权限管理、日志系统、文件上传等\n\n## 设计如下\n#### 字典管理\nBaseType 1 对BaseItem多。\n如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。\n我们使用BaseType、BaseItem实现。\nBaseType中TypeCode为tag,FullName为标签，id为1时。\nBaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。\n\n另Tag与Article的关联表，需要另设计一个表。\n\n当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。\n我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。\nBaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。\n\n1. 表结构\n\n#### base_type （字典类别管理）\n| 字段      | 类型        | 备注     |\n| --------- | ----------- | -------- |\n| id        | int         |\n| type_code | varchar(50) | 类别编码 |\n| full_name | varchar(50) | 全称     |\n| sort_code | int         | 排序码   |\n\n#### base_type （字典管理）\n| 字段         | 类型        | 备注                      |\n| ------------ | ----------- | ------------------------- |\n| id           | int         |\n| base_type_id | int         | 类别id(关联base_type的id) |\n| item_code    | varchar(50) | 字典编码                  |\n| item_name    | varchar(50) | 字典全称                  |\n| sort_code    | int         | 排序码                    |\n\n\n## 前端cms\n扩展实现一个博客，项目地址：https://github.com/luoyunchong/lin-cms-vue\n\n## 实现功能如下：\n- 文章类别管理(编码为Article.Classify的字典值)\n- 标签管理(编码为Article.Tag的字典值)\n- 留言板(Comment表ArticleId为0)\n- 文章管理(Artilce)\n   - 点赞\n- 评论管理(Comment表ArticleId关联Article)\n   - 后台审核\n   - 回复评论\n   - 删除\n","source":"_posts/lin-cms-dotnetcore/open-source-begin.md","raw":"---\ntitle: lin-cms-dotnetcore的开源之路\ndate: 2019-10-8 12:44:22\ntags:\n- 开源\n- .NET Core\n- lin-cms\ncategory:\n- lin-cms-dotnetcore\n---\n\n\n## 开源lin-cms-dotnetcore\n- 地址：https://github.com/luoyunchong/lin-cms-dotnetcore\n\n1.什么是cms？\n\nContent Management System，内容管理系统。\n\n2.dotnetcore是什么\n\n.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序。跨平台，支持Linux \n- 更多功能（自定义扩展-模块系统）\n<!-- more -->\n3.lin-cms 是什么\n\nLin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin\n\n4.lin-cms-dotnetcore有哪些特点？\n\n前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。\n- 用户管理、分组管理、分组权限管理、日志系统、文件上传等\n\n## 设计如下\n#### 字典管理\nBaseType 1 对BaseItem多。\n如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。\n我们使用BaseType、BaseItem实现。\nBaseType中TypeCode为tag,FullName为标签，id为1时。\nBaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。\n\n另Tag与Article的关联表，需要另设计一个表。\n\n当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。\n我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。\nBaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。\n\n1. 表结构\n\n#### base_type （字典类别管理）\n| 字段      | 类型        | 备注     |\n| --------- | ----------- | -------- |\n| id        | int         |\n| type_code | varchar(50) | 类别编码 |\n| full_name | varchar(50) | 全称     |\n| sort_code | int         | 排序码   |\n\n#### base_type （字典管理）\n| 字段         | 类型        | 备注                      |\n| ------------ | ----------- | ------------------------- |\n| id           | int         |\n| base_type_id | int         | 类别id(关联base_type的id) |\n| item_code    | varchar(50) | 字典编码                  |\n| item_name    | varchar(50) | 字典全称                  |\n| sort_code    | int         | 排序码                    |\n\n\n## 前端cms\n扩展实现一个博客，项目地址：https://github.com/luoyunchong/lin-cms-vue\n\n## 实现功能如下：\n- 文章类别管理(编码为Article.Classify的字典值)\n- 标签管理(编码为Article.Tag的字典值)\n- 留言板(Comment表ArticleId为0)\n- 文章管理(Artilce)\n   - 点赞\n- 评论管理(Comment表ArticleId关联Article)\n   - 后台审核\n   - 回复评论\n   - 删除\n","slug":"lin-cms-dotnetcore/open-source-begin","published":1,"updated":"2019-12-09T11:16:05.050Z","_id":"ck2362ylk003nm0twwwyrgxw8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"开源lin-cms-dotnetcore\"><a href=\"#开源lin-cms-dotnetcore\" class=\"headerlink\" title=\"开源lin-cms-dotnetcore\"></a>开源lin-cms-dotnetcore</h2><ul>\n<li>地址：<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n<p>1.什么是cms？</p>\n<p>Content Management System，内容管理系统。</p>\n<p>2.dotnetcore是什么</p>\n<p>.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序。跨平台，支持Linux </p>\n<ul>\n<li>更多功能（自定义扩展-模块系统）<a id=\"more\"></a></li>\n</ul>\n<p>3.lin-cms 是什么</p>\n<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin</p>\n<p>4.lin-cms-dotnetcore有哪些特点？</p>\n<p>前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。</p>\n<ul>\n<li>用户管理、分组管理、分组权限管理、日志系统、文件上传等</li>\n</ul>\n<h2 id=\"设计如下\"><a href=\"#设计如下\" class=\"headerlink\" title=\"设计如下\"></a>设计如下</h2><h4 id=\"字典管理\"><a href=\"#字典管理\" class=\"headerlink\" title=\"字典管理\"></a>字典管理</h4><p>BaseType 1 对BaseItem多。<br>如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。<br>我们使用BaseType、BaseItem实现。<br>BaseType中TypeCode为tag,FullName为标签，id为1时。<br>BaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。</p>\n<p>另Tag与Article的关联表，需要另设计一个表。</p>\n<p>当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。<br>我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。<br>BaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>\n<ol>\n<li>表结构</li>\n</ol>\n<h4 id=\"base-type-（字典类别管理）\"><a href=\"#base-type-（字典类别管理）\" class=\"headerlink\" title=\"base_type （字典类别管理）\"></a>base_type （字典类别管理）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>type_code</td>\n<td>varchar(50)</td>\n<td>类别编码</td>\n</tr>\n<tr>\n<td>full_name</td>\n<td>varchar(50)</td>\n<td>全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody></table>\n<h4 id=\"base-type-（字典管理）\"><a href=\"#base-type-（字典管理）\" class=\"headerlink\" title=\"base_type （字典管理）\"></a>base_type （字典管理）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>base_type_id</td>\n<td>int</td>\n<td>类别id(关联base_type的id)</td>\n</tr>\n<tr>\n<td>item_code</td>\n<td>varchar(50)</td>\n<td>字典编码</td>\n</tr>\n<tr>\n<td>item_name</td>\n<td>varchar(50)</td>\n<td>字典全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody></table>\n<h2 id=\"前端cms\"><a href=\"#前端cms\" class=\"headerlink\" title=\"前端cms\"></a>前端cms</h2><p>扩展实现一个博客，项目地址：<a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></p>\n<h2 id=\"实现功能如下：\"><a href=\"#实现功能如下：\" class=\"headerlink\" title=\"实现功能如下：\"></a>实现功能如下：</h2><ul>\n<li>文章类别管理(编码为Article.Classify的字典值)</li>\n<li>标签管理(编码为Article.Tag的字典值)</li>\n<li>留言板(Comment表ArticleId为0)</li>\n<li>文章管理(Artilce)<ul>\n<li>点赞</li>\n</ul>\n</li>\n<li>评论管理(Comment表ArticleId关联Article)<ul>\n<li>后台审核</li>\n<li>回复评论</li>\n<li>删除</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"开源lin-cms-dotnetcore\"><a href=\"#开源lin-cms-dotnetcore\" class=\"headerlink\" title=\"开源lin-cms-dotnetcore\"></a>开源lin-cms-dotnetcore</h2><ul>\n<li>地址：<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n<p>1.什么是cms？</p>\n<p>Content Management System，内容管理系统。</p>\n<p>2.dotnetcore是什么</p>\n<p>.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序。跨平台，支持Linux </p>\n<ul>\n<li>更多功能（自定义扩展-模块系统）","more":"</li>\n</ul>\n<p>3.lin-cms 是什么</p>\n<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin</p>\n<p>4.lin-cms-dotnetcore有哪些特点？</p>\n<p>前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。</p>\n<ul>\n<li>用户管理、分组管理、分组权限管理、日志系统、文件上传等</li>\n</ul>\n<h2 id=\"设计如下\"><a href=\"#设计如下\" class=\"headerlink\" title=\"设计如下\"></a>设计如下</h2><h4 id=\"字典管理\"><a href=\"#字典管理\" class=\"headerlink\" title=\"字典管理\"></a>字典管理</h4><p>BaseType 1 对BaseItem多。<br>如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。<br>我们使用BaseType、BaseItem实现。<br>BaseType中TypeCode为tag,FullName为标签，id为1时。<br>BaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。</p>\n<p>另Tag与Article的关联表，需要另设计一个表。</p>\n<p>当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。<br>我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。<br>BaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>\n<ol>\n<li>表结构</li>\n</ol>\n<h4 id=\"base-type-（字典类别管理）\"><a href=\"#base-type-（字典类别管理）\" class=\"headerlink\" title=\"base_type （字典类别管理）\"></a>base_type （字典类别管理）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>type_code</td>\n<td>varchar(50)</td>\n<td>类别编码</td>\n</tr>\n<tr>\n<td>full_name</td>\n<td>varchar(50)</td>\n<td>全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody></table>\n<h4 id=\"base-type-（字典管理）\"><a href=\"#base-type-（字典管理）\" class=\"headerlink\" title=\"base_type （字典管理）\"></a>base_type （字典管理）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>base_type_id</td>\n<td>int</td>\n<td>类别id(关联base_type的id)</td>\n</tr>\n<tr>\n<td>item_code</td>\n<td>varchar(50)</td>\n<td>字典编码</td>\n</tr>\n<tr>\n<td>item_name</td>\n<td>varchar(50)</td>\n<td>字典全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody></table>\n<h2 id=\"前端cms\"><a href=\"#前端cms\" class=\"headerlink\" title=\"前端cms\"></a>前端cms</h2><p>扩展实现一个博客，项目地址：<a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></p>\n<h2 id=\"实现功能如下：\"><a href=\"#实现功能如下：\" class=\"headerlink\" title=\"实现功能如下：\"></a>实现功能如下：</h2><ul>\n<li>文章类别管理(编码为Article.Classify的字典值)</li>\n<li>标签管理(编码为Article.Tag的字典值)</li>\n<li>留言板(Comment表ArticleId为0)</li>\n<li>文章管理(Artilce)<ul>\n<li>点赞</li>\n</ul>\n</li>\n<li>评论管理(Comment表ArticleId关联Article)<ul>\n<li>后台审核</li>\n<li>回复评论</li>\n<li>删除</li>\n</ul>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Dec 09 2019 19:16:05 GMT+0800 (GMT+08:00)","title":"lin-cms-dotnetcore的开源之路","path":"2019/10/08/lin-cms-dotnetcore/open-source-begin/","eyeCatchImage":null,"excerpt":"<h2 id=\"开源lin-cms-dotnetcore\"><a href=\"#开源lin-cms-dotnetcore\" class=\"headerlink\" title=\"开源lin-cms-dotnetcore\"></a>开源lin-cms-dotnetcore</h2><ul>\n<li>地址：<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n<p>1.什么是cms？</p>\n<p>Content Management System，内容管理系统。</p>\n<p>2.dotnetcore是什么</p>\n<p>.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序。跨平台，支持Linux </p>\n<ul>\n<li>更多功能（自定义扩展-模块系统）","date":"2019-10-08T04:44:22.000Z","pv":0,"totalPV":0,"categories":"lin-cms-dotnetcore","tags":[".NET Core","开源","lin-cms"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"现阶段的痛点","date":"2019-06-12T14:46:22.000Z","description":"现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等","_content":"\n### 现阶段的痛点：\n\n- 账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。\n- 小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。\n- 用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 \n    - 刷单、任务、黄牛、黑客、漏研族。\n- 云服务商不遵守开源精神，[看不惯云计算公司流氓行为，MongoDB 更改开源协议\n](https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license)\n\n\nIT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。\n\n- 手机Android推送频繁，如何合理监控。\n\n<fancybox><img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\"  alt=\"真棒\" align=center /></fancybox>","source":"_posts/work/Pain-Points-at-the-Present-Stage.md","raw":"---\ntitle: 现阶段的痛点\ndate: 2019-6-12 22:46:22\ndescription: 现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等\ntags:\n- 账号安全\n- 隐私\ncategory:\n- 工作\n---\n\n### 现阶段的痛点：\n\n- 账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。\n- 小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。\n- 用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 \n    - 刷单、任务、黄牛、黑客、漏研族。\n- 云服务商不遵守开源精神，[看不惯云计算公司流氓行为，MongoDB 更改开源协议\n](https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license)\n\n\nIT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。\n\n- 手机Android推送频繁，如何合理监控。\n\n<fancybox><img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\"  alt=\"真棒\" align=center /></fancybox>","slug":"work/Pain-Points-at-the-Present-Stage","published":1,"updated":"2019-10-08T04:21:13.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ylw003rm0tw3lv1sj8k","content":"<h3 id=\"现阶段的痛点：\"><a href=\"#现阶段的痛点：\" class=\"headerlink\" title=\"现阶段的痛点：\"></a>现阶段的痛点：</h3><ul>\n<li>账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。</li>\n<li>小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。</li>\n<li>用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 <ul>\n<li>刷单、任务、黄牛、黑客、漏研族。</li>\n</ul>\n</li>\n<li>云服务商不遵守开源精神，<a href=\"https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license\" target=\"_blank\" rel=\"noopener\">看不惯云计算公司流氓行为，MongoDB 更改开源协议\n</a></li>\n</ul>\n<p>IT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。</p>\n<ul>\n<li>手机Android推送频繁，如何合理监控。</li>\n</ul>\n<p><fancybox><img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\" alt=\"真棒\" align=\"center\"></fancybox></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"现阶段的痛点：\"><a href=\"#现阶段的痛点：\" class=\"headerlink\" title=\"现阶段的痛点：\"></a>现阶段的痛点：</h3><ul>\n<li>账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。</li>\n<li>小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。</li>\n<li>用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 <ul>\n<li>刷单、任务、黄牛、黑客、漏研族。</li>\n</ul>\n</li>\n<li>云服务商不遵守开源精神，<a href=\"https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license\" target=\"_blank\" rel=\"noopener\">看不惯云计算公司流氓行为，MongoDB 更改开源协议\n</a></li>\n</ul>\n<p>IT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。</p>\n<ul>\n<li>手机Android推送频繁，如何合理监控。</li>\n</ul>\n<p><fancybox><img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\" alt=\"真棒\" align=\"center\"></fancybox></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"现阶段的痛点","path":"2019/06/12/work/Pain-Points-at-the-Present-Stage/","eyeCatchImage":"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg","excerpt":"现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等","date":"2019-06-12T14:46:22.000Z","pv":0,"totalPV":0,"categories":"工作","tags":["账号安全","隐私"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"TypeScript学习记录- 数据类型基础","date":"2019-06-12T06:27:54.000Z","_content":"# TS 学习笔记记录\n相关文档\n- [TypeScript 入门教程-xcatliu](https://ts.xcatliu.com/)\n- [JavaScript高级程序设计（第三版）pdf的下载地址](https://blog.csdn.net/gao531162436/article/details/79087456)\n- [JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=)\n- [Typescript教程_Typescript视频教程 ts入门实战视频教程](https://www.bilibili.com/video/av38379328/?p=1)\n\n<!-- more -->\n\n## 原始数据类型 \n原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。\n\n* 定义一个布尔值\n~~~\nlet isOk:boolean =false;\n~~~\n* 定义一个数值\n~~~\nlet literal:number=10;\n~~~\n\n* 定义 字符串\n~~~\nlet name:string=\"luo\";\n~~~\n\n* 空值\n~~~\n function alertName(name:string):void{\n\talert(\"my name is \"+name);\n}\n~~~\n* null 和undefined\n~~~\nlet u: undefined = undefined;\nlet n: null = null;\n~~~\n\nvoid 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。\n\n## 任意值\n\n*   任意值类型\n~~~\n let name:any=\"1234\";\n name = 111;\n~~~\n\n如果是 any 类型，则允许被赋值为任意类型。\n\n* 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。\n~~~\nlet st;\nst=\"1111\";\nst=111;\n~~~\n\n##  类型推断\n 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型\n\n~~~\nlet myFav=“This is a string!\";\n~~~\n等价于\n~~~\nlet myFav:string=\"This is a string!\";\n~~~\n\n## 联合类型\n表示取值可以为多种类型中的一种。\n \n* let 变量名:变量类型|变量类型;使用  **|** 分隔数据类型。\n~~~\nlet myFavoriteNumber:string|number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n~~~\n \n * 访问联合类型属性或方法。\n 要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法\n~~~\nfunction getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n//   Property 'length' does not exist on type 'number'.\n~~~\n报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。\n\n~~~\nlet myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nconsole.log(myFavoriteNumber.length); // 5\nmyFavoriteNumber = 7;\nconsole.log(myFavoriteNumber.length); // 编译时报错\n\n// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.\n~~~\n只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 **string**，所以 访问**length**时无异常，第四行 其被推断成 **number**,访问**length**会异常。\n\n\n## 对象的类型-接口\n接口是一种规范，他定义了一个事物的基础属性，规则。\n* 定义接口\n```\ninterface Person {\n    readonly id:number;\n    name: string;\n    age?: number;\n    [propName: string]:any;\n}\n```\nid 前加 **readonly** 表示该字段为只读属性，只有第一次给对象 **Person**赋值时 **id** 必须有值，后面无法给此值赋值。\nage后面加 **?** 表示该属性为可选属性。定义变量时可为空，\n[propName: string]  任意属性 ,定义属性值 为 **string** 类型的值。**当定义任意属性后，确定的属性和可选属性必须为这个类型的子集**\n\n## 数组类型\n* 「类型 + 方括号」来表示数组\n~~~\nlet fibonacci: number[] = [1, 1, 2, 3, 5];\nlet fibonacci: (number | string)[] = [1, '1', 2, 3, 5];\n// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n~~~\n\n* 数组泛型\n~~~\nArray<elemType> 来表示数组\n\nlet fibonacci: Array<number> = [1, 1, 2, 3, 5];\n~~~\n\n* 使用接口实现数组\n\n~~~\ninterface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n~~~\n\n* 类数组 \n内置对象 IArguments \n~~~\nfunction sum() {\n    let args: IArguments = arguments;\n}\n~~~\n\n## 函数的类型\n * 函数声明\n~~~\nfunction sum(x: number, y: number): number {\n    return x + y;\n}\n~~~\n* 函数表达式\n\n~~~\nlet mySum=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\nmySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型\n~~~\nlet mySum:(x:number,y:number)=>number=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\n在TyepScript中  **=>** 表示函数的定义，**左边是输入类型，右边是输出类型**\n\n[ES6中的箭头函数相关介绍](http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)\n\n* 使用接口定义函数类型\n\n~~~\ninterface searchFunc{\n\t(source:string,subString:string):boolean;\n}\nlet mySearch:searchFunc;\n\nmySearch=function(source:string,subString:string):boolean{\n    return source.search(subString) !== -1;\n}\n~~~\n* 可选参数、参数默认值\n使用 **？** 表示可选择的参数，有默认值的参数为可选参数，但不受 **「可选参数必须接在必需参数后面」的限制了**\n可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了\n\n~~~\nfunction buildName(firstName: string='Tom', lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n~~~\n\n## 类型断言\n断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。\n~~~\n//定义类型:<类型>值\nlet something: string | number=\"1234\";\nlet str=<string>something;//这是正确的，可以将联合类型转换成一个更加具体的类型\nlet bol=<boolearn>something;//异常，Type 'string | number' cannot be converted to type 'boolean'\n~~~","source":"_posts/front-end/Learn-TypeScript-BaseType.md","raw":"---\ntitle: TypeScript学习记录- 数据类型基础\ndate: 2019-06-12 14:27:54\ntags: TypeScript\n---\n# TS 学习笔记记录\n相关文档\n- [TypeScript 入门教程-xcatliu](https://ts.xcatliu.com/)\n- [JavaScript高级程序设计（第三版）pdf的下载地址](https://blog.csdn.net/gao531162436/article/details/79087456)\n- [JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=)\n- [Typescript教程_Typescript视频教程 ts入门实战视频教程](https://www.bilibili.com/video/av38379328/?p=1)\n\n<!-- more -->\n\n## 原始数据类型 \n原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。\n\n* 定义一个布尔值\n~~~\nlet isOk:boolean =false;\n~~~\n* 定义一个数值\n~~~\nlet literal:number=10;\n~~~\n\n* 定义 字符串\n~~~\nlet name:string=\"luo\";\n~~~\n\n* 空值\n~~~\n function alertName(name:string):void{\n\talert(\"my name is \"+name);\n}\n~~~\n* null 和undefined\n~~~\nlet u: undefined = undefined;\nlet n: null = null;\n~~~\n\nvoid 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。\n\n## 任意值\n\n*   任意值类型\n~~~\n let name:any=\"1234\";\n name = 111;\n~~~\n\n如果是 any 类型，则允许被赋值为任意类型。\n\n* 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。\n~~~\nlet st;\nst=\"1111\";\nst=111;\n~~~\n\n##  类型推断\n 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型\n\n~~~\nlet myFav=“This is a string!\";\n~~~\n等价于\n~~~\nlet myFav:string=\"This is a string!\";\n~~~\n\n## 联合类型\n表示取值可以为多种类型中的一种。\n \n* let 变量名:变量类型|变量类型;使用  **|** 分隔数据类型。\n~~~\nlet myFavoriteNumber:string|number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n~~~\n \n * 访问联合类型属性或方法。\n 要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法\n~~~\nfunction getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n//   Property 'length' does not exist on type 'number'.\n~~~\n报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。\n\n~~~\nlet myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nconsole.log(myFavoriteNumber.length); // 5\nmyFavoriteNumber = 7;\nconsole.log(myFavoriteNumber.length); // 编译时报错\n\n// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.\n~~~\n只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 **string**，所以 访问**length**时无异常，第四行 其被推断成 **number**,访问**length**会异常。\n\n\n## 对象的类型-接口\n接口是一种规范，他定义了一个事物的基础属性，规则。\n* 定义接口\n```\ninterface Person {\n    readonly id:number;\n    name: string;\n    age?: number;\n    [propName: string]:any;\n}\n```\nid 前加 **readonly** 表示该字段为只读属性，只有第一次给对象 **Person**赋值时 **id** 必须有值，后面无法给此值赋值。\nage后面加 **?** 表示该属性为可选属性。定义变量时可为空，\n[propName: string]  任意属性 ,定义属性值 为 **string** 类型的值。**当定义任意属性后，确定的属性和可选属性必须为这个类型的子集**\n\n## 数组类型\n* 「类型 + 方括号」来表示数组\n~~~\nlet fibonacci: number[] = [1, 1, 2, 3, 5];\nlet fibonacci: (number | string)[] = [1, '1', 2, 3, 5];\n// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n~~~\n\n* 数组泛型\n~~~\nArray<elemType> 来表示数组\n\nlet fibonacci: Array<number> = [1, 1, 2, 3, 5];\n~~~\n\n* 使用接口实现数组\n\n~~~\ninterface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n~~~\n\n* 类数组 \n内置对象 IArguments \n~~~\nfunction sum() {\n    let args: IArguments = arguments;\n}\n~~~\n\n## 函数的类型\n * 函数声明\n~~~\nfunction sum(x: number, y: number): number {\n    return x + y;\n}\n~~~\n* 函数表达式\n\n~~~\nlet mySum=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\nmySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型\n~~~\nlet mySum:(x:number,y:number)=>number=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\n在TyepScript中  **=>** 表示函数的定义，**左边是输入类型，右边是输出类型**\n\n[ES6中的箭头函数相关介绍](http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)\n\n* 使用接口定义函数类型\n\n~~~\ninterface searchFunc{\n\t(source:string,subString:string):boolean;\n}\nlet mySearch:searchFunc;\n\nmySearch=function(source:string,subString:string):boolean{\n    return source.search(subString) !== -1;\n}\n~~~\n* 可选参数、参数默认值\n使用 **？** 表示可选择的参数，有默认值的参数为可选参数，但不受 **「可选参数必须接在必需参数后面」的限制了**\n可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了\n\n~~~\nfunction buildName(firstName: string='Tom', lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n~~~\n\n## 类型断言\n断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。\n~~~\n//定义类型:<类型>值\nlet something: string | number=\"1234\";\nlet str=<string>something;//这是正确的，可以将联合类型转换成一个更加具体的类型\nlet bol=<boolearn>something;//异常，Type 'string | number' cannot be converted to type 'boolean'\n~~~","slug":"front-end/Learn-TypeScript-BaseType","published":1,"updated":"2019-10-08T04:21:13.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ym4003tm0twna9wz730","content":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。</p>\n<ul>\n<li><p>定义一个布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let isOk:boolean =false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个数值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let literal:number=10;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义 字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let name:string=&quot;luo&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> function alertName(name:string):void&#123;</span><br><span class=\"line\">\talert(&quot;my name is &quot;+name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>null 和undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>void 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。</p>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ul>\n<li>任意值类型<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let name:any=&quot;1234&quot;;</span><br><span class=\"line\">name = 111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果是 any 类型，则允许被赋值为任意类型。</p>\n<ul>\n<li>未声明类型的变量<br>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let st;</span><br><span class=\"line\">st=&quot;1111&quot;;</span><br><span class=\"line\">st=111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h2><p> 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFav=“This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFav:string=&quot;This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><p>表示取值可以为多种类型中的一种。</p>\n<ul>\n<li>let 变量名:变量类型|变量类型;使用  <strong>|</strong> 分隔数据类型。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:string|number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>访问联合类型属性或方法。<br>要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getLength(something: string | number): number &#123;</span><br><span class=\"line\">    return something.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,22): error TS2339: Property &apos;length&apos; does not exist on type &apos;string | number&apos;.</span><br><span class=\"line\">//   Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber: string | number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 5</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 编译时报错</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(5,30): error TS2339: Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n<p>只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 <strong>string</strong>，所以 访问<strong>length</strong>时无异常，第四行 其被推断成 <strong>number</strong>,访问<strong>length</strong>会异常。</p>\n<h2 id=\"对象的类型-接口\"><a href=\"#对象的类型-接口\" class=\"headerlink\" title=\"对象的类型-接口\"></a>对象的类型-接口</h2><p>接口是一种规范，他定义了一个事物的基础属性，规则。</p>\n<ul>\n<li>定义接口<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id:number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>id 前加 <strong>readonly</strong> 表示该字段为只读属性，只有第一次给对象 <strong>Person</strong>赋值时 <strong>id</strong> 必须有值，后面无法给此值赋值。<br>age后面加 <strong>?</strong> 表示该属性为可选属性。定义变量时可为空，<br>[propName: string]  任意属性 ,定义属性值 为 <strong>string</strong> 类型的值。<strong>当定义任意属性后，确定的属性和可选属性必须为这个类型的子集</strong></p>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ul>\n<li><p>「类型 + 方括号」来表示数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let fibonacci: number[] = [1, 1, 2, 3, 5];</span><br><span class=\"line\">let fibonacci: (number | string)[] = [1, &apos;1&apos;, 2, 3, 5];</span><br><span class=\"line\">// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]</span><br><span class=\"line\">let list: any[] = [&apos;Xcat Liu&apos;, 25, &#123; website: &apos;http://xcatliu.com&apos; &#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array&lt;elemType&gt; 来表示数组</span><br><span class=\"line\"></span><br><span class=\"line\">let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用接口实现数组</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let fibonacci: NumberArray = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类数组<br>内置对象 IArguments <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sum() &#123;</span><br><span class=\"line\">    let args: IArguments = arguments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li>函数声明<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sum(x: number, y: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li>函数表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mySum=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mySum:(x:number,y:number)=&gt;number=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在TyepScript中  <strong>=&gt;</strong> 表示函数的定义，<strong>左边是输入类型，右边是输出类型</strong></p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">ES6中的箭头函数相关介绍</a></p>\n<ul>\n<li>使用接口定义函数类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface searchFunc&#123;</span><br><span class=\"line\">\t(source:string,subString:string):boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch:searchFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">mySearch=function(source:string,subString:string):boolean&#123;</span><br><span class=\"line\">    return source.search(subString) !== -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选参数、参数默认值<br>使用 <strong>？</strong> 表示可选择的参数，有默认值的参数为可选参数，但不受 <strong>「可选参数必须接在必需参数后面」的限制了</strong><br>可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string=&apos;Tom&apos;, lastName?: string) &#123;</span><br><span class=\"line\">    if (lastName) &#123;</span><br><span class=\"line\">        return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let tomcat = buildName(&apos;Tom&apos;, &apos;Cat&apos;);</span><br><span class=\"line\">let tom = buildName(&apos;Tom&apos;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//定义类型:&lt;类型&gt;值</span><br><span class=\"line\">let something: string | number=&quot;1234&quot;;</span><br><span class=\"line\">let str=&lt;string&gt;something;//这是正确的，可以将联合类型转换成一个更加具体的类型</span><br><span class=\"line\">let bol=&lt;boolearn&gt;something;//异常，Type &apos;string | number&apos; cannot be converted to type &apos;boolean&apos;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>","more":"<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。</p>\n<ul>\n<li><p>定义一个布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let isOk:boolean =false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个数值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let literal:number=10;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义 字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let name:string=&quot;luo&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> function alertName(name:string):void&#123;</span><br><span class=\"line\">\talert(&quot;my name is &quot;+name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>null 和undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>void 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。</p>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ul>\n<li>任意值类型<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let name:any=&quot;1234&quot;;</span><br><span class=\"line\">name = 111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果是 any 类型，则允许被赋值为任意类型。</p>\n<ul>\n<li>未声明类型的变量<br>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let st;</span><br><span class=\"line\">st=&quot;1111&quot;;</span><br><span class=\"line\">st=111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h2><p> 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFav=“This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFav:string=&quot;This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><p>表示取值可以为多种类型中的一种。</p>\n<ul>\n<li>let 变量名:变量类型|变量类型;使用  <strong>|</strong> 分隔数据类型。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:string|number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>访问联合类型属性或方法。<br>要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getLength(something: string | number): number &#123;</span><br><span class=\"line\">    return something.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,22): error TS2339: Property &apos;length&apos; does not exist on type &apos;string | number&apos;.</span><br><span class=\"line\">//   Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber: string | number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 5</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 编译时报错</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(5,30): error TS2339: Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n<p>只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 <strong>string</strong>，所以 访问<strong>length</strong>时无异常，第四行 其被推断成 <strong>number</strong>,访问<strong>length</strong>会异常。</p>\n<h2 id=\"对象的类型-接口\"><a href=\"#对象的类型-接口\" class=\"headerlink\" title=\"对象的类型-接口\"></a>对象的类型-接口</h2><p>接口是一种规范，他定义了一个事物的基础属性，规则。</p>\n<ul>\n<li>定义接口<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id:number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>id 前加 <strong>readonly</strong> 表示该字段为只读属性，只有第一次给对象 <strong>Person</strong>赋值时 <strong>id</strong> 必须有值，后面无法给此值赋值。<br>age后面加 <strong>?</strong> 表示该属性为可选属性。定义变量时可为空，<br>[propName: string]  任意属性 ,定义属性值 为 <strong>string</strong> 类型的值。<strong>当定义任意属性后，确定的属性和可选属性必须为这个类型的子集</strong></p>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ul>\n<li><p>「类型 + 方括号」来表示数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let fibonacci: number[] = [1, 1, 2, 3, 5];</span><br><span class=\"line\">let fibonacci: (number | string)[] = [1, &apos;1&apos;, 2, 3, 5];</span><br><span class=\"line\">// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]</span><br><span class=\"line\">let list: any[] = [&apos;Xcat Liu&apos;, 25, &#123; website: &apos;http://xcatliu.com&apos; &#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array&lt;elemType&gt; 来表示数组</span><br><span class=\"line\"></span><br><span class=\"line\">let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用接口实现数组</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let fibonacci: NumberArray = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类数组<br>内置对象 IArguments <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sum() &#123;</span><br><span class=\"line\">    let args: IArguments = arguments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li>函数声明<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sum(x: number, y: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li>函数表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mySum=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mySum:(x:number,y:number)=&gt;number=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在TyepScript中  <strong>=&gt;</strong> 表示函数的定义，<strong>左边是输入类型，右边是输出类型</strong></p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">ES6中的箭头函数相关介绍</a></p>\n<ul>\n<li>使用接口定义函数类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface searchFunc&#123;</span><br><span class=\"line\">\t(source:string,subString:string):boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch:searchFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">mySearch=function(source:string,subString:string):boolean&#123;</span><br><span class=\"line\">    return source.search(subString) !== -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选参数、参数默认值<br>使用 <strong>？</strong> 表示可选择的参数，有默认值的参数为可选参数，但不受 <strong>「可选参数必须接在必需参数后面」的限制了</strong><br>可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string=&apos;Tom&apos;, lastName?: string) &#123;</span><br><span class=\"line\">    if (lastName) &#123;</span><br><span class=\"line\">        return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let tomcat = buildName(&apos;Tom&apos;, &apos;Cat&apos;);</span><br><span class=\"line\">let tom = buildName(&apos;Tom&apos;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//定义类型:&lt;类型&gt;值</span><br><span class=\"line\">let something: string | number=&quot;1234&quot;;</span><br><span class=\"line\">let str=&lt;string&gt;something;//这是正确的，可以将联合类型转换成一个更加具体的类型</span><br><span class=\"line\">let bol=&lt;boolearn&gt;something;//异常，Type &apos;string | number&apos; cannot be converted to type &apos;boolean&apos;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"TypeScript学习记录- 数据类型基础","path":"2019/06/12/front-end/Learn-TypeScript-BaseType/","eyeCatchImage":null,"excerpt":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>","date":"2019-06-12T06:27:54.000Z","pv":0,"totalPV":0,"categories":"","tags":["TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"FreeSql配合仓储实现软删除","date":"2019-10-06T04:43:22.000Z","_content":"\n## FreeSql\n> 前段时间使用FreeSql作为ORM，写了一个简单的CMS，在这里总结一下其中的使用心得。\n\n<!-- more -->\n\n### 仓储配合全局过滤器\n#### 1. 统一的删除标志\n如：数据库字段 bool IsDeleted,代表删除标志。\n\n需要配合仓储可实现，统一的删除标志，不需要加where(r=>r.deleted==false)，取数据时，自动过滤数据。\n\n接口 ISoftDeleteAduitEntity.cs\n```\n    public interface ISoftDeleteAduitEntity\n    {\n        bool IsDeleted { get; set; }\n        long? DeleteUserId { get; set; }\n        DateTime? DeleteTime { get; set; }\n    }\n\n```\n\nConfigureServices通过配置服务，增加全局过滤器，第二个参数,可指定仓储所在的程序集（一个dll,一个项目就是一个程序集（一般一个解决方案下有多个项目，如果仓储写在多个地方，我们可以，把要扫描的程序集写在第二个参数上。））\n```\nservices.AddFreeRepository(filter =>\n{\n    filter.Apply<ISoftDeleteAduitEntity>(\"SoftDelete\", a => a.IsDeleted == false);\n}, GetType().Assembly, typeof(AuditBaseRepository<>).Assembly);\n```\n\nGetType().Assembly 当前项目所在程序集。\ntypeof(AuditBaseRepository<>).Assembly，为AuditBaseRepository<T>所在程序集，（LinCms.Zero.dll）\n\n#### 2.统一的删除时间，删除人\n\n上文，关于配置删除标志，我们注入其提供好的仓储，会过滤掉isdeleted属性为true的值。\n\n```\n  public class UserService : IUserSevice\n    {\n        private readonly BaseRepository<LinUser> _userRepository;\n        public UserService(BaseRepository<LinUser> userRepository)\n        {\n            _userRepository = userRepository;\n        }\n\n        public List<LinUser> GetUserList()\n        {\n            List<LinUser> users = _userRepository.Select.ToList();\n            return users;\n        }\n}\n```\n\n那么，我们删除一个用户时，怎么增加删除时间，删除人呢。\n\n```\npublic void Delete(int id)\n{\n    _userRepository.Delete(r => r.Id == id);\n}\n```\n这样能删除，但删除人，删除时间并没有加上去。\n\n\n这里我们注入AuditBaseRepository<LinUser>，重写父类Delete方法。\n```\nprivate readonly AuditBaseRepository<LinUser> _userRepository;\npublic UserService(AuditBaseRepository<LinUser> userRepository)\n{\n    _userRepository = userRepository;\n}\n\npublic void Delete(int id)\n{\n    _userRepository.Delete(r => r.Id == id);\n}\n\n```\n\n由于父类并非Virtual类型，这里通过new关键字重写 int Delete(Expression<Func<T, bool>> predicate)方法\n```\npublic new int Delete(Expression<Func<T, bool>> predicate)\n{\n    if (typeof(ISoftDeleteAduitEntity).IsAssignableFrom(typeof(T)))\n    {\n        List<T> items = Orm.Select<T>().Where(predicate).ToList();\n        return Orm.Update<T>(items)\n            .Set(a => (a as ISoftDeleteAduitEntity).IsDeleted, true)\n            .Set(a => (a as ISoftDeleteAduitEntity).DeleteUserId, _currentUser.Id)\n            .Set(a => (a as ISoftDeleteAduitEntity).DeleteTime, DateTime.Now)\n            .ExecuteAffrows();\n    }\n\n    return base.Delete(predicate);\n}\n\n```\n全部重写删除操作，请参考[https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs](https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs)\n这样固然能实现，但好像包含大量as，IsAssignableFrom（判断T是否继承了ISoftDeleteAduitEntity).","source":"_posts/re-start/FreeSql-Repository-Delete-Extend.md","raw":"---\ntitle: FreeSql配合仓储实现软删除\ndate: 2019-10-6 12:43:22\ntags:\n- FreeSql\ncategory:\n- 重新出发\n---\n\n## FreeSql\n> 前段时间使用FreeSql作为ORM，写了一个简单的CMS，在这里总结一下其中的使用心得。\n\n<!-- more -->\n\n### 仓储配合全局过滤器\n#### 1. 统一的删除标志\n如：数据库字段 bool IsDeleted,代表删除标志。\n\n需要配合仓储可实现，统一的删除标志，不需要加where(r=>r.deleted==false)，取数据时，自动过滤数据。\n\n接口 ISoftDeleteAduitEntity.cs\n```\n    public interface ISoftDeleteAduitEntity\n    {\n        bool IsDeleted { get; set; }\n        long? DeleteUserId { get; set; }\n        DateTime? DeleteTime { get; set; }\n    }\n\n```\n\nConfigureServices通过配置服务，增加全局过滤器，第二个参数,可指定仓储所在的程序集（一个dll,一个项目就是一个程序集（一般一个解决方案下有多个项目，如果仓储写在多个地方，我们可以，把要扫描的程序集写在第二个参数上。））\n```\nservices.AddFreeRepository(filter =>\n{\n    filter.Apply<ISoftDeleteAduitEntity>(\"SoftDelete\", a => a.IsDeleted == false);\n}, GetType().Assembly, typeof(AuditBaseRepository<>).Assembly);\n```\n\nGetType().Assembly 当前项目所在程序集。\ntypeof(AuditBaseRepository<>).Assembly，为AuditBaseRepository<T>所在程序集，（LinCms.Zero.dll）\n\n#### 2.统一的删除时间，删除人\n\n上文，关于配置删除标志，我们注入其提供好的仓储，会过滤掉isdeleted属性为true的值。\n\n```\n  public class UserService : IUserSevice\n    {\n        private readonly BaseRepository<LinUser> _userRepository;\n        public UserService(BaseRepository<LinUser> userRepository)\n        {\n            _userRepository = userRepository;\n        }\n\n        public List<LinUser> GetUserList()\n        {\n            List<LinUser> users = _userRepository.Select.ToList();\n            return users;\n        }\n}\n```\n\n那么，我们删除一个用户时，怎么增加删除时间，删除人呢。\n\n```\npublic void Delete(int id)\n{\n    _userRepository.Delete(r => r.Id == id);\n}\n```\n这样能删除，但删除人，删除时间并没有加上去。\n\n\n这里我们注入AuditBaseRepository<LinUser>，重写父类Delete方法。\n```\nprivate readonly AuditBaseRepository<LinUser> _userRepository;\npublic UserService(AuditBaseRepository<LinUser> userRepository)\n{\n    _userRepository = userRepository;\n}\n\npublic void Delete(int id)\n{\n    _userRepository.Delete(r => r.Id == id);\n}\n\n```\n\n由于父类并非Virtual类型，这里通过new关键字重写 int Delete(Expression<Func<T, bool>> predicate)方法\n```\npublic new int Delete(Expression<Func<T, bool>> predicate)\n{\n    if (typeof(ISoftDeleteAduitEntity).IsAssignableFrom(typeof(T)))\n    {\n        List<T> items = Orm.Select<T>().Where(predicate).ToList();\n        return Orm.Update<T>(items)\n            .Set(a => (a as ISoftDeleteAduitEntity).IsDeleted, true)\n            .Set(a => (a as ISoftDeleteAduitEntity).DeleteUserId, _currentUser.Id)\n            .Set(a => (a as ISoftDeleteAduitEntity).DeleteTime, DateTime.Now)\n            .ExecuteAffrows();\n    }\n\n    return base.Delete(predicate);\n}\n\n```\n全部重写删除操作，请参考[https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs](https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs)\n这样固然能实现，但好像包含大量as，IsAssignableFrom（判断T是否继承了ISoftDeleteAduitEntity).","slug":"re-start/FreeSql-Repository-Delete-Extend","published":1,"updated":"2019-10-08T04:42:27.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yme003ym0tw6xzief9h","content":"<h2 id=\"FreeSql\"><a href=\"#FreeSql\" class=\"headerlink\" title=\"FreeSql\"></a>FreeSql</h2><blockquote>\n<p>前段时间使用FreeSql作为ORM，写了一个简单的CMS，在这里总结一下其中的使用心得。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"仓储配合全局过滤器\"><a href=\"#仓储配合全局过滤器\" class=\"headerlink\" title=\"仓储配合全局过滤器\"></a>仓储配合全局过滤器</h3><h4 id=\"1-统一的删除标志\"><a href=\"#1-统一的删除标志\" class=\"headerlink\" title=\"1. 统一的删除标志\"></a>1. 统一的删除标志</h4><p>如：数据库字段 bool IsDeleted,代表删除标志。</p>\n<p>需要配合仓储可实现，统一的删除标志，不需要加where(r=&gt;r.deleted==false)，取数据时，自动过滤数据。</p>\n<p>接口 ISoftDeleteAduitEntity.cs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public interface ISoftDeleteAduitEntity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    bool IsDeleted &#123; get; set; &#125;</span><br><span class=\"line\">    long? DeleteUserId &#123; get; set; &#125;</span><br><span class=\"line\">    DateTime? DeleteTime &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ConfigureServices通过配置服务，增加全局过滤器，第二个参数,可指定仓储所在的程序集（一个dll,一个项目就是一个程序集（一般一个解决方案下有多个项目，如果仓储写在多个地方，我们可以，把要扫描的程序集写在第二个参数上。））</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddFreeRepository(filter =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    filter.Apply&lt;ISoftDeleteAduitEntity&gt;(&quot;SoftDelete&quot;, a =&gt; a.IsDeleted == false);</span><br><span class=\"line\">&#125;, GetType().Assembly, typeof(AuditBaseRepository&lt;&gt;).Assembly);</span><br></pre></td></tr></table></figure>\n\n<p>GetType().Assembly 当前项目所在程序集。<br>typeof(AuditBaseRepository&lt;&gt;).Assembly，为AuditBaseRepository<t>所在程序集，（LinCms.Zero.dll）</t></p>\n<h4 id=\"2-统一的删除时间，删除人\"><a href=\"#2-统一的删除时间，删除人\" class=\"headerlink\" title=\"2.统一的删除时间，删除人\"></a>2.统一的删除时间，删除人</h4><p>上文，关于配置删除标志，我们注入其提供好的仓储，会过滤掉isdeleted属性为true的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  public class UserService : IUserSevice</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly BaseRepository&lt;LinUser&gt; _userRepository;</span><br><span class=\"line\">        public UserService(BaseRepository&lt;LinUser&gt; userRepository)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _userRepository = userRepository;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public List&lt;LinUser&gt; GetUserList()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;LinUser&gt; users = _userRepository.Select.ToList();</span><br><span class=\"line\">            return users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，我们删除一个用户时，怎么增加删除时间，删除人呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void Delete(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository.Delete(r =&gt; r.Id == id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样能删除，但删除人，删除时间并没有加上去。</p>\n<p>这里我们注入AuditBaseRepository<linuser>，重写父类Delete方法。</linuser></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly AuditBaseRepository&lt;LinUser&gt; _userRepository;</span><br><span class=\"line\">public UserService(AuditBaseRepository&lt;LinUser&gt; userRepository)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository = userRepository;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void Delete(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository.Delete(r =&gt; r.Id == id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于父类并非Virtual类型，这里通过new关键字重写 int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public new int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (typeof(ISoftDeleteAduitEntity).IsAssignableFrom(typeof(T)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;T&gt; items = Orm.Select&lt;T&gt;().Where(predicate).ToList();</span><br><span class=\"line\">        return Orm.Update&lt;T&gt;(items)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).IsDeleted, true)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).DeleteUserId, _currentUser.Id)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).DeleteTime, DateTime.Now)</span><br><span class=\"line\">            .ExecuteAffrows();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return base.Delete(predicate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全部重写删除操作，请参考<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs</a><br>这样固然能实现，但好像包含大量as，IsAssignableFrom（判断T是否继承了ISoftDeleteAduitEntity).</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"FreeSql\"><a href=\"#FreeSql\" class=\"headerlink\" title=\"FreeSql\"></a>FreeSql</h2><blockquote>\n<p>前段时间使用FreeSql作为ORM，写了一个简单的CMS，在这里总结一下其中的使用心得。</p>\n</blockquote>","more":"<h3 id=\"仓储配合全局过滤器\"><a href=\"#仓储配合全局过滤器\" class=\"headerlink\" title=\"仓储配合全局过滤器\"></a>仓储配合全局过滤器</h3><h4 id=\"1-统一的删除标志\"><a href=\"#1-统一的删除标志\" class=\"headerlink\" title=\"1. 统一的删除标志\"></a>1. 统一的删除标志</h4><p>如：数据库字段 bool IsDeleted,代表删除标志。</p>\n<p>需要配合仓储可实现，统一的删除标志，不需要加where(r=&gt;r.deleted==false)，取数据时，自动过滤数据。</p>\n<p>接口 ISoftDeleteAduitEntity.cs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public interface ISoftDeleteAduitEntity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    bool IsDeleted &#123; get; set; &#125;</span><br><span class=\"line\">    long? DeleteUserId &#123; get; set; &#125;</span><br><span class=\"line\">    DateTime? DeleteTime &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ConfigureServices通过配置服务，增加全局过滤器，第二个参数,可指定仓储所在的程序集（一个dll,一个项目就是一个程序集（一般一个解决方案下有多个项目，如果仓储写在多个地方，我们可以，把要扫描的程序集写在第二个参数上。））</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddFreeRepository(filter =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    filter.Apply&lt;ISoftDeleteAduitEntity&gt;(&quot;SoftDelete&quot;, a =&gt; a.IsDeleted == false);</span><br><span class=\"line\">&#125;, GetType().Assembly, typeof(AuditBaseRepository&lt;&gt;).Assembly);</span><br></pre></td></tr></table></figure>\n\n<p>GetType().Assembly 当前项目所在程序集。<br>typeof(AuditBaseRepository&lt;&gt;).Assembly，为AuditBaseRepository<t>所在程序集，（LinCms.Zero.dll）</t></p>\n<h4 id=\"2-统一的删除时间，删除人\"><a href=\"#2-统一的删除时间，删除人\" class=\"headerlink\" title=\"2.统一的删除时间，删除人\"></a>2.统一的删除时间，删除人</h4><p>上文，关于配置删除标志，我们注入其提供好的仓储，会过滤掉isdeleted属性为true的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  public class UserService : IUserSevice</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly BaseRepository&lt;LinUser&gt; _userRepository;</span><br><span class=\"line\">        public UserService(BaseRepository&lt;LinUser&gt; userRepository)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _userRepository = userRepository;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public List&lt;LinUser&gt; GetUserList()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;LinUser&gt; users = _userRepository.Select.ToList();</span><br><span class=\"line\">            return users;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，我们删除一个用户时，怎么增加删除时间，删除人呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void Delete(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository.Delete(r =&gt; r.Id == id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样能删除，但删除人，删除时间并没有加上去。</p>\n<p>这里我们注入AuditBaseRepository<linuser>，重写父类Delete方法。</linuser></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly AuditBaseRepository&lt;LinUser&gt; _userRepository;</span><br><span class=\"line\">public UserService(AuditBaseRepository&lt;LinUser&gt; userRepository)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository = userRepository;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void Delete(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _userRepository.Delete(r =&gt; r.Id == id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于父类并非Virtual类型，这里通过new关键字重写 int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public new int Delete(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (typeof(ISoftDeleteAduitEntity).IsAssignableFrom(typeof(T)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;T&gt; items = Orm.Select&lt;T&gt;().Where(predicate).ToList();</span><br><span class=\"line\">        return Orm.Update&lt;T&gt;(items)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).IsDeleted, true)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).DeleteUserId, _currentUser.Id)</span><br><span class=\"line\">            .Set(a =&gt; (a as ISoftDeleteAduitEntity).DeleteTime, DateTime.Now)</span><br><span class=\"line\">            .ExecuteAffrows();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return base.Delete(predicate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全部重写删除操作，请参考<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Zero/Repositories/AuditBaseRepository.cs</a><br>这样固然能实现，但好像包含大量as，IsAssignableFrom（判断T是否继承了ISoftDeleteAduitEntity).</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:42:27 GMT+0800 (GMT+08:00)","title":"FreeSql配合仓储实现软删除","path":"2019/10/06/re-start/FreeSql-Repository-Delete-Extend/","eyeCatchImage":null,"excerpt":"<h2 id=\"FreeSql\"><a href=\"#FreeSql\" class=\"headerlink\" title=\"FreeSql\"></a>FreeSql</h2><blockquote>\n<p>前段时间使用FreeSql作为ORM，写了一个简单的CMS，在这里总结一下其中的使用心得。</p>\n</blockquote>","date":"2019-10-06T04:43:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":["FreeSql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"1.重新出发-起航","date":"2019-06-17T07:19:22.000Z","author":"IGeekFan","description":"每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。","cover":true,"_content":"\n## 重新出发\n还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ **.net** framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。\n\n后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本\n\n我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 **.net core**，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 **.NET Core**，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\n\n\n目前用到的一些技术栈、架构风格、开发工具如下\n\nvue.js(SPA)+**.netNET Core**2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)\n\n## .NET Core 可学习的框架，社区等\n0. awesome-dotnet 关于 **.NET Core** 的优秀项目应该都能在这找到 [https://github.com/quozd/awesome-dotnet/](https://github.com/quozd/awesome-dotnet/)\n1. abp vnext ，可参考[https://cn.abp.io/documents/abp/latest/Index](https://cn.abp.io/documents/abp/latest/Index)，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）\n2. surging 专注与 **.net core**下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）\n3. .NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习\n[https://github.com/dotnetcore](https://github.com/dotnetcore)\n4. csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，[https://github.com/2881099/csredis](https://github.com/2881099/csredis)\n5. FreeSql是 **.net 、.net core**的最方便的 ORM,     [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql)（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者\n6. \n\n## 小技巧：\n1. 如果你想找什么资料，去github搜索可以使用\n\n ```awesome``` 关键字、\n ```learn``` +关键字\n\n在https://github.com中 搜索，都能搜索到 最全的教程\n~~~\nawesome vue\nlearn git\nawesome dotnet\n~~~\n\n\n## 技术学习\n\n1.前端相应的知识点\n- es6\n- webpack\n- vue.js\n- vuex\n- vue-router\n- typescript\n- \n\n\n\n2. 后端技术栈\n- nginx\n- linux 如：Ubuntu\n- docker\n- c# 如: .net core 、asp **.net core**\n- java 如: spring boot\n\n3. 运维、部署\n- Docker\n- Jenkins、Travis-CI\n- K8S\n\n4. 开发相关\n- 搭建个人博客 [hexo](https://hexo.io/zh-cn)+[Material X](https://github.com/xaoxuu/hexo-theme-material-x) \n-\n\n","source":"_posts/re-start/fly.md","raw":"---\ntitle: 1.重新出发-起航\ndate: 2019-6-17 15:19:22\nauthor: IGeekFan\ndescription: 每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\ncover: true\ntags:\n- .NET Core\ncategory:\n- 重新出发\n---\n\n## 重新出发\n还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ **.net** framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。\n\n后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本\n\n我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 **.net core**，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 **.NET Core**，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\n\n\n目前用到的一些技术栈、架构风格、开发工具如下\n\nvue.js(SPA)+**.netNET Core**2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)\n\n## .NET Core 可学习的框架，社区等\n0. awesome-dotnet 关于 **.NET Core** 的优秀项目应该都能在这找到 [https://github.com/quozd/awesome-dotnet/](https://github.com/quozd/awesome-dotnet/)\n1. abp vnext ，可参考[https://cn.abp.io/documents/abp/latest/Index](https://cn.abp.io/documents/abp/latest/Index)，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）\n2. surging 专注与 **.net core**下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）\n3. .NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习\n[https://github.com/dotnetcore](https://github.com/dotnetcore)\n4. csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，[https://github.com/2881099/csredis](https://github.com/2881099/csredis)\n5. FreeSql是 **.net 、.net core**的最方便的 ORM,     [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql)（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者\n6. \n\n## 小技巧：\n1. 如果你想找什么资料，去github搜索可以使用\n\n ```awesome``` 关键字、\n ```learn``` +关键字\n\n在https://github.com中 搜索，都能搜索到 最全的教程\n~~~\nawesome vue\nlearn git\nawesome dotnet\n~~~\n\n\n## 技术学习\n\n1.前端相应的知识点\n- es6\n- webpack\n- vue.js\n- vuex\n- vue-router\n- typescript\n- \n\n\n\n2. 后端技术栈\n- nginx\n- linux 如：Ubuntu\n- docker\n- c# 如: .net core 、asp **.net core**\n- java 如: spring boot\n\n3. 运维、部署\n- Docker\n- Jenkins、Travis-CI\n- K8S\n\n4. 开发相关\n- 搭建个人博客 [hexo](https://hexo.io/zh-cn)+[Material X](https://github.com/xaoxuu/hexo-theme-material-x) \n-\n\n","slug":"re-start/fly","published":1,"updated":"2019-10-08T04:21:13.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yml0041m0tw7tqknhl8","content":"<h2 id=\"重新出发\"><a href=\"#重新出发\" class=\"headerlink\" title=\"重新出发\"></a>重新出发</h2><p>还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ <strong>.net</strong> framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。</p>\n<p>后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本</p>\n<p>我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 <strong>.net core</strong>，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 <strong>.NET Core</strong>，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。</p>\n<p>目前用到的一些技术栈、架构风格、开发工具如下</p>\n<p>vue.js(SPA)+<strong>.netNET Core</strong>2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)</p>\n<h2 id=\"NET-Core-可学习的框架，社区等\"><a href=\"#NET-Core-可学习的框架，社区等\" class=\"headerlink\" title=\".NET Core 可学习的框架，社区等\"></a>.NET Core 可学习的框架，社区等</h2><ol start=\"0\">\n<li>awesome-dotnet 关于 <strong>.NET Core</strong> 的优秀项目应该都能在这找到 <a href=\"https://github.com/quozd/awesome-dotnet/\" target=\"_blank\" rel=\"noopener\">https://github.com/quozd/awesome-dotnet/</a></li>\n<li>abp vnext ，可参考<a href=\"https://cn.abp.io/documents/abp/latest/Index\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Index</a>，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）</li>\n<li>surging 专注与 <strong>.net core</strong>下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）</li>\n<li>.NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习<br><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/dotnetcore</a></li>\n<li>csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，<a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n<li>FreeSql是 <strong>.net 、.net core</strong>的最方便的 ORM,     <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a>（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者</li>\n<li></li>\n</ol>\n<h2 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h2><ol>\n<li><p>如果你想找什么资料，去github搜索可以使用</p>\n<p><code>awesome</code> 关键字、<br><code>learn</code> +关键字</p>\n</li>\n</ol>\n<p>在<a href=\"https://github.com中\" target=\"_blank\" rel=\"noopener\">https://github.com中</a> 搜索，都能搜索到 最全的教程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">awesome vue</span><br><span class=\"line\">learn git</span><br><span class=\"line\">awesome dotnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"技术学习\"><a href=\"#技术学习\" class=\"headerlink\" title=\"技术学习\"></a>技术学习</h2><p>1.前端相应的知识点</p>\n<ul>\n<li>es6</li>\n<li>webpack</li>\n<li>vue.js</li>\n<li>vuex</li>\n<li>vue-router</li>\n<li>typescript</li>\n<li></li>\n</ul>\n<ol start=\"2\">\n<li>后端技术栈</li>\n</ol>\n<ul>\n<li>nginx</li>\n<li>linux 如：Ubuntu</li>\n<li>docker</li>\n<li>c# 如: .net core 、asp <strong>.net core</strong></li>\n<li>java 如: spring boot</li>\n</ul>\n<ol start=\"3\">\n<li>运维、部署</li>\n</ol>\n<ul>\n<li>Docker</li>\n<li>Jenkins、Travis-CI</li>\n<li>K8S</li>\n</ul>\n<ol start=\"4\">\n<li>开发相关</li>\n</ol>\n<ul>\n<li>搭建个人博客 <a href=\"https://hexo.io/zh-cn\" target=\"_blank\" rel=\"noopener\">hexo</a>+<a href=\"https://github.com/xaoxuu/hexo-theme-material-x\" target=\"_blank\" rel=\"noopener\">Material X</a> </li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重新出发\"><a href=\"#重新出发\" class=\"headerlink\" title=\"重新出发\"></a>重新出发</h2><p>还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ <strong>.net</strong> framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。</p>\n<p>后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本</p>\n<p>我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 <strong>.net core</strong>，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 <strong>.NET Core</strong>，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。</p>\n<p>目前用到的一些技术栈、架构风格、开发工具如下</p>\n<p>vue.js(SPA)+<strong>.netNET Core</strong>2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)</p>\n<h2 id=\"NET-Core-可学习的框架，社区等\"><a href=\"#NET-Core-可学习的框架，社区等\" class=\"headerlink\" title=\".NET Core 可学习的框架，社区等\"></a>.NET Core 可学习的框架，社区等</h2><ol start=\"0\">\n<li>awesome-dotnet 关于 <strong>.NET Core</strong> 的优秀项目应该都能在这找到 <a href=\"https://github.com/quozd/awesome-dotnet/\" target=\"_blank\" rel=\"noopener\">https://github.com/quozd/awesome-dotnet/</a></li>\n<li>abp vnext ，可参考<a href=\"https://cn.abp.io/documents/abp/latest/Index\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Index</a>，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）</li>\n<li>surging 专注与 <strong>.net core</strong>下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）</li>\n<li>.NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习<br><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/dotnetcore</a></li>\n<li>csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，<a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n<li>FreeSql是 <strong>.net 、.net core</strong>的最方便的 ORM,     <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a>（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者</li>\n<li></li>\n</ol>\n<h2 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h2><ol>\n<li><p>如果你想找什么资料，去github搜索可以使用</p>\n<p><code>awesome</code> 关键字、<br><code>learn</code> +关键字</p>\n</li>\n</ol>\n<p>在<a href=\"https://github.com中\" target=\"_blank\" rel=\"noopener\">https://github.com中</a> 搜索，都能搜索到 最全的教程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">awesome vue</span><br><span class=\"line\">learn git</span><br><span class=\"line\">awesome dotnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"技术学习\"><a href=\"#技术学习\" class=\"headerlink\" title=\"技术学习\"></a>技术学习</h2><p>1.前端相应的知识点</p>\n<ul>\n<li>es6</li>\n<li>webpack</li>\n<li>vue.js</li>\n<li>vuex</li>\n<li>vue-router</li>\n<li>typescript</li>\n<li></li>\n</ul>\n<ol start=\"2\">\n<li>后端技术栈</li>\n</ol>\n<ul>\n<li>nginx</li>\n<li>linux 如：Ubuntu</li>\n<li>docker</li>\n<li>c# 如: .net core 、asp <strong>.net core</strong></li>\n<li>java 如: spring boot</li>\n</ul>\n<ol start=\"3\">\n<li>运维、部署</li>\n</ol>\n<ul>\n<li>Docker</li>\n<li>Jenkins、Travis-CI</li>\n<li>K8S</li>\n</ul>\n<ol start=\"4\">\n<li>开发相关</li>\n</ol>\n<ul>\n<li>搭建个人博客 <a href=\"https://hexo.io/zh-cn\" target=\"_blank\" rel=\"noopener\">hexo</a>+<a href=\"https://github.com/xaoxuu/hexo-theme-material-x\" target=\"_blank\" rel=\"noopener\">Material X</a> </li>\n<li></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"1.重新出发-起航","path":"2019/06/17/re-start/fly/","eyeCatchImage":null,"excerpt":"每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。","date":"2019-06-17T07:19:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":[".NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"2. 重新出发-learn webpack","date":"2019-06-24T14:43:22.000Z","updated":"2019-07-01T14:22:22.000Z","_content":"\n## 重新出发-learn webpack\n\ngithub 上搜索 webpack learn或webpack awesome\n\n- [基于 Webpack4 渐进式教程 为基础](https://github.com/ITxiaohao/webpack4-learn)\n这个非常适合初学者，24个demo，渐进式文档学习，\n- [https://github.com/webpack-china/awesome-webpack-cn](https://github.com/webpack-china/awesome-webpack-cn)\n\n<!-- more -->","source":"_posts/re-start/learn-webpack.md","raw":"---\ntitle: 2. 重新出发-learn webpack\ndate: 2019-6-24 22:43:22\nupdated: 2019-7-1 22:22:22\n# top: 近期更新\ntags:\n- webpack\ncategory:\n- 重新出发\n---\n\n## 重新出发-learn webpack\n\ngithub 上搜索 webpack learn或webpack awesome\n\n- [基于 Webpack4 渐进式教程 为基础](https://github.com/ITxiaohao/webpack4-learn)\n这个非常适合初学者，24个demo，渐进式文档学习，\n- [https://github.com/webpack-china/awesome-webpack-cn](https://github.com/webpack-china/awesome-webpack-cn)\n\n<!-- more -->","slug":"re-start/learn-webpack","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ymv0045m0twch0q2rhc","content":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Jul 01 2019 22:22:22 GMT+0800 (GMT+08:00)","title":"2. 重新出发-learn webpack","path":"2019/06/24/re-start/learn-webpack/","eyeCatchImage":null,"excerpt":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>","date":"2019-06-24T14:43:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":["webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".NET Core 反射获取所有控制器及方法上特定标签.","date":"2019-07-27T09:43:22.000Z","_content":"\n## 获取控制器及方法特性标签\n\n有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。\n\n我们通过反射获取所有控制器下及方法的Attribute。\n\n<!-- more -->\n\n## LinCmsAuthorizeAttribute是什么\n其代码非常简单，用于自定义权限验证，通过重写OnAuthorizationAsync方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就**基于权限的授权**的实现进行研究，实现方法级别的权限验证。\n- [https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html](https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html)\n\n当然，这个只是部分代码，完整代码请查看最下方开源地址，其中LinCmsAuthorizeAttribute继承AuthorizeAttribute，拥有指定角色权限控制，当Permission未指定时，当过滤器与Authorize功能相同。Module是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission属性的值不可重复。\n\n\n```\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter\n{\n    public string Permission { get; set; }\n    public string Module { get; set; }\n\n    public LinCmsAuthorizeAttribute()\n    {\n\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n    {\n        if (Permission == null) return;\n        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));\n        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });\n        if (!authorizationResult.Succeeded)\n        {\n            context.Result = new ForbidResult();\n        }\n    }\n\n    public override string ToString()\n    {\n        return $\"\\\"{base.ToString()}\\\",\\\"Permission:{Permission}\\\",\\\"Module:{Module}\\\",\\\"Roles:{Roles}\\\",\\\"Policy:{Policy}\\\",\\\"AuthenticationSchemes:{AuthenticationSchemes}\\\"\";\n    }\n}\n```\n## Controller\n在 LinCms.Web中的Controller，至于为什么Permission为中文，目前的主要原因，此项目用于适配 [Lin-CMS-VUE](https://github.com/TaleLin/lin-cms-vue)项目,所以于平常我们以某个字符串作为权限名不同，但不须大精小怪，道理相同。\n\n```\n[Route(\"cms/log\")]\n[ApiController]\npublic class LogController : ControllerBase\n{\n    private readonly ILogService _logService;\n\n    public LogController(ILogService logService)\n    {\n        _logService = logService;\n    }\n\n    [HttpGet(\"users\")]\n    [LinCmsAuthorize(\"查询日志记录的用户\", \"日志\")]\n    public List<string> GetLoggedUsers([FromQuery]PageDto pageDto)\n    {\n        return _logService.GetLoggedUsers(pageDto);\n    }\n\n \n    [HttpGet]\n    [LinCmsAuthorize(\"查询所有日志\", \"日志\")]\n    public PagedResultDto<LinLog> GetLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n\n    [HttpGet(\"search\")]\n    [LinCmsAuthorize(\"搜索日志\", \"日志\")]\n    public PagedResultDto<LinLog> SearchLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n}\n```\n## 测试类获取方法上的特定标签\nin xunit test 项目工程中，开始我们的测试\n\n```\n[Fact]\npublic void GetAssemblyMethodsAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(r =>\n    {\n        foreach (var methodInfo in r.GetMethods())\n        {\n            foreach (Attribute attribute in methodInfo.GetCustomAttributes())\n            {\n                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)\n                {\n                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n                }\n            }\n        }\n    });\n}    \n```\n## 方法结果\n可在输出文本中查看，正是我们想要的东西，最后一行，是其他Controller中的内容，而且我们重写了ToString(),所以我们能看到其属性。\n\n```\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询日志记录的用户\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询所有日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:搜索日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查看lin的信息\",\"Module:信息\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\n```\n\n## 获取控制器上特性标签\n```\n/// <summary>\n/// 获取控制器上的LinCmsAuthorizeAttribute\n/// </summary>\n/// \"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n[Fact]\npublic void GetControllerAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(d =>\n    {\n        var linCmsAuthorize = d.GetCustomAttribute<LinCmsAuthorizeAttribute>();\n        if (linCmsAuthorize != null)\n        {\n            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n        }\n    });\n}\n```\n\n## Controller结果\n只有AdminController加了此标签，所以只有一行。\n```\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n```\n\n此时Roles为Administrator，Permission及Module都是null，\n这是因为只有AdminController中加了LinGroup.Administrator=\"Administrator\"字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即\"Administrator,当用户访问AdminController中的方法时，LinCmsAuthorize并没有做相关验证，都是AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。\n```\n[LinCmsAuthorize(Roles = LinGroup.Administrator)]\npublic class AdminController : ControllerBase\n{\n    ...\n}\n```\n\n\n\n## 参考\n- c# – 如何在asp. net core rc2中获取控制器的自定义属性 [https://codeday.me/bug/20181207/453278.html](https://codeday.me/bug/20181207/453278.html)\n\n\n\n## 开源地址\n- [github.com/luoyunchong/lin-cms-dotnetcore](github.com/luoyunchong/lin-cms-dotnetcore)\n\n","source":"_posts/re-start/Reflex-Assembly-Get-Controller-Methods-Attribute.md","raw":"---\ntitle: .NET Core 反射获取所有控制器及方法上特定标签.\ndate: 2019-7-27 17:43:22\ntags:\n- .NET Core\ncategory:\n- .NET Core\n---\n\n## 获取控制器及方法特性标签\n\n有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。\n\n我们通过反射获取所有控制器下及方法的Attribute。\n\n<!-- more -->\n\n## LinCmsAuthorizeAttribute是什么\n其代码非常简单，用于自定义权限验证，通过重写OnAuthorizationAsync方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就**基于权限的授权**的实现进行研究，实现方法级别的权限验证。\n- [https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html](https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html)\n\n当然，这个只是部分代码，完整代码请查看最下方开源地址，其中LinCmsAuthorizeAttribute继承AuthorizeAttribute，拥有指定角色权限控制，当Permission未指定时，当过滤器与Authorize功能相同。Module是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission属性的值不可重复。\n\n\n```\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter\n{\n    public string Permission { get; set; }\n    public string Module { get; set; }\n\n    public LinCmsAuthorizeAttribute()\n    {\n\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n    {\n        if (Permission == null) return;\n        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));\n        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });\n        if (!authorizationResult.Succeeded)\n        {\n            context.Result = new ForbidResult();\n        }\n    }\n\n    public override string ToString()\n    {\n        return $\"\\\"{base.ToString()}\\\",\\\"Permission:{Permission}\\\",\\\"Module:{Module}\\\",\\\"Roles:{Roles}\\\",\\\"Policy:{Policy}\\\",\\\"AuthenticationSchemes:{AuthenticationSchemes}\\\"\";\n    }\n}\n```\n## Controller\n在 LinCms.Web中的Controller，至于为什么Permission为中文，目前的主要原因，此项目用于适配 [Lin-CMS-VUE](https://github.com/TaleLin/lin-cms-vue)项目,所以于平常我们以某个字符串作为权限名不同，但不须大精小怪，道理相同。\n\n```\n[Route(\"cms/log\")]\n[ApiController]\npublic class LogController : ControllerBase\n{\n    private readonly ILogService _logService;\n\n    public LogController(ILogService logService)\n    {\n        _logService = logService;\n    }\n\n    [HttpGet(\"users\")]\n    [LinCmsAuthorize(\"查询日志记录的用户\", \"日志\")]\n    public List<string> GetLoggedUsers([FromQuery]PageDto pageDto)\n    {\n        return _logService.GetLoggedUsers(pageDto);\n    }\n\n \n    [HttpGet]\n    [LinCmsAuthorize(\"查询所有日志\", \"日志\")]\n    public PagedResultDto<LinLog> GetLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n\n    [HttpGet(\"search\")]\n    [LinCmsAuthorize(\"搜索日志\", \"日志\")]\n    public PagedResultDto<LinLog> SearchLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n}\n```\n## 测试类获取方法上的特定标签\nin xunit test 项目工程中，开始我们的测试\n\n```\n[Fact]\npublic void GetAssemblyMethodsAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(r =>\n    {\n        foreach (var methodInfo in r.GetMethods())\n        {\n            foreach (Attribute attribute in methodInfo.GetCustomAttributes())\n            {\n                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)\n                {\n                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n                }\n            }\n        }\n    });\n}    \n```\n## 方法结果\n可在输出文本中查看，正是我们想要的东西，最后一行，是其他Controller中的内容，而且我们重写了ToString(),所以我们能看到其属性。\n\n```\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询日志记录的用户\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询所有日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:搜索日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查看lin的信息\",\"Module:信息\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\n```\n\n## 获取控制器上特性标签\n```\n/// <summary>\n/// 获取控制器上的LinCmsAuthorizeAttribute\n/// </summary>\n/// \"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n[Fact]\npublic void GetControllerAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(d =>\n    {\n        var linCmsAuthorize = d.GetCustomAttribute<LinCmsAuthorizeAttribute>();\n        if (linCmsAuthorize != null)\n        {\n            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n        }\n    });\n}\n```\n\n## Controller结果\n只有AdminController加了此标签，所以只有一行。\n```\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n```\n\n此时Roles为Administrator，Permission及Module都是null，\n这是因为只有AdminController中加了LinGroup.Administrator=\"Administrator\"字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即\"Administrator,当用户访问AdminController中的方法时，LinCmsAuthorize并没有做相关验证，都是AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。\n```\n[LinCmsAuthorize(Roles = LinGroup.Administrator)]\npublic class AdminController : ControllerBase\n{\n    ...\n}\n```\n\n\n\n## 参考\n- c# – 如何在asp. net core rc2中获取控制器的自定义属性 [https://codeday.me/bug/20181207/453278.html](https://codeday.me/bug/20181207/453278.html)\n\n\n\n## 开源地址\n- [github.com/luoyunchong/lin-cms-dotnetcore](github.com/luoyunchong/lin-cms-dotnetcore)\n\n","slug":"re-start/Reflex-Assembly-Get-Controller-Methods-Attribute","published":1,"updated":"2019-10-08T04:21:13.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yn20047m0twinhcwsg7","content":"<h2 id=\"获取控制器及方法特性标签\"><a href=\"#获取控制器及方法特性标签\" class=\"headerlink\" title=\"获取控制器及方法特性标签\"></a>获取控制器及方法特性标签</h2><p>有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。</p>\n<p>我们通过反射获取所有控制器下及方法的Attribute。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"LinCmsAuthorizeAttribute是什么\"><a href=\"#LinCmsAuthorizeAttribute是什么\" class=\"headerlink\" title=\"LinCmsAuthorizeAttribute是什么\"></a>LinCmsAuthorizeAttribute是什么</h2><p>其代码非常简单，用于自定义权限验证，通过重写OnAuthorizationAsync方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html</a></li>\n</ul>\n<p>当然，这个只是部分代码，完整代码请查看最下方开源地址，其中LinCmsAuthorizeAttribute继承AuthorizeAttribute，拥有指定角色权限控制，当Permission未指定时，当过滤器与Authorize功能相同。Module是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission属性的值不可重复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]</span><br><span class=\"line\">public class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Permission &#123; get; set; &#125;</span><br><span class=\"line\">    public string Module &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute(string permission,string module)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Permission = permission;</span><br><span class=\"line\">        Module = module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Permission = permission;</span><br><span class=\"line\">        Module = module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Permission == null) return;</span><br><span class=\"line\">        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));</span><br><span class=\"line\">        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() &#123; Name = Permission &#125;);</span><br><span class=\"line\">        if (!authorizationResult.Succeeded)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Result = new ForbidResult();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;\\&quot;&#123;base.ToString()&#125;\\&quot;,\\&quot;Permission:&#123;Permission&#125;\\&quot;,\\&quot;Module:&#123;Module&#125;\\&quot;,\\&quot;Roles:&#123;Roles&#125;\\&quot;,\\&quot;Policy:&#123;Policy&#125;\\&quot;,\\&quot;AuthenticationSchemes:&#123;AuthenticationSchemes&#125;\\&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h2><p>在 LinCms.Web中的Controller，至于为什么Permission为中文，目前的主要原因，此项目用于适配 <a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">Lin-CMS-VUE</a>项目,所以于平常我们以某个字符串作为权限名不同，但不须大精小怪，道理相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Route(&quot;cms/log&quot;)]</span><br><span class=\"line\">[ApiController]</span><br><span class=\"line\">public class LogController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly ILogService _logService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LogController(ILogService logService)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logService = logService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [HttpGet(&quot;users&quot;)]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;查询日志记录的用户&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public List&lt;string&gt; GetLoggedUsers([FromQuery]PageDto pageDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLoggedUsers(pageDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    [HttpGet]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;查询所有日志&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public PagedResultDto&lt;LinLog&gt; GetLogs([FromQuery]LogSearchDto searchDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLogUsers(searchDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [HttpGet(&quot;search&quot;)]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;搜索日志&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public PagedResultDto&lt;LinLog&gt; SearchLogs([FromQuery]LogSearchDto searchDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLogUsers(searchDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试类获取方法上的特定标签\"><a href=\"#测试类获取方法上的特定标签\" class=\"headerlink\" title=\"测试类获取方法上的特定标签\"></a>测试类获取方法上的特定标签</h2><p>in xunit test 项目工程中，开始我们的测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Fact]</span><br><span class=\"line\">public void GetAssemblyMethodsAttributes()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()</span><br><span class=\"line\">        .Where(type =&gt; typeof(ControllerBase).IsAssignableFrom(type)).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    assembly.ForEach(r =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (var methodInfo in r.GetMethods())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (Attribute attribute in methodInfo.GetCustomAttributes())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法结果\"><a href=\"#方法结果\" class=\"headerlink\" title=\"方法结果\"></a>方法结果</h2><p>可在输出文本中查看，正是我们想要的东西，最后一行，是其他Controller中的内容，而且我们重写了ToString(),所以我们能看到其属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查询日志记录的用户&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查询所有日志&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:搜索日志&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查看lin的信息&quot;,&quot;Module:信息&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取控制器上特性标签\"><a href=\"#获取控制器上特性标签\" class=\"headerlink\" title=\"获取控制器上特性标签\"></a>获取控制器上特性标签</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 获取控制器上的LinCmsAuthorizeAttribute</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:&quot;,&quot;Module:&quot;,&quot;Roles:Administrator&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">[Fact]</span><br><span class=\"line\">public void GetControllerAttributes()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()</span><br><span class=\"line\">        .Where(type =&gt; typeof(ControllerBase).IsAssignableFrom(type)).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    assembly.ForEach(d =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var linCmsAuthorize = d.GetCustomAttribute&lt;LinCmsAuthorizeAttribute&gt;();</span><br><span class=\"line\">        if (linCmsAuthorize != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Controller结果\"><a href=\"#Controller结果\" class=\"headerlink\" title=\"Controller结果\"></a>Controller结果</h2><p>只有AdminController加了此标签，所以只有一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:&quot;,&quot;Module:&quot;,&quot;Roles:Administrator&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br></pre></td></tr></table></figure>\n\n<p>此时Roles为Administrator，Permission及Module都是null，<br>这是因为只有AdminController中加了LinGroup.Administrator=”Administrator”字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即”Administrator,当用户访问AdminController中的方法时，LinCmsAuthorize并没有做相关验证，都是AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[LinCmsAuthorize(Roles = LinGroup.Administrator)]</span><br><span class=\"line\">public class AdminController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>c# – 如何在asp. net core rc2中获取控制器的自定义属性 <a href=\"https://codeday.me/bug/20181207/453278.html\" target=\"_blank\" rel=\"noopener\">https://codeday.me/bug/20181207/453278.html</a></li>\n</ul>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><ul>\n<li><a href=\"github.com/luoyunchong/lin-cms-dotnetcore\">github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"获取控制器及方法特性标签\"><a href=\"#获取控制器及方法特性标签\" class=\"headerlink\" title=\"获取控制器及方法特性标签\"></a>获取控制器及方法特性标签</h2><p>有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。</p>\n<p>我们通过反射获取所有控制器下及方法的Attribute。</p>","more":"<h2 id=\"LinCmsAuthorizeAttribute是什么\"><a href=\"#LinCmsAuthorizeAttribute是什么\" class=\"headerlink\" title=\"LinCmsAuthorizeAttribute是什么\"></a>LinCmsAuthorizeAttribute是什么</h2><p>其代码非常简单，用于自定义权限验证，通过重写OnAuthorizationAsync方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html</a></li>\n</ul>\n<p>当然，这个只是部分代码，完整代码请查看最下方开源地址，其中LinCmsAuthorizeAttribute继承AuthorizeAttribute，拥有指定角色权限控制，当Permission未指定时，当过滤器与Authorize功能相同。Module是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission属性的值不可重复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]</span><br><span class=\"line\">public class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string Permission &#123; get; set; &#125;</span><br><span class=\"line\">    public string Module &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute(string permission,string module)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Permission = permission;</span><br><span class=\"line\">        Module = module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Permission = permission;</span><br><span class=\"line\">        Module = module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Permission == null) return;</span><br><span class=\"line\">        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));</span><br><span class=\"line\">        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() &#123; Name = Permission &#125;);</span><br><span class=\"line\">        if (!authorizationResult.Succeeded)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Result = new ForbidResult();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;\\&quot;&#123;base.ToString()&#125;\\&quot;,\\&quot;Permission:&#123;Permission&#125;\\&quot;,\\&quot;Module:&#123;Module&#125;\\&quot;,\\&quot;Roles:&#123;Roles&#125;\\&quot;,\\&quot;Policy:&#123;Policy&#125;\\&quot;,\\&quot;AuthenticationSchemes:&#123;AuthenticationSchemes&#125;\\&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h2><p>在 LinCms.Web中的Controller，至于为什么Permission为中文，目前的主要原因，此项目用于适配 <a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">Lin-CMS-VUE</a>项目,所以于平常我们以某个字符串作为权限名不同，但不须大精小怪，道理相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Route(&quot;cms/log&quot;)]</span><br><span class=\"line\">[ApiController]</span><br><span class=\"line\">public class LogController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly ILogService _logService;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LogController(ILogService logService)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logService = logService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [HttpGet(&quot;users&quot;)]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;查询日志记录的用户&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public List&lt;string&gt; GetLoggedUsers([FromQuery]PageDto pageDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLoggedUsers(pageDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    [HttpGet]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;查询所有日志&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public PagedResultDto&lt;LinLog&gt; GetLogs([FromQuery]LogSearchDto searchDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLogUsers(searchDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [HttpGet(&quot;search&quot;)]</span><br><span class=\"line\">    [LinCmsAuthorize(&quot;搜索日志&quot;, &quot;日志&quot;)]</span><br><span class=\"line\">    public PagedResultDto&lt;LinLog&gt; SearchLogs([FromQuery]LogSearchDto searchDto)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return _logService.GetLogUsers(searchDto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试类获取方法上的特定标签\"><a href=\"#测试类获取方法上的特定标签\" class=\"headerlink\" title=\"测试类获取方法上的特定标签\"></a>测试类获取方法上的特定标签</h2><p>in xunit test 项目工程中，开始我们的测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Fact]</span><br><span class=\"line\">public void GetAssemblyMethodsAttributes()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()</span><br><span class=\"line\">        .Where(type =&gt; typeof(ControllerBase).IsAssignableFrom(type)).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    assembly.ForEach(r =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (var methodInfo in r.GetMethods())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (Attribute attribute in methodInfo.GetCustomAttributes())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法结果\"><a href=\"#方法结果\" class=\"headerlink\" title=\"方法结果\"></a>方法结果</h2><p>可在输出文本中查看，正是我们想要的东西，最后一行，是其他Controller中的内容，而且我们重写了ToString(),所以我们能看到其属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查询日志记录的用户&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查询所有日志&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:搜索日志&quot;,&quot;Module:日志&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:查看lin的信息&quot;,&quot;Module:信息&quot;,&quot;Roles:&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取控制器上特性标签\"><a href=\"#获取控制器上特性标签\" class=\"headerlink\" title=\"获取控制器上特性标签\"></a>获取控制器上特性标签</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// 获取控制器上的LinCmsAuthorizeAttribute</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:&quot;,&quot;Module:&quot;,&quot;Roles:Administrator&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br><span class=\"line\">[Fact]</span><br><span class=\"line\">public void GetControllerAttributes()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()</span><br><span class=\"line\">        .Where(type =&gt; typeof(ControllerBase).IsAssignableFrom(type)).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    assembly.ForEach(d =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var linCmsAuthorize = d.GetCustomAttribute&lt;LinCmsAuthorizeAttribute&gt;();</span><br><span class=\"line\">        if (linCmsAuthorize != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Controller结果\"><a href=\"#Controller结果\" class=\"headerlink\" title=\"Controller结果\"></a>Controller结果</h2><p>只有AdminController加了此标签，所以只有一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;LinCms.Zero.Authorization.LinCmsAuthorizeAttribute&quot;,&quot;Permission:&quot;,&quot;Module:&quot;,&quot;Roles:Administrator&quot;,&quot;Policy:&quot;,&quot;AuthenticationSchemes:&quot;</span><br></pre></td></tr></table></figure>\n\n<p>此时Roles为Administrator，Permission及Module都是null，<br>这是因为只有AdminController中加了LinGroup.Administrator=”Administrator”字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即”Administrator,当用户访问AdminController中的方法时，LinCmsAuthorize并没有做相关验证，都是AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[LinCmsAuthorize(Roles = LinGroup.Administrator)]</span><br><span class=\"line\">public class AdminController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>c# – 如何在asp. net core rc2中获取控制器的自定义属性 <a href=\"https://codeday.me/bug/20181207/453278.html\" target=\"_blank\" rel=\"noopener\">https://codeday.me/bug/20181207/453278.html</a></li>\n</ul>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><ul>\n<li><a href=\"github.com/luoyunchong/lin-cms-dotnetcore\">github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":".NET Core 反射获取所有控制器及方法上特定标签.","path":"2019/07/27/re-start/Reflex-Assembly-Get-Controller-Methods-Attribute/","eyeCatchImage":null,"excerpt":"<h2 id=\"获取控制器及方法特性标签\"><a href=\"#获取控制器及方法特性标签\" class=\"headerlink\" title=\"获取控制器及方法特性标签\"></a>获取控制器及方法特性标签</h2><p>有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。</p>\n<p>我们通过反射获取所有控制器下及方法的Attribute。</p>","date":"2019-07-27T09:43:22.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":[".NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"为什么我们要使用DTO","date":"2019-08-23T03:19:22.000Z","author":"天上有木月","description":"一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。","cover":true,"_content":"\n### 基础结构解释\n- UI-表现层-与控制器打交道（UI向Controller 传递数据时使用DTO(数据传输对象)）\n- Service-应用服务层\n- Domain 领域对象\n- DTO 数据传输对象，一般只包含基础的Get,Set功能，也会包含一些数据验证，如必填项，大小，自定义规则等。\n\n一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。\n\n1. 比如：Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信息，那么CustomerDTO中也无需包含这个 Address的数据。\n\n2. 比如：User表设计字段如下：Id,UserName,Password,RegisterTime。注册时，那这个接口的参数应该只有UserName,Password，因为RegisterTime是后台赋值的，Id是数据库自动生成的。即设计一个RegisterDto,只包含UserName,Password二个字段，作为注册接口的参数。不然，那二个参数对于开发前端的人来说是无意义的，因为传递也没有效果。所以不应该暴露给前端使用。\n\n以上即领域对象来实现业务，DTO只注重数据。\n\nUI->Controller（通过 DTO完成数据传输，表单验证）->Service(操作Domain，完成业务服务)。\nDTO->Domain，在C#中可使用一些类库，快速将二个类相互转换。[良好的设计什么要使用DTO，集成 AutoMapper](https://www.jianshu.com/p/46770bef1f09)\n\n>标题：为什么我们要使用DTO\n> 作者：天上有木月\n> 出处：[https://www.cnblogs.com/igeekfan/p/11400900.html](https://www.cnblogs.com/igeekfan/p/11400900.html)\n> 版权：本站使用「署名 4.0 国际」创作共享协议，转载请在文章明显位置注明作者及出处。","source":"_posts/re-start/why-we-use-dto.md","raw":"---\ntitle: 为什么我们要使用DTO\ndate: 2019-8-23 11:19:22\nauthor: 天上有木月\ndescription: 一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。\ncover: true\ncategory:\n- 重新出发\n---\n\n### 基础结构解释\n- UI-表现层-与控制器打交道（UI向Controller 传递数据时使用DTO(数据传输对象)）\n- Service-应用服务层\n- Domain 领域对象\n- DTO 数据传输对象，一般只包含基础的Get,Set功能，也会包含一些数据验证，如必填项，大小，自定义规则等。\n\n一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。\n\n1. 比如：Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信息，那么CustomerDTO中也无需包含这个 Address的数据。\n\n2. 比如：User表设计字段如下：Id,UserName,Password,RegisterTime。注册时，那这个接口的参数应该只有UserName,Password，因为RegisterTime是后台赋值的，Id是数据库自动生成的。即设计一个RegisterDto,只包含UserName,Password二个字段，作为注册接口的参数。不然，那二个参数对于开发前端的人来说是无意义的，因为传递也没有效果。所以不应该暴露给前端使用。\n\n以上即领域对象来实现业务，DTO只注重数据。\n\nUI->Controller（通过 DTO完成数据传输，表单验证）->Service(操作Domain，完成业务服务)。\nDTO->Domain，在C#中可使用一些类库，快速将二个类相互转换。[良好的设计什么要使用DTO，集成 AutoMapper](https://www.jianshu.com/p/46770bef1f09)\n\n>标题：为什么我们要使用DTO\n> 作者：天上有木月\n> 出处：[https://www.cnblogs.com/igeekfan/p/11400900.html](https://www.cnblogs.com/igeekfan/p/11400900.html)\n> 版权：本站使用「署名 4.0 国际」创作共享协议，转载请在文章明显位置注明作者及出处。","slug":"re-start/why-we-use-dto","published":1,"updated":"2019-10-08T04:21:13.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yn8004am0twj5i26zfr","content":"<h3 id=\"基础结构解释\"><a href=\"#基础结构解释\" class=\"headerlink\" title=\"基础结构解释\"></a>基础结构解释</h3><ul>\n<li>UI-表现层-与控制器打交道（UI向Controller 传递数据时使用DTO(数据传输对象)）</li>\n<li>Service-应用服务层</li>\n<li>Domain 领域对象</li>\n<li>DTO 数据传输对象，一般只包含基础的Get,Set功能，也会包含一些数据验证，如必填项，大小，自定义规则等。</li>\n</ul>\n<p>一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。</p>\n<ol>\n<li><p>比如：Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信息，那么CustomerDTO中也无需包含这个 Address的数据。</p>\n</li>\n<li><p>比如：User表设计字段如下：Id,UserName,Password,RegisterTime。注册时，那这个接口的参数应该只有UserName,Password，因为RegisterTime是后台赋值的，Id是数据库自动生成的。即设计一个RegisterDto,只包含UserName,Password二个字段，作为注册接口的参数。不然，那二个参数对于开发前端的人来说是无意义的，因为传递也没有效果。所以不应该暴露给前端使用。</p>\n</li>\n</ol>\n<p>以上即领域对象来实现业务，DTO只注重数据。</p>\n<p>UI-&gt;Controller（通过 DTO完成数据传输，表单验证）-&gt;Service(操作Domain，完成业务服务)。<br>DTO-&gt;Domain，在C#中可使用一些类库，快速将二个类相互转换。<a href=\"https://www.jianshu.com/p/46770bef1f09\" target=\"_blank\" rel=\"noopener\">良好的设计什么要使用DTO，集成 AutoMapper</a></p>\n<blockquote>\n<p>标题：为什么我们要使用DTO<br>作者：天上有木月<br>出处：<a href=\"https://www.cnblogs.com/igeekfan/p/11400900.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/igeekfan/p/11400900.html</a><br>版权：本站使用「署名 4.0 国际」创作共享协议，转载请在文章明显位置注明作者及出处。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基础结构解释\"><a href=\"#基础结构解释\" class=\"headerlink\" title=\"基础结构解释\"></a>基础结构解释</h3><ul>\n<li>UI-表现层-与控制器打交道（UI向Controller 传递数据时使用DTO(数据传输对象)）</li>\n<li>Service-应用服务层</li>\n<li>Domain 领域对象</li>\n<li>DTO 数据传输对象，一般只包含基础的Get,Set功能，也会包含一些数据验证，如必填项，大小，自定义规则等。</li>\n</ul>\n<p>一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。</p>\n<ol>\n<li><p>比如：Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信息，那么CustomerDTO中也无需包含这个 Address的数据。</p>\n</li>\n<li><p>比如：User表设计字段如下：Id,UserName,Password,RegisterTime。注册时，那这个接口的参数应该只有UserName,Password，因为RegisterTime是后台赋值的，Id是数据库自动生成的。即设计一个RegisterDto,只包含UserName,Password二个字段，作为注册接口的参数。不然，那二个参数对于开发前端的人来说是无意义的，因为传递也没有效果。所以不应该暴露给前端使用。</p>\n</li>\n</ol>\n<p>以上即领域对象来实现业务，DTO只注重数据。</p>\n<p>UI-&gt;Controller（通过 DTO完成数据传输，表单验证）-&gt;Service(操作Domain，完成业务服务)。<br>DTO-&gt;Domain，在C#中可使用一些类库，快速将二个类相互转换。<a href=\"https://www.jianshu.com/p/46770bef1f09\" target=\"_blank\" rel=\"noopener\">良好的设计什么要使用DTO，集成 AutoMapper</a></p>\n<blockquote>\n<p>标题：为什么我们要使用DTO<br>作者：天上有木月<br>出处：<a href=\"https://www.cnblogs.com/igeekfan/p/11400900.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/igeekfan/p/11400900.html</a><br>版权：本站使用「署名 4.0 国际」创作共享协议，转载请在文章明显位置注明作者及出处。</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"为什么我们要使用DTO","path":"2019/08/23/re-start/why-we-use-dto/","eyeCatchImage":null,"excerpt":"一个完整的业务是通过领域实体（对象）domain建立的，而DTO是根据UI的需求来设计的。","date":"2019-08-23T03:19:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"csredis-in-asp.net core理论实战-使用示例","date":"2019-07-07T13:09:07.000Z","_content":"\n## csredis GitHub\n* https://github.com/2881099/csredis\n## 示例源码\nhttps://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis\n## 前提\n* 安装并配置好redis服务，可用。\n* vs2017或vs2019或vscode\n* .net core 2.2+ sdk\n<!-- more -->\n创建一个. NET Core WebAPI项目\n\n想执行 . NET Core CLI命令行，要cd到csproj同级目录中\n```\ndotnet add package CSRedisCore\n#mvc分布式缓存注入\ndotnet add package Caching.CSRedis\n```\n或\n程序包管理控制台(Package Manager)中运行，选择你的项目\n```\nInstall-Package CSRedisCore\nInstall-Package Caching.CSRedis\n```\n\n### 普通模式\n1. appsettings.json配置项\n\n```\n{\n  \"CsRedisConfig\": {\n    \"DefaultConnectString\": \"127.0.0.1:6379,password=,defaultDatabase=0,prefix=csredis-default-\"\n  }\n}\n```\n\n2. Startup.cs中配置如下\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    // eg 1.单个redis实现 普通模式\n    //CSRedisClient csredis = new CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=csredis,prefix=csredis-example\");\n   //eg 2.单个redis，使用appsettings.json中的配置项\n    IConfigurationSection configurationSection = Configuration.GetSection(\"CsRedisConfig:DefaultConnectString\");\n    CSRedisClient csredis = new CSRedisClient(configurationSection.Value);\n\n    //初始化 RedisHelper\n    RedisHelper.Initialization(csredis);\n    //注册mvc分布式缓存\n    services.AddSingleton<IDistributedCache>(new CSRedisCache(RedisHelper.Instance));\n\n    ...其他代码\n   \n}\n```\n3. ValuesController.cs\n\n通过静态方法调用，键为test1 ,value为前台传来的值，缓存60s\n\n获取值Get方法， test1作为键，返回值给前台。60s后再获取，将无法得到值。\n```\n// POST api/values\n[HttpPost]\npublic void Post([FromBody] string value)\n{\n    RedisHelper.Set(\"test1\", value, 60);\n}\n\n// GET api/values\n[HttpGet]\npublic ActionResult<string> Get()\n{\n    return RedisHelper.Get(\"test1\");\n}\n\n```\n### 普通模式-控制台\n```\n   class Program\n    {\n        static void Main(string[] args)\n        {\n            var csredis = new CSRedis.CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example\");\n            RedisHelper.Initialization(csredis);\n\n            RedisHelper.Set(\"test1\", \"123123\", 60);\n            string result = RedisHelper.Get(\"test1\");\n            Console.WriteLine(\"key:test1,value:\" + result);\n\n            Console.ReadKey();\n        }\n    }\n```\n\n### 哨兵模式\n前提\n* 了解哨兵模式的作用\n* 并有一个可用的主（master）redis服务,二个从（slaver）服务，有三个哨兵监控。\n\n1. appsettings.json配置项\n```\n{\n  \"CsRedisConfig\": {\n    \"SentinelConnectString\": \"mymaster,password=,prefix=csredis-example-\",\n    \"Sentinel\": [\n      \"127.0.0.1:26379\",\n      \"127.0.0.1:26380\",\n      \"127.0.0.1:26381\"\n    ]\n  }\n}\n\n```\n2. Startup.cs中配置如下\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    //eg.3 使用appsettings.json,哨兵模式\n    IConfigurationSection configurationSection = Configuration.GetSection(\"CsRedisConfig:SentinelConnectString\");\n\n    string[] sentinelValues = Configuration.GetSection(\"CsRedisConfig:Sentinel\").Get<string[]>();\n\n    CSRedisClient csredis = new CSRedisClient(configurationSection.Value, sentinelValues);\n\n    //初始化 RedisHelper\n    RedisHelper.Initialization(csredis);\n    //注册mvc分布式缓存\n    services.AddSingleton<IDistributedCache>(new CSRedisCache(RedisHelper.Instance));\n\n    ...其他代码\n}\n\n```\n3. 使用缓存时与普通模式相同，不过关闭某一个redis服务，服务依旧可用，不过如果redis处于切换cluster过程，将会有短暂的失败，不过一会就会恢复。    \n\n\n## 相关文章\n* .NET Core开发者的福音之玩转Redis的又一傻瓜式神器推荐 https://www.cnblogs.com/yilezhu/p/9947905.html\n* 【由浅至深】redis 实现发布订阅的几种方式 https://www.cnblogs.com/kellynic/p/9952386.html\n* 深入剖析Redis系列(四) - Redis数据结构与全局命令概述 https://juejin.im/post/5bb01064e51d453eb93d8028\n\nRedisHelper 与redis-cli命令行保持一致的api，会使用redis相关命令，即会使用RedisHelper方法\n\n\n### 配合redis-cli命令行\n```\n  static void Main()\n    {\n        CSRedisClient csredis = new CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example\");\n        RedisHelper.Initialization(csredis);\n    \n        Test();\n        Console.ReadKey();\n    }\n\n    static void Test()\n    {\n     //1.set key value [ex seconds] [px milliseconds] [nx|xx]\n    //setex key seconds value #设定键的值，并指定此键值对应的 有效时间。\n    //setnx key value  #键必须 不存在，才可以设置成功。如果键已经存在，返回 0。\n    RedisHelper.Set(\"redis-key\", \"just a string value\", 50);//setex \"redis-key\" 50 \"just a string value\"\n\n    RedisHelper.Set(\"redis-key-class\",DateTime.Now, 30);\n\n    //1.1.2. 获取值\n    //get key\n    //如果要获取的 键不存在，则返回 nil（空）。\n    string redisValue = RedisHelper.Get(\"redis-key\");\n    Console.WriteLine($\"setex redis-key 50 just a string value ,RedisHelper.Get()得到值如下：{redisValue}\");\n    DateTime now = RedisHelper.Get<DateTime>(\"redis-key-class\");\n    Console.WriteLine($\"setex redis-key-class DateTime.Now,RedisHelper.Get()值如下{now}\");\n\n    //1.1.3. 批量设置值\n    //mset key value [key value ...]\n    RedisHelper.MSet(\"a\", \"1\", \"b\", \"2\", \"c\", \"3\",\"d\",\"4\");//等价于mset a 1 b 2 c 3 d 4\n\n\n    //1.1.4. 批量获取值\n    //mget key [key ...]\n\n    string[] mgetValues = RedisHelper.MGet<string>(\"a\", \"b\", \"c\",\"d\");\n    Console.WriteLine($\"mset a 1 b 2 c 3 d 4, RedisHelper.MGet()得到的值是\");\n    foreach (var mgetValue in mgetValues)\n    {\n        Console.Write($\"{mgetValue}、\");\n    }\n    Console.WriteLine();\n\n    //1.1.5. 计数\n    //incr key\n    //incr 命令用于对值做 自增操作\n\n    //自增指定数字\n    long incr = RedisHelper.IncrBy(\"key\");\n    Console.WriteLine($\"incr key, incr得到的值是{incr}\");\n    //设置自增数字的增量值\n    incr = RedisHelper.IncrBy(\"key\",2);\n    Console.WriteLine($\"再次incrby key 2, incr得到的值是{incr}\");\n\n    incr = RedisHelper.IncrBy(\"key\", -2);\n    Console.WriteLine($\"再次decrby key -2, incr得到的值是{incr}\");\n\n    //exists key\n    bool isExistsKey = RedisHelper.Exists(\"new-key\");\n    Console.WriteLine($\"exists key ,value：{isExistsKey}\");\n\n    double incrByFloat=RedisHelper.IncrByFloat(\"key-float\", 0.1);\n    Console.WriteLine($\"incrbyfloat key-float 0.1,value：{incrByFloat}\");\n    }\n```","source":"_posts/re-start/csredis-in-asp.net-core-how-to-use.md","raw":"---\ntitle: csredis-in-asp.net core理论实战-使用示例\ndate: 2019-07-07 21:09:07\ntags:\n- Redis\n- ASP.NET Core\ncategory:\n- 重新出发\n---\n\n## csredis GitHub\n* https://github.com/2881099/csredis\n## 示例源码\nhttps://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis\n## 前提\n* 安装并配置好redis服务，可用。\n* vs2017或vs2019或vscode\n* .net core 2.2+ sdk\n<!-- more -->\n创建一个. NET Core WebAPI项目\n\n想执行 . NET Core CLI命令行，要cd到csproj同级目录中\n```\ndotnet add package CSRedisCore\n#mvc分布式缓存注入\ndotnet add package Caching.CSRedis\n```\n或\n程序包管理控制台(Package Manager)中运行，选择你的项目\n```\nInstall-Package CSRedisCore\nInstall-Package Caching.CSRedis\n```\n\n### 普通模式\n1. appsettings.json配置项\n\n```\n{\n  \"CsRedisConfig\": {\n    \"DefaultConnectString\": \"127.0.0.1:6379,password=,defaultDatabase=0,prefix=csredis-default-\"\n  }\n}\n```\n\n2. Startup.cs中配置如下\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    // eg 1.单个redis实现 普通模式\n    //CSRedisClient csredis = new CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=csredis,prefix=csredis-example\");\n   //eg 2.单个redis，使用appsettings.json中的配置项\n    IConfigurationSection configurationSection = Configuration.GetSection(\"CsRedisConfig:DefaultConnectString\");\n    CSRedisClient csredis = new CSRedisClient(configurationSection.Value);\n\n    //初始化 RedisHelper\n    RedisHelper.Initialization(csredis);\n    //注册mvc分布式缓存\n    services.AddSingleton<IDistributedCache>(new CSRedisCache(RedisHelper.Instance));\n\n    ...其他代码\n   \n}\n```\n3. ValuesController.cs\n\n通过静态方法调用，键为test1 ,value为前台传来的值，缓存60s\n\n获取值Get方法， test1作为键，返回值给前台。60s后再获取，将无法得到值。\n```\n// POST api/values\n[HttpPost]\npublic void Post([FromBody] string value)\n{\n    RedisHelper.Set(\"test1\", value, 60);\n}\n\n// GET api/values\n[HttpGet]\npublic ActionResult<string> Get()\n{\n    return RedisHelper.Get(\"test1\");\n}\n\n```\n### 普通模式-控制台\n```\n   class Program\n    {\n        static void Main(string[] args)\n        {\n            var csredis = new CSRedis.CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example\");\n            RedisHelper.Initialization(csredis);\n\n            RedisHelper.Set(\"test1\", \"123123\", 60);\n            string result = RedisHelper.Get(\"test1\");\n            Console.WriteLine(\"key:test1,value:\" + result);\n\n            Console.ReadKey();\n        }\n    }\n```\n\n### 哨兵模式\n前提\n* 了解哨兵模式的作用\n* 并有一个可用的主（master）redis服务,二个从（slaver）服务，有三个哨兵监控。\n\n1. appsettings.json配置项\n```\n{\n  \"CsRedisConfig\": {\n    \"SentinelConnectString\": \"mymaster,password=,prefix=csredis-example-\",\n    \"Sentinel\": [\n      \"127.0.0.1:26379\",\n      \"127.0.0.1:26380\",\n      \"127.0.0.1:26381\"\n    ]\n  }\n}\n\n```\n2. Startup.cs中配置如下\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    //eg.3 使用appsettings.json,哨兵模式\n    IConfigurationSection configurationSection = Configuration.GetSection(\"CsRedisConfig:SentinelConnectString\");\n\n    string[] sentinelValues = Configuration.GetSection(\"CsRedisConfig:Sentinel\").Get<string[]>();\n\n    CSRedisClient csredis = new CSRedisClient(configurationSection.Value, sentinelValues);\n\n    //初始化 RedisHelper\n    RedisHelper.Initialization(csredis);\n    //注册mvc分布式缓存\n    services.AddSingleton<IDistributedCache>(new CSRedisCache(RedisHelper.Instance));\n\n    ...其他代码\n}\n\n```\n3. 使用缓存时与普通模式相同，不过关闭某一个redis服务，服务依旧可用，不过如果redis处于切换cluster过程，将会有短暂的失败，不过一会就会恢复。    \n\n\n## 相关文章\n* .NET Core开发者的福音之玩转Redis的又一傻瓜式神器推荐 https://www.cnblogs.com/yilezhu/p/9947905.html\n* 【由浅至深】redis 实现发布订阅的几种方式 https://www.cnblogs.com/kellynic/p/9952386.html\n* 深入剖析Redis系列(四) - Redis数据结构与全局命令概述 https://juejin.im/post/5bb01064e51d453eb93d8028\n\nRedisHelper 与redis-cli命令行保持一致的api，会使用redis相关命令，即会使用RedisHelper方法\n\n\n### 配合redis-cli命令行\n```\n  static void Main()\n    {\n        CSRedisClient csredis = new CSRedisClient(\"127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example\");\n        RedisHelper.Initialization(csredis);\n    \n        Test();\n        Console.ReadKey();\n    }\n\n    static void Test()\n    {\n     //1.set key value [ex seconds] [px milliseconds] [nx|xx]\n    //setex key seconds value #设定键的值，并指定此键值对应的 有效时间。\n    //setnx key value  #键必须 不存在，才可以设置成功。如果键已经存在，返回 0。\n    RedisHelper.Set(\"redis-key\", \"just a string value\", 50);//setex \"redis-key\" 50 \"just a string value\"\n\n    RedisHelper.Set(\"redis-key-class\",DateTime.Now, 30);\n\n    //1.1.2. 获取值\n    //get key\n    //如果要获取的 键不存在，则返回 nil（空）。\n    string redisValue = RedisHelper.Get(\"redis-key\");\n    Console.WriteLine($\"setex redis-key 50 just a string value ,RedisHelper.Get()得到值如下：{redisValue}\");\n    DateTime now = RedisHelper.Get<DateTime>(\"redis-key-class\");\n    Console.WriteLine($\"setex redis-key-class DateTime.Now,RedisHelper.Get()值如下{now}\");\n\n    //1.1.3. 批量设置值\n    //mset key value [key value ...]\n    RedisHelper.MSet(\"a\", \"1\", \"b\", \"2\", \"c\", \"3\",\"d\",\"4\");//等价于mset a 1 b 2 c 3 d 4\n\n\n    //1.1.4. 批量获取值\n    //mget key [key ...]\n\n    string[] mgetValues = RedisHelper.MGet<string>(\"a\", \"b\", \"c\",\"d\");\n    Console.WriteLine($\"mset a 1 b 2 c 3 d 4, RedisHelper.MGet()得到的值是\");\n    foreach (var mgetValue in mgetValues)\n    {\n        Console.Write($\"{mgetValue}、\");\n    }\n    Console.WriteLine();\n\n    //1.1.5. 计数\n    //incr key\n    //incr 命令用于对值做 自增操作\n\n    //自增指定数字\n    long incr = RedisHelper.IncrBy(\"key\");\n    Console.WriteLine($\"incr key, incr得到的值是{incr}\");\n    //设置自增数字的增量值\n    incr = RedisHelper.IncrBy(\"key\",2);\n    Console.WriteLine($\"再次incrby key 2, incr得到的值是{incr}\");\n\n    incr = RedisHelper.IncrBy(\"key\", -2);\n    Console.WriteLine($\"再次decrby key -2, incr得到的值是{incr}\");\n\n    //exists key\n    bool isExistsKey = RedisHelper.Exists(\"new-key\");\n    Console.WriteLine($\"exists key ,value：{isExistsKey}\");\n\n    double incrByFloat=RedisHelper.IncrByFloat(\"key-float\", 0.1);\n    Console.WriteLine($\"incrbyfloat key-float 0.1,value：{incrByFloat}\");\n    }\n```","slug":"re-start/csredis-in-asp.net-core-how-to-use","published":1,"updated":"2019-10-08T04:21:13.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ypd005bm0tw1w5tifyi","content":"<h2 id=\"csredis-GitHub\"><a href=\"#csredis-GitHub\" class=\"headerlink\" title=\"csredis GitHub\"></a>csredis GitHub</h2><ul>\n<li><a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a><h2 id=\"示例源码\"><a href=\"#示例源码\" class=\"headerlink\" title=\"示例源码\"></a>示例源码</h2><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis</a><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2></li>\n<li>安装并配置好redis服务，可用。</li>\n<li>vs2017或vs2019或vscode</li>\n<li>.net core 2.2+ sdk<a id=\"more\"></a>\n创建一个. NET Core WebAPI项目</li>\n</ul>\n<p>想执行 . NET Core CLI命令行，要cd到csproj同级目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet add package CSRedisCore</span><br><span class=\"line\">#mvc分布式缓存注入</span><br><span class=\"line\">dotnet add package Caching.CSRedis</span><br></pre></td></tr></table></figure>\n\n<p>或<br>程序包管理控制台(Package Manager)中运行，选择你的项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package CSRedisCore</span><br><span class=\"line\">Install-Package Caching.CSRedis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式\"><a href=\"#普通模式\" class=\"headerlink\" title=\"普通模式\"></a>普通模式</h3><ol>\n<li>appsettings.json配置项</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CsRedisConfig&quot;: &#123;</span><br><span class=\"line\">    &quot;DefaultConnectString&quot;: &quot;127.0.0.1:6379,password=,defaultDatabase=0,prefix=csredis-default-&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>Startup.cs中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // eg 1.单个redis实现 普通模式</span><br><span class=\"line\">    //CSRedisClient csredis = new CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=csredis,prefix=csredis-example&quot;);</span><br><span class=\"line\">   //eg 2.单个redis，使用appsettings.json中的配置项</span><br><span class=\"line\">    IConfigurationSection configurationSection = Configuration.GetSection(&quot;CsRedisConfig:DefaultConnectString&quot;);</span><br><span class=\"line\">    CSRedisClient csredis = new CSRedisClient(configurationSection.Value);</span><br><span class=\"line\"></span><br><span class=\"line\">    //初始化 RedisHelper</span><br><span class=\"line\">    RedisHelper.Initialization(csredis);</span><br><span class=\"line\">    //注册mvc分布式缓存</span><br><span class=\"line\">    services.AddSingleton&lt;IDistributedCache&gt;(new CSRedisCache(RedisHelper.Instance));</span><br><span class=\"line\"></span><br><span class=\"line\">    ...其他代码</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ValuesController.cs</p>\n</li>\n</ol>\n<p>通过静态方法调用，键为test1 ,value为前台传来的值，缓存60s</p>\n<p>获取值Get方法， test1作为键，返回值给前台。60s后再获取，将无法得到值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// POST api/values</span><br><span class=\"line\">[HttpPost]</span><br><span class=\"line\">public void Post([FromBody] string value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RedisHelper.Set(&quot;test1&quot;, value, 60);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// GET api/values</span><br><span class=\"line\">[HttpGet]</span><br><span class=\"line\">public ActionResult&lt;string&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return RedisHelper.Get(&quot;test1&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式-控制台\"><a href=\"#普通模式-控制台\" class=\"headerlink\" title=\"普通模式-控制台\"></a>普通模式-控制台</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Program</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     static void Main(string[] args)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         var csredis = new CSRedis.CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example&quot;);</span><br><span class=\"line\">         RedisHelper.Initialization(csredis);</span><br><span class=\"line\"></span><br><span class=\"line\">         RedisHelper.Set(&quot;test1&quot;, &quot;123123&quot;, 60);</span><br><span class=\"line\">         string result = RedisHelper.Get(&quot;test1&quot;);</span><br><span class=\"line\">         Console.WriteLine(&quot;key:test1,value:&quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\">         Console.ReadKey();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h3><p>前提</p>\n<ul>\n<li>了解哨兵模式的作用</li>\n<li>并有一个可用的主（master）redis服务,二个从（slaver）服务，有三个哨兵监控。</li>\n</ul>\n<ol>\n<li><p>appsettings.json配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CsRedisConfig&quot;: &#123;</span><br><span class=\"line\">    &quot;SentinelConnectString&quot;: &quot;mymaster,password=,prefix=csredis-example-&quot;,</span><br><span class=\"line\">    &quot;Sentinel&quot;: [</span><br><span class=\"line\">      &quot;127.0.0.1:26379&quot;,</span><br><span class=\"line\">      &quot;127.0.0.1:26380&quot;,</span><br><span class=\"line\">      &quot;127.0.0.1:26381&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Startup.cs中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //eg.3 使用appsettings.json,哨兵模式</span><br><span class=\"line\">    IConfigurationSection configurationSection = Configuration.GetSection(&quot;CsRedisConfig:SentinelConnectString&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    string[] sentinelValues = Configuration.GetSection(&quot;CsRedisConfig:Sentinel&quot;).Get&lt;string[]&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    CSRedisClient csredis = new CSRedisClient(configurationSection.Value, sentinelValues);</span><br><span class=\"line\"></span><br><span class=\"line\">    //初始化 RedisHelper</span><br><span class=\"line\">    RedisHelper.Initialization(csredis);</span><br><span class=\"line\">    //注册mvc分布式缓存</span><br><span class=\"line\">    services.AddSingleton&lt;IDistributedCache&gt;(new CSRedisCache(RedisHelper.Instance));</span><br><span class=\"line\"></span><br><span class=\"line\">    ...其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用缓存时与普通模式相同，不过关闭某一个redis服务，服务依旧可用，不过如果redis处于切换cluster过程，将会有短暂的失败，不过一会就会恢复。    </p>\n</li>\n</ol>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li>.NET Core开发者的福音之玩转Redis的又一傻瓜式神器推荐 <a href=\"https://www.cnblogs.com/yilezhu/p/9947905.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yilezhu/p/9947905.html</a></li>\n<li>【由浅至深】redis 实现发布订阅的几种方式 <a href=\"https://www.cnblogs.com/kellynic/p/9952386.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kellynic/p/9952386.html</a></li>\n<li>深入剖析Redis系列(四) - Redis数据结构与全局命令概述 <a href=\"https://juejin.im/post/5bb01064e51d453eb93d8028\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bb01064e51d453eb93d8028</a></li>\n</ul>\n<p>RedisHelper 与redis-cli命令行保持一致的api，会使用redis相关命令，即会使用RedisHelper方法</p>\n<h3 id=\"配合redis-cli命令行\"><a href=\"#配合redis-cli命令行\" class=\"headerlink\" title=\"配合redis-cli命令行\"></a>配合redis-cli命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">static void Main()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      CSRedisClient csredis = new CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example&quot;);</span><br><span class=\"line\">      RedisHelper.Initialization(csredis);</span><br><span class=\"line\">  </span><br><span class=\"line\">      Test();</span><br><span class=\"line\">      Console.ReadKey();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static void Test()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   //1.set key value [ex seconds] [px milliseconds] [nx|xx]</span><br><span class=\"line\">  //setex key seconds value #设定键的值，并指定此键值对应的 有效时间。</span><br><span class=\"line\">  //setnx key value  #键必须 不存在，才可以设置成功。如果键已经存在，返回 0。</span><br><span class=\"line\">  RedisHelper.Set(&quot;redis-key&quot;, &quot;just a string value&quot;, 50);//setex &quot;redis-key&quot; 50 &quot;just a string value&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  RedisHelper.Set(&quot;redis-key-class&quot;,DateTime.Now, 30);</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.2. 获取值</span><br><span class=\"line\">  //get key</span><br><span class=\"line\">  //如果要获取的 键不存在，则返回 nil（空）。</span><br><span class=\"line\">  string redisValue = RedisHelper.Get(&quot;redis-key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;setex redis-key 50 just a string value ,RedisHelper.Get()得到值如下：&#123;redisValue&#125;&quot;);</span><br><span class=\"line\">  DateTime now = RedisHelper.Get&lt;DateTime&gt;(&quot;redis-key-class&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;setex redis-key-class DateTime.Now,RedisHelper.Get()值如下&#123;now&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.3. 批量设置值</span><br><span class=\"line\">  //mset key value [key value ...]</span><br><span class=\"line\">  RedisHelper.MSet(&quot;a&quot;, &quot;1&quot;, &quot;b&quot;, &quot;2&quot;, &quot;c&quot;, &quot;3&quot;,&quot;d&quot;,&quot;4&quot;);//等价于mset a 1 b 2 c 3 d 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.4. 批量获取值</span><br><span class=\"line\">  //mget key [key ...]</span><br><span class=\"line\"></span><br><span class=\"line\">  string[] mgetValues = RedisHelper.MGet&lt;string&gt;(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,&quot;d&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;mset a 1 b 2 c 3 d 4, RedisHelper.MGet()得到的值是&quot;);</span><br><span class=\"line\">  foreach (var mgetValue in mgetValues)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      Console.Write($&quot;&#123;mgetValue&#125;、&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Console.WriteLine();</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.5. 计数</span><br><span class=\"line\">  //incr key</span><br><span class=\"line\">  //incr 命令用于对值做 自增操作</span><br><span class=\"line\"></span><br><span class=\"line\">  //自增指定数字</span><br><span class=\"line\">  long incr = RedisHelper.IncrBy(&quot;key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;incr key, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\">  //设置自增数字的增量值</span><br><span class=\"line\">  incr = RedisHelper.IncrBy(&quot;key&quot;,2);</span><br><span class=\"line\">  Console.WriteLine($&quot;再次incrby key 2, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  incr = RedisHelper.IncrBy(&quot;key&quot;, -2);</span><br><span class=\"line\">  Console.WriteLine($&quot;再次decrby key -2, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //exists key</span><br><span class=\"line\">  bool isExistsKey = RedisHelper.Exists(&quot;new-key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;exists key ,value：&#123;isExistsKey&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  double incrByFloat=RedisHelper.IncrByFloat(&quot;key-float&quot;, 0.1);</span><br><span class=\"line\">  Console.WriteLine($&quot;incrbyfloat key-float 0.1,value：&#123;incrByFloat&#125;&quot;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"csredis-GitHub\"><a href=\"#csredis-GitHub\" class=\"headerlink\" title=\"csredis GitHub\"></a>csredis GitHub</h2><ul>\n<li><a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a><h2 id=\"示例源码\"><a href=\"#示例源码\" class=\"headerlink\" title=\"示例源码\"></a>示例源码</h2><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis</a><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2></li>\n<li>安装并配置好redis服务，可用。</li>\n<li>vs2017或vs2019或vscode</li>\n<li>.net core 2.2+ sdk","more":"创建一个. NET Core WebAPI项目</li>\n</ul>\n<p>想执行 . NET Core CLI命令行，要cd到csproj同级目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet add package CSRedisCore</span><br><span class=\"line\">#mvc分布式缓存注入</span><br><span class=\"line\">dotnet add package Caching.CSRedis</span><br></pre></td></tr></table></figure>\n\n<p>或<br>程序包管理控制台(Package Manager)中运行，选择你的项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package CSRedisCore</span><br><span class=\"line\">Install-Package Caching.CSRedis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式\"><a href=\"#普通模式\" class=\"headerlink\" title=\"普通模式\"></a>普通模式</h3><ol>\n<li>appsettings.json配置项</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CsRedisConfig&quot;: &#123;</span><br><span class=\"line\">    &quot;DefaultConnectString&quot;: &quot;127.0.0.1:6379,password=,defaultDatabase=0,prefix=csredis-default-&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>Startup.cs中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // eg 1.单个redis实现 普通模式</span><br><span class=\"line\">    //CSRedisClient csredis = new CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=csredis,prefix=csredis-example&quot;);</span><br><span class=\"line\">   //eg 2.单个redis，使用appsettings.json中的配置项</span><br><span class=\"line\">    IConfigurationSection configurationSection = Configuration.GetSection(&quot;CsRedisConfig:DefaultConnectString&quot;);</span><br><span class=\"line\">    CSRedisClient csredis = new CSRedisClient(configurationSection.Value);</span><br><span class=\"line\"></span><br><span class=\"line\">    //初始化 RedisHelper</span><br><span class=\"line\">    RedisHelper.Initialization(csredis);</span><br><span class=\"line\">    //注册mvc分布式缓存</span><br><span class=\"line\">    services.AddSingleton&lt;IDistributedCache&gt;(new CSRedisCache(RedisHelper.Instance));</span><br><span class=\"line\"></span><br><span class=\"line\">    ...其他代码</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ValuesController.cs</p>\n</li>\n</ol>\n<p>通过静态方法调用，键为test1 ,value为前台传来的值，缓存60s</p>\n<p>获取值Get方法， test1作为键，返回值给前台。60s后再获取，将无法得到值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// POST api/values</span><br><span class=\"line\">[HttpPost]</span><br><span class=\"line\">public void Post([FromBody] string value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RedisHelper.Set(&quot;test1&quot;, value, 60);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// GET api/values</span><br><span class=\"line\">[HttpGet]</span><br><span class=\"line\">public ActionResult&lt;string&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return RedisHelper.Get(&quot;test1&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式-控制台\"><a href=\"#普通模式-控制台\" class=\"headerlink\" title=\"普通模式-控制台\"></a>普通模式-控制台</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Program</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     static void Main(string[] args)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         var csredis = new CSRedis.CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example&quot;);</span><br><span class=\"line\">         RedisHelper.Initialization(csredis);</span><br><span class=\"line\"></span><br><span class=\"line\">         RedisHelper.Set(&quot;test1&quot;, &quot;123123&quot;, 60);</span><br><span class=\"line\">         string result = RedisHelper.Get(&quot;test1&quot;);</span><br><span class=\"line\">         Console.WriteLine(&quot;key:test1,value:&quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\">         Console.ReadKey();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h3><p>前提</p>\n<ul>\n<li>了解哨兵模式的作用</li>\n<li>并有一个可用的主（master）redis服务,二个从（slaver）服务，有三个哨兵监控。</li>\n</ul>\n<ol>\n<li><p>appsettings.json配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CsRedisConfig&quot;: &#123;</span><br><span class=\"line\">    &quot;SentinelConnectString&quot;: &quot;mymaster,password=,prefix=csredis-example-&quot;,</span><br><span class=\"line\">    &quot;Sentinel&quot;: [</span><br><span class=\"line\">      &quot;127.0.0.1:26379&quot;,</span><br><span class=\"line\">      &quot;127.0.0.1:26380&quot;,</span><br><span class=\"line\">      &quot;127.0.0.1:26381&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Startup.cs中配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //eg.3 使用appsettings.json,哨兵模式</span><br><span class=\"line\">    IConfigurationSection configurationSection = Configuration.GetSection(&quot;CsRedisConfig:SentinelConnectString&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    string[] sentinelValues = Configuration.GetSection(&quot;CsRedisConfig:Sentinel&quot;).Get&lt;string[]&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    CSRedisClient csredis = new CSRedisClient(configurationSection.Value, sentinelValues);</span><br><span class=\"line\"></span><br><span class=\"line\">    //初始化 RedisHelper</span><br><span class=\"line\">    RedisHelper.Initialization(csredis);</span><br><span class=\"line\">    //注册mvc分布式缓存</span><br><span class=\"line\">    services.AddSingleton&lt;IDistributedCache&gt;(new CSRedisCache(RedisHelper.Instance));</span><br><span class=\"line\"></span><br><span class=\"line\">    ...其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用缓存时与普通模式相同，不过关闭某一个redis服务，服务依旧可用，不过如果redis处于切换cluster过程，将会有短暂的失败，不过一会就会恢复。    </p>\n</li>\n</ol>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li>.NET Core开发者的福音之玩转Redis的又一傻瓜式神器推荐 <a href=\"https://www.cnblogs.com/yilezhu/p/9947905.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yilezhu/p/9947905.html</a></li>\n<li>【由浅至深】redis 实现发布订阅的几种方式 <a href=\"https://www.cnblogs.com/kellynic/p/9952386.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kellynic/p/9952386.html</a></li>\n<li>深入剖析Redis系列(四) - Redis数据结构与全局命令概述 <a href=\"https://juejin.im/post/5bb01064e51d453eb93d8028\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bb01064e51d453eb93d8028</a></li>\n</ul>\n<p>RedisHelper 与redis-cli命令行保持一致的api，会使用redis相关命令，即会使用RedisHelper方法</p>\n<h3 id=\"配合redis-cli命令行\"><a href=\"#配合redis-cli命令行\" class=\"headerlink\" title=\"配合redis-cli命令行\"></a>配合redis-cli命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">static void Main()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      CSRedisClient csredis = new CSRedisClient(&quot;127.0.0.1:6379,password=,defaultDatabase=CsRedis,prefix=CsRedis_ConSole_Example&quot;);</span><br><span class=\"line\">      RedisHelper.Initialization(csredis);</span><br><span class=\"line\">  </span><br><span class=\"line\">      Test();</span><br><span class=\"line\">      Console.ReadKey();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static void Test()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   //1.set key value [ex seconds] [px milliseconds] [nx|xx]</span><br><span class=\"line\">  //setex key seconds value #设定键的值，并指定此键值对应的 有效时间。</span><br><span class=\"line\">  //setnx key value  #键必须 不存在，才可以设置成功。如果键已经存在，返回 0。</span><br><span class=\"line\">  RedisHelper.Set(&quot;redis-key&quot;, &quot;just a string value&quot;, 50);//setex &quot;redis-key&quot; 50 &quot;just a string value&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  RedisHelper.Set(&quot;redis-key-class&quot;,DateTime.Now, 30);</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.2. 获取值</span><br><span class=\"line\">  //get key</span><br><span class=\"line\">  //如果要获取的 键不存在，则返回 nil（空）。</span><br><span class=\"line\">  string redisValue = RedisHelper.Get(&quot;redis-key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;setex redis-key 50 just a string value ,RedisHelper.Get()得到值如下：&#123;redisValue&#125;&quot;);</span><br><span class=\"line\">  DateTime now = RedisHelper.Get&lt;DateTime&gt;(&quot;redis-key-class&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;setex redis-key-class DateTime.Now,RedisHelper.Get()值如下&#123;now&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.3. 批量设置值</span><br><span class=\"line\">  //mset key value [key value ...]</span><br><span class=\"line\">  RedisHelper.MSet(&quot;a&quot;, &quot;1&quot;, &quot;b&quot;, &quot;2&quot;, &quot;c&quot;, &quot;3&quot;,&quot;d&quot;,&quot;4&quot;);//等价于mset a 1 b 2 c 3 d 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.4. 批量获取值</span><br><span class=\"line\">  //mget key [key ...]</span><br><span class=\"line\"></span><br><span class=\"line\">  string[] mgetValues = RedisHelper.MGet&lt;string&gt;(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,&quot;d&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;mset a 1 b 2 c 3 d 4, RedisHelper.MGet()得到的值是&quot;);</span><br><span class=\"line\">  foreach (var mgetValue in mgetValues)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      Console.Write($&quot;&#123;mgetValue&#125;、&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Console.WriteLine();</span><br><span class=\"line\"></span><br><span class=\"line\">  //1.1.5. 计数</span><br><span class=\"line\">  //incr key</span><br><span class=\"line\">  //incr 命令用于对值做 自增操作</span><br><span class=\"line\"></span><br><span class=\"line\">  //自增指定数字</span><br><span class=\"line\">  long incr = RedisHelper.IncrBy(&quot;key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;incr key, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\">  //设置自增数字的增量值</span><br><span class=\"line\">  incr = RedisHelper.IncrBy(&quot;key&quot;,2);</span><br><span class=\"line\">  Console.WriteLine($&quot;再次incrby key 2, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  incr = RedisHelper.IncrBy(&quot;key&quot;, -2);</span><br><span class=\"line\">  Console.WriteLine($&quot;再次decrby key -2, incr得到的值是&#123;incr&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //exists key</span><br><span class=\"line\">  bool isExistsKey = RedisHelper.Exists(&quot;new-key&quot;);</span><br><span class=\"line\">  Console.WriteLine($&quot;exists key ,value：&#123;isExistsKey&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  double incrByFloat=RedisHelper.IncrByFloat(&quot;key-float&quot;, 0.1);</span><br><span class=\"line\">  Console.WriteLine($&quot;incrbyfloat key-float 0.1,value：&#123;incrByFloat&#125;&quot;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"csredis-in-asp.net core理论实战-使用示例","path":"2019/07/07/re-start/csredis-in-asp.net-core-how-to-use/","eyeCatchImage":null,"excerpt":"<h2 id=\"csredis-GitHub\"><a href=\"#csredis-GitHub\" class=\"headerlink\" title=\"csredis GitHub\"></a>csredis GitHub</h2><ul>\n<li><a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a><h2 id=\"示例源码\"><a href=\"#示例源码\" class=\"headerlink\" title=\"示例源码\"></a>示例源码</h2><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-redis</a><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2></li>\n<li>安装并配置好redis服务，可用。</li>\n<li>vs2017或vs2019或vscode</li>\n<li>.net core 2.2+ sdk","date":"2019-07-07T13:09:07.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":["Redis","ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"记一次.NET 与R语言交互","date":"2018-07-02T16:50:27.000Z","_content":"\n项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！\n> 使用的类库是  RDotNet   ,开源地址：[R.NET](https://github.com/jmp75/rdotnet)\n> 他有官网的：[对R.NET的一些介绍](https://jmp75.github.io/rdotnet/) ，这个可能需要翻墙。\n\n<!-- more -->\n\n我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。\n那么，遇到问题，怎么办？\n1、看官网，里面有一些示例的链接：[这个相当于示例代码库](https://github.com/jmp75/rdotnet-onboarding)\n2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。\n\n\nR.NET是什么？\n\n  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）\n\n使用RDotNet的步骤：\n1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样\n（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）\n2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。\n### 如下为开发过程中可能出现的问题！\n\n* 而我遇到什么样的问题呢？ 我是如何解决的？\n* 还有哪些问题需要解决？\n* 这个类库还有哪些问题不能解决，他有哪些缺点？\n\n回答上面的问题.\n#### 1.我遇到的问题。\n1）、安装过新的R环境3.5导致一直报错，一点思路都没有。\n如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。\n2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。\n如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置 \n找到自己的R语言位置，将32位和64位的环境都配置至path中 \n```\n\t;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;\n```\n第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:[这个是他们的讨论](https://github.com/jmp75/rdotnet/issues/74)\n原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。\n3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。\n那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.\n\n\n#### 2.还有哪些问题需要解决？\n1)   以**管理员权限**运行Rgui,并指定包安装的位置，防止安装到其他目录\n此命令设置当前包安装的位置，\n~~~\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n此命令查看当前包会安装的位置\n~~~\n.libPaths()\n~~~\n2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library\n3) 运行和发布后的代码都应运行在64位机子及平台上。\n\n####  3.这个类库还有哪些问题不能解决，他有哪些缺点？\n1) 不能兼容所有的R版本，目前只兼容到R3.3.3。\n2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码\n~~~\n CharacterVector datFname = engine.CreateCharacter(\"我是中文\");\n~~~\n 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            return Encoding.UTF8.GetString(buffer);\n        }\n ~~~\n我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。\n~~~\n       string[] rownames = engine.GetSymbol(\"rownames\").AsCharacter().ToArray();\n~~~\n 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            Encoding encoding = GetType(buffer);\n            if (encoding.Equals(Encoding.UTF8))\n            {\n                string r = Encoding.UTF8.GetString(buffer);\n                if (System.Text.RegularExpressions.Regex.IsMatch(r, @\"[\\u4e00-\\u9fbb]+$\"))\n                {\n                    return r;\n                }\n                else\n                {\n                    byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);\n                    return Encoding.UTF8.GetString(newBuffer);\n                }\n            }\n            else\n            {\n                byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);\n                return Encoding.UTF8.GetString(newBuffer);\n            }\n        }\n~~~\n**代码已放到github**\n> 由于该 [R.NET类库 ](https://github.com/jmp75/rdotnet)长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， [github开源地址](https://github.com/luoyunchong/rdotnet)\n\n\n\n### 相关博客介绍\n* [用C#调用R语言开发.NET MVC Web服务](https://blog.csdn.net/clearskychan/article/details/53431535) 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。\n* [一键运行R脚本](https://blog.csdn.net/wzgl__wh/article/details/77099903) 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。\n+ [c#调用R语言（原创翻译）](https://blog.csdn.net/guoer9973/article/details/45953471)\n\n由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令\n~~~bash\nRscript.exe \"某目录下\\test.R\"  agruments \n~~~\n其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。\n~~~\n    public void Execute()\n        {\n            List<string> arguments = new List<string>\n            {\n                参数\n            };\n\n            Process cmd = new Process\n            {\n                StartInfo =\n                {\n                    FileName = @\"Rscript.exe\",\n                    WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 \"E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode\"\n                    UseShellExecute = false,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    Arguments = \" Test.r \" + string.Join(\" \", arguments),\n                    CreateNoWindow = true,//不显示程序窗口\n                }\n            };\n            cmd.Start();//启动程序\n            var output = cmd.StandardOutput.ReadToEnd();\n            var error = cmd.StandardError.ReadToEnd();\n            cmd.WaitForExit();//等待控制台程序执行完成\n\t\t\tcmd.Close();//关闭该进程\n            Logger.InfoFormat($\"参数：{output}出错信息:{error}\");\n        }\n\n~~~\n\n","source":"_posts/abp/Note-DotNET-interacts-with-R.md","raw":"---\ntitle: 记一次.NET 与R语言交互\ndate: 2018-07-03 00:50:27\ntags:\n- ABP\n- .NET Framework\n- R.NET\ncategory: \n- .NET Framework\n---\n\n项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！\n> 使用的类库是  RDotNet   ,开源地址：[R.NET](https://github.com/jmp75/rdotnet)\n> 他有官网的：[对R.NET的一些介绍](https://jmp75.github.io/rdotnet/) ，这个可能需要翻墙。\n\n<!-- more -->\n\n我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。\n那么，遇到问题，怎么办？\n1、看官网，里面有一些示例的链接：[这个相当于示例代码库](https://github.com/jmp75/rdotnet-onboarding)\n2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。\n\n\nR.NET是什么？\n\n  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）\n\n使用RDotNet的步骤：\n1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样\n（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）\n2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。\n### 如下为开发过程中可能出现的问题！\n\n* 而我遇到什么样的问题呢？ 我是如何解决的？\n* 还有哪些问题需要解决？\n* 这个类库还有哪些问题不能解决，他有哪些缺点？\n\n回答上面的问题.\n#### 1.我遇到的问题。\n1）、安装过新的R环境3.5导致一直报错，一点思路都没有。\n如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。\n2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。\n如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置 \n找到自己的R语言位置，将32位和64位的环境都配置至path中 \n```\n\t;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;\n```\n第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:[这个是他们的讨论](https://github.com/jmp75/rdotnet/issues/74)\n原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。\n3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。\n那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.\n\n\n#### 2.还有哪些问题需要解决？\n1)   以**管理员权限**运行Rgui,并指定包安装的位置，防止安装到其他目录\n此命令设置当前包安装的位置，\n~~~\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n此命令查看当前包会安装的位置\n~~~\n.libPaths()\n~~~\n2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library\n3) 运行和发布后的代码都应运行在64位机子及平台上。\n\n####  3.这个类库还有哪些问题不能解决，他有哪些缺点？\n1) 不能兼容所有的R版本，目前只兼容到R3.3.3。\n2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码\n~~~\n CharacterVector datFname = engine.CreateCharacter(\"我是中文\");\n~~~\n 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            return Encoding.UTF8.GetString(buffer);\n        }\n ~~~\n我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。\n~~~\n       string[] rownames = engine.GetSymbol(\"rownames\").AsCharacter().ToArray();\n~~~\n 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            Encoding encoding = GetType(buffer);\n            if (encoding.Equals(Encoding.UTF8))\n            {\n                string r = Encoding.UTF8.GetString(buffer);\n                if (System.Text.RegularExpressions.Regex.IsMatch(r, @\"[\\u4e00-\\u9fbb]+$\"))\n                {\n                    return r;\n                }\n                else\n                {\n                    byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);\n                    return Encoding.UTF8.GetString(newBuffer);\n                }\n            }\n            else\n            {\n                byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);\n                return Encoding.UTF8.GetString(newBuffer);\n            }\n        }\n~~~\n**代码已放到github**\n> 由于该 [R.NET类库 ](https://github.com/jmp75/rdotnet)长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， [github开源地址](https://github.com/luoyunchong/rdotnet)\n\n\n\n### 相关博客介绍\n* [用C#调用R语言开发.NET MVC Web服务](https://blog.csdn.net/clearskychan/article/details/53431535) 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。\n* [一键运行R脚本](https://blog.csdn.net/wzgl__wh/article/details/77099903) 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。\n+ [c#调用R语言（原创翻译）](https://blog.csdn.net/guoer9973/article/details/45953471)\n\n由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令\n~~~bash\nRscript.exe \"某目录下\\test.R\"  agruments \n~~~\n其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。\n~~~\n    public void Execute()\n        {\n            List<string> arguments = new List<string>\n            {\n                参数\n            };\n\n            Process cmd = new Process\n            {\n                StartInfo =\n                {\n                    FileName = @\"Rscript.exe\",\n                    WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 \"E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode\"\n                    UseShellExecute = false,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    Arguments = \" Test.r \" + string.Join(\" \", arguments),\n                    CreateNoWindow = true,//不显示程序窗口\n                }\n            };\n            cmd.Start();//启动程序\n            var output = cmd.StandardOutput.ReadToEnd();\n            var error = cmd.StandardError.ReadToEnd();\n            cmd.WaitForExit();//等待控制台程序执行完成\n\t\t\tcmd.Close();//关闭该进程\n            Logger.InfoFormat($\"参数：{output}出错信息:{error}\");\n        }\n\n~~~\n\n","slug":"abp/Note-DotNET-interacts-with-R","published":1,"updated":"2019-10-08T04:21:13.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yph005cm0twoycc15uv","content":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。<br>那么，遇到问题，怎么办？<br>1、看官网，里面有一些示例的链接：<a href=\"https://github.com/jmp75/rdotnet-onboarding\" target=\"_blank\" rel=\"noopener\">这个相当于示例代码库</a><br>2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。</p>\n<p>R.NET是什么？</p>\n<p>  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）</p>\n<p>使用RDotNet的步骤：<br>1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样<br>（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）<br>2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。</p>\n<h3 id=\"如下为开发过程中可能出现的问题！\"><a href=\"#如下为开发过程中可能出现的问题！\" class=\"headerlink\" title=\"如下为开发过程中可能出现的问题！\"></a>如下为开发过程中可能出现的问题！</h3><ul>\n<li>而我遇到什么样的问题呢？ 我是如何解决的？</li>\n<li>还有哪些问题需要解决？</li>\n<li>这个类库还有哪些问题不能解决，他有哪些缺点？</li>\n</ul>\n<p>回答上面的问题.</p>\n<h4 id=\"1-我遇到的问题。\"><a href=\"#1-我遇到的问题。\" class=\"headerlink\" title=\"1.我遇到的问题。\"></a>1.我遇到的问题。</h4><p>1）、安装过新的R环境3.5导致一直报错，一点思路都没有。<br>如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。<br>2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。<br>如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置<br>找到自己的R语言位置，将32位和64位的环境都配置至path中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;</span><br></pre></td></tr></table></figure>\n\n<p>第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:<a href=\"https://github.com/jmp75/rdotnet/issues/74\" target=\"_blank\" rel=\"noopener\">这个是他们的讨论</a><br>原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。<br>3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。<br>那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.</p>\n<h4 id=\"2-还有哪些问题需要解决？\"><a href=\"#2-还有哪些问题需要解决？\" class=\"headerlink\" title=\"2.还有哪些问题需要解决？\"></a>2.还有哪些问题需要解决？</h4><p>1)   以<strong>管理员权限</strong>运行Rgui,并指定包安装的位置，防止安装到其他目录<br>此命令设置当前包安装的位置，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths(&quot;C:/Program Files/R/R-3.3.3/library&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>此命令查看当前包会安装的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths()</span><br></pre></td></tr></table></figure>\n\n<p>2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library<br>3) 运行和发布后的代码都应运行在64位机子及平台上。</p>\n<h4 id=\"3-这个类库还有哪些问题不能解决，他有哪些缺点？\"><a href=\"#3-这个类库还有哪些问题不能解决，他有哪些缺点？\" class=\"headerlink\" title=\"3.这个类库还有哪些问题不能解决，他有哪些缺点？\"></a>3.这个类库还有哪些问题不能解决，他有哪些缺点？</h4><p>1) 不能兼容所有的R版本，目前只兼容到R3.3.3。<br>2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CharacterVector datFname = engine.CreateCharacter(&quot;我是中文&quot;);</span><br></pre></td></tr></table></figure>\n\n<p> 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    return Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string[] rownames = engine.GetSymbol(&quot;rownames&quot;).AsCharacter().ToArray();</span><br></pre></td></tr></table></figure>\n\n<p> 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    Encoding encoding = GetType(buffer);</span><br><span class=\"line\">    if (encoding.Equals(Encoding.UTF8))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string r = Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">        if (System.Text.RegularExpressions.Regex.IsMatch(r, @&quot;[\\u4e00-\\u9fbb]+$&quot;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);</span><br><span class=\"line\">            return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);</span><br><span class=\"line\">        return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>代码已放到github</strong></p>\n<blockquote>\n<p>由于该 <a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET类库 </a>长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， <a href=\"https://github.com/luoyunchong/rdotnet\" target=\"_blank\" rel=\"noopener\">github开源地址</a></p>\n</blockquote>\n<h3 id=\"相关博客介绍\"><a href=\"#相关博客介绍\" class=\"headerlink\" title=\"相关博客介绍\"></a>相关博客介绍</h3><ul>\n<li><a href=\"https://blog.csdn.net/clearskychan/article/details/53431535\" target=\"_blank\" rel=\"noopener\">用C#调用R语言开发.NET MVC Web服务</a> 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。</li>\n<li><a href=\"https://blog.csdn.net/wzgl__wh/article/details/77099903\" target=\"_blank\" rel=\"noopener\">一键运行R脚本</a> 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。</li>\n</ul>\n<ul>\n<li><a href=\"https://blog.csdn.net/guoer9973/article/details/45953471\" target=\"_blank\" rel=\"noopener\">c#调用R语言（原创翻译）</a></li>\n</ul>\n<p>由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Rscript.exe <span class=\"string\">\"某目录下\\test.R\"</span>  agruments</span><br></pre></td></tr></table></figure>\n\n<p>其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> public void Execute()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         List&lt;string&gt; arguments = new List&lt;string&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             参数</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         Process cmd = new Process</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             StartInfo =</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 FileName = @&quot;Rscript.exe&quot;,</span><br><span class=\"line\">                 WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 &quot;E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode&quot;</span><br><span class=\"line\">                 UseShellExecute = false,</span><br><span class=\"line\">                 RedirectStandardOutput = true,</span><br><span class=\"line\">                 RedirectStandardError = true,</span><br><span class=\"line\">                 Arguments = &quot; Test.r &quot; + string.Join(&quot; &quot;, arguments),</span><br><span class=\"line\">                 CreateNoWindow = true,//不显示程序窗口</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         cmd.Start();//启动程序</span><br><span class=\"line\">         var output = cmd.StandardOutput.ReadToEnd();</span><br><span class=\"line\">         var error = cmd.StandardError.ReadToEnd();</span><br><span class=\"line\">         cmd.WaitForExit();//等待控制台程序执行完成</span><br><span class=\"line\">cmd.Close();//关闭该进程</span><br><span class=\"line\">         Logger.InfoFormat($&quot;参数：&#123;output&#125;出错信息:&#123;error&#125;&quot;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>","more":"<p>我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。<br>那么，遇到问题，怎么办？<br>1、看官网，里面有一些示例的链接：<a href=\"https://github.com/jmp75/rdotnet-onboarding\" target=\"_blank\" rel=\"noopener\">这个相当于示例代码库</a><br>2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。</p>\n<p>R.NET是什么？</p>\n<p>  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）</p>\n<p>使用RDotNet的步骤：<br>1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样<br>（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）<br>2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。</p>\n<h3 id=\"如下为开发过程中可能出现的问题！\"><a href=\"#如下为开发过程中可能出现的问题！\" class=\"headerlink\" title=\"如下为开发过程中可能出现的问题！\"></a>如下为开发过程中可能出现的问题！</h3><ul>\n<li>而我遇到什么样的问题呢？ 我是如何解决的？</li>\n<li>还有哪些问题需要解决？</li>\n<li>这个类库还有哪些问题不能解决，他有哪些缺点？</li>\n</ul>\n<p>回答上面的问题.</p>\n<h4 id=\"1-我遇到的问题。\"><a href=\"#1-我遇到的问题。\" class=\"headerlink\" title=\"1.我遇到的问题。\"></a>1.我遇到的问题。</h4><p>1）、安装过新的R环境3.5导致一直报错，一点思路都没有。<br>如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。<br>2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。<br>如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置<br>找到自己的R语言位置，将32位和64位的环境都配置至path中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;</span><br></pre></td></tr></table></figure>\n\n<p>第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:<a href=\"https://github.com/jmp75/rdotnet/issues/74\" target=\"_blank\" rel=\"noopener\">这个是他们的讨论</a><br>原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。<br>3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。<br>那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.</p>\n<h4 id=\"2-还有哪些问题需要解决？\"><a href=\"#2-还有哪些问题需要解决？\" class=\"headerlink\" title=\"2.还有哪些问题需要解决？\"></a>2.还有哪些问题需要解决？</h4><p>1)   以<strong>管理员权限</strong>运行Rgui,并指定包安装的位置，防止安装到其他目录<br>此命令设置当前包安装的位置，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths(&quot;C:/Program Files/R/R-3.3.3/library&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>此命令查看当前包会安装的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.libPaths()</span><br></pre></td></tr></table></figure>\n\n<p>2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library<br>3) 运行和发布后的代码都应运行在64位机子及平台上。</p>\n<h4 id=\"3-这个类库还有哪些问题不能解决，他有哪些缺点？\"><a href=\"#3-这个类库还有哪些问题不能解决，他有哪些缺点？\" class=\"headerlink\" title=\"3.这个类库还有哪些问题不能解决，他有哪些缺点？\"></a>3.这个类库还有哪些问题不能解决，他有哪些缺点？</h4><p>1) 不能兼容所有的R版本，目前只兼容到R3.3.3。<br>2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CharacterVector datFname = engine.CreateCharacter(&quot;我是中文&quot;);</span><br></pre></td></tr></table></figure>\n\n<p> 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    return Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string[] rownames = engine.GetSymbol(&quot;rownames&quot;).AsCharacter().ToArray();</span><br></pre></td></tr></table></figure>\n\n<p> 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    Encoding encoding = GetType(buffer);</span><br><span class=\"line\">    if (encoding.Equals(Encoding.UTF8))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string r = Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">        if (System.Text.RegularExpressions.Regex.IsMatch(r, @&quot;[\\u4e00-\\u9fbb]+$&quot;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);</span><br><span class=\"line\">            return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);</span><br><span class=\"line\">        return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>代码已放到github</strong></p>\n<blockquote>\n<p>由于该 <a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET类库 </a>长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， <a href=\"https://github.com/luoyunchong/rdotnet\" target=\"_blank\" rel=\"noopener\">github开源地址</a></p>\n</blockquote>\n<h3 id=\"相关博客介绍\"><a href=\"#相关博客介绍\" class=\"headerlink\" title=\"相关博客介绍\"></a>相关博客介绍</h3><ul>\n<li><a href=\"https://blog.csdn.net/clearskychan/article/details/53431535\" target=\"_blank\" rel=\"noopener\">用C#调用R语言开发.NET MVC Web服务</a> 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。</li>\n<li><a href=\"https://blog.csdn.net/wzgl__wh/article/details/77099903\" target=\"_blank\" rel=\"noopener\">一键运行R脚本</a> 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。</li>\n</ul>\n<ul>\n<li><a href=\"https://blog.csdn.net/guoer9973/article/details/45953471\" target=\"_blank\" rel=\"noopener\">c#调用R语言（原创翻译）</a></li>\n</ul>\n<p>由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Rscript.exe <span class=\"string\">\"某目录下\\test.R\"</span>  agruments</span><br></pre></td></tr></table></figure>\n\n<p>其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> public void Execute()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         List&lt;string&gt; arguments = new List&lt;string&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             参数</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         Process cmd = new Process</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             StartInfo =</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 FileName = @&quot;Rscript.exe&quot;,</span><br><span class=\"line\">                 WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 &quot;E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode&quot;</span><br><span class=\"line\">                 UseShellExecute = false,</span><br><span class=\"line\">                 RedirectStandardOutput = true,</span><br><span class=\"line\">                 RedirectStandardError = true,</span><br><span class=\"line\">                 Arguments = &quot; Test.r &quot; + string.Join(&quot; &quot;, arguments),</span><br><span class=\"line\">                 CreateNoWindow = true,//不显示程序窗口</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         cmd.Start();//启动程序</span><br><span class=\"line\">         var output = cmd.StandardOutput.ReadToEnd();</span><br><span class=\"line\">         var error = cmd.StandardError.ReadToEnd();</span><br><span class=\"line\">         cmd.WaitForExit();//等待控制台程序执行完成</span><br><span class=\"line\">cmd.Close();//关闭该进程</span><br><span class=\"line\">         Logger.InfoFormat($&quot;参数：&#123;output&#125;出错信息:&#123;error&#125;&quot;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"记一次.NET 与R语言交互","path":"2018/07/03/abp/Note-DotNET-interacts-with-R/","eyeCatchImage":null,"excerpt":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>","date":"2018-07-02T16:50:27.000Z","pv":0,"totalPV":0,"categories":".NET Framework","tags":["ABP",".NET Framework","R.NET"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"lin-cms-dotnet-core README","date":"2019-10-08T04:44:22.000Z","_content":"\n<h1  align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <p>\n  Lin CMS .NET Core\n  </p>\n</h1>\n😃 A simple and practical CMS implememted by .NET Core 2.2\n\n<!-- more -->\n\n## 项目简介\n<!-- ![Total visitor](https://visitor-count-badge.herokuapp.com/total.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore)\n![Visitors in today](https://visitor-count-badge.herokuapp.com/today.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore) -->\n\n<!-- ![](https://img.shields.io/badge/版本-0.0.1.beta.2-3963bc.svg) -->\n\n![Build Status](https://travis-ci.org/luoyunchong/lin-cms-dotnetcore.svg?branch=master)\n![](https://img.shields.io/badge/.NETCore-2.2.0-3963bc.svg)\n![](https://img.shields.io/badge/license-MIT-3963bc.svg)\n![](https://img.shields.io/badge/developer-IGeekFan-3963bc.svg)\n\n\n本项目是完全出于个人喜爱，看到Lin-cms有了python,node.js,社区也有人出了[lin-cms-tp5](https://github.com/ChenJinchuang/lin-cms-tp5)的版本\n\n本项目是 Lin CMS 后端的 [.NET Core 2.2](https://docs.microsoft.com/zh-cn/dotnet/core/)的 实现，\n\n## 什么是 Lin CMS？\n\n Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套**内容管理系统框架**。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问[**前端仓库**](https://github.com/TaleLin/lin-cms-vue)。官方团队产品了解请访问[**TaleLin**](https://github.com/TaleLin)\n\n## 线上文档地址(完善中)\n\n[https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/](https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/)\n\n## 线上 Demo\n\n- 官方地址 [http://face.cms.7yue.pro/#/login](http://face.cms.7yue.pro/#/login) \n  - 用户名： super\n  - 密码： 123456\n- 本项目swagger地址 [http://47.106.80.39:5001/swagger/index.html](http://47.106.80.39:5001/swagger/index.html)\n\n## 前端\n- 在原[开源项目](https://github.com/TaleLin/lin-cms-vue)中增加了博客文章、回复、留言板、标签、文章分组管理、插件式功能（还没有）\n- [https://github.com/luoyunchong/lin-cms-vue](https://github.com/luoyunchong/lin-cms-vue)\n\n### Lin CMS 的特点\n\nLin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。\n\n### Lin CMS 是一个前后端分离的 CMS 解决方案\n\n这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，\n\n首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor等模板技术。\n\n服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。\n\n但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。\n\n其次，单页面应用程序的体验本身就要好于传统网站。\n\n### 框架本身已内置了 CMS 常用的功能\n\nLin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可\n\n更多关于Lin CMS的介绍请访问[Lin CMS线上文档](http://doc.cms.7yue.pro/)\n\n## 所需基础\n\n由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。\n\n### 后端 C#\n该项目的Lin 的服务端框架是基于[.NET Core 2.2](https://docs.microsoft.com/zh-cn/dotnet/core/)构建的，所以如果你比较熟悉Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework中Mvc开发经验，相信你一定很容易写出代码。\n\n### 后端主要技术\n- 数据库：FreeSql+MySQL5.6\n- ASP.NET Core2.2+MVC\n- 简化对象映射：AutoMapper\n- 身份认证框架：IdentityServer4\n- Json Web令牌:JWT\n- 文档：Swagger\n- 序列化：Newtonsoft.Json\n- 测试框架：Xunit\n- 日志 NLog\n- 简化注入服务：Scrutor\n- 通用扩展方法 Z.ExtensionMethods\n\n### 前端 \n前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router等等等\n\n\n# 快速开始\n\n## Server 端必备环境\n* 安装软件开发包 [.NET Core SDK 2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2)   \n* 安装开发工具  [Visual Studio 2019](https://visualstudio.microsoft.com/zh-hans/vs/?rr=https%3A%2F%2Fcn.bing.com%2F)  \n* 安装MySQL（version： 5.6+,别装8.0+，未测试）\n\n\n## 获取工程项目\n```bash\ngit clone https://github.com/luoyunchong/lin-cms-dotnetcore.git\n```\n## 安装依赖包\n\n打开lin-cms-dotnetcore项目目录\n\n右击build-all.ps1,使用powershell运行。即可安装好相应的依赖。\n\n或\n\n打开powershell，cd到lin-cms-dotnetcore目录 ，输入如 下命令，运行此脚本。\n```\n.\\build-all.ps1\n```\n双击lin-cms-dotnetcore.sln即可使用vs2019打开项目。\n\n\n## 数据库配置\n\nsrc/LinCms.Web目录中appsettings.json\n**请务必根据自己的实际情况修改此配置项**\n```\n  \"ConnectionStrings\": {\n    \"Default\": \"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=LinCms;Charset=utf8;SslMode=none;Max pool size=10\"\n  }\n```\n## 数据迁移\n该项目使用[FreeSql](https://github.com/2881099/FreeSql)，默认自动迁移数据表结构，无须用户操作，但无数据，而且只有访问到表时才会创建某个表，所以用户可将[备份SQL](https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/docs/sql/lincms.sql)放到Mysql中生成，还原表结构及数据。\n\n## 运行\n用户可使用vs2019，单击LinCms .Web，即可自动启动后台服务。\n\n![](https://ae01.alicdn.com/kf/H70086026eaca4dc8ab4806ee1d07443bP.jpg)\n\n会打开浏览器，访问[https://localhosst:5001/swagger/index.html](https://localhosst:5001/swagger/index.html)，会看到swagger的文档。\n\n![](https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg)\n\n## 部署\n\n[https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/](https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/)\n\n## 讨论交流\n\n### QQ 交流群\n\n- 林间有风（lin-cms-vue） QQ 群号：643205479\n- .NET Core搬砖队(lin-cms-dotnetcore) QQ群号：762828442\n\n<img class=\"QR-img\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/Hed659970c86c4004b42480fe7d7f97acW.jpg\">\n\n<img class=\"QR-img\" style=\"margin-left:10px\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/H6c1668c7987a436caae6b19ee6b86af5J.jpg\">\n\n### 微信公众号\n\n微信搜索：林间有风\n\n<img class=\"QR-img\" src=\"https://ae01.alicdn.com/kf/H4e69faac4a834b8a82f54ea05d2dd53av.jpg\">\n\n\n## 下个版本开发计划\n1. 迁移Mock.Luo项目至lin-cms-dotnetcore,\n2. 实现模块化开发，支持基础组件安装与卸载。\n3. 实现abp vnext的文档的功能 [https://docs.abp.io/en/abp/latest](https://docs.abp.io/en/abp/latest)\n4. 写文档。\n\n- [ ] 基于lin-cms-vue的基础,将之前Mock.luo项目中的博客迁移过来\n  - [x] 博客随笔发布/编辑/删除\n  - [x] 留言板\n  - [ ] 评论回复、审核、点赞等\n  - [ ] 前端展示博客效果\n- [x] 字典管理分为如下\n  - [x] 基础资料  BaseItem\n  - [x] 类别管理  BaseType\n- [x] 创建时间、创建人、修改时间、修改人、删除人、删除时间、是否删除(软删除)\n- [x] 部署 \n- [ ] 系统访问日志、错误日志可视化\n- [ ] 完善文档\n- [ ] 重构核心库结构\n\n\n##  开源地址\n* Gitee 链接 [https://gitee.com/igeekfan/lin-cms-dotnetcore](https://gitee.com/igeekfan/lin-cms-dotnetcore)\n* GitHub 链接 [https://github.com/luoyunchong/lin-cms-dotnetcore](https://github.com/luoyunchong/lin-cms-dotnetcore)\n","source":"_posts/lin-cms-dotnetcore/README.md","raw":"---\ntitle: lin-cms-dotnet-core README\ndate: 2019-10-8 12:44:22\ntags:\n- 开源\n- .NET Core\n- lin-cms\ncategory:\n- lin-cms-dotnetcore\n---\n\n<h1  align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <p>\n  Lin CMS .NET Core\n  </p>\n</h1>\n😃 A simple and practical CMS implememted by .NET Core 2.2\n\n<!-- more -->\n\n## 项目简介\n<!-- ![Total visitor](https://visitor-count-badge.herokuapp.com/total.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore)\n![Visitors in today](https://visitor-count-badge.herokuapp.com/today.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore) -->\n\n<!-- ![](https://img.shields.io/badge/版本-0.0.1.beta.2-3963bc.svg) -->\n\n![Build Status](https://travis-ci.org/luoyunchong/lin-cms-dotnetcore.svg?branch=master)\n![](https://img.shields.io/badge/.NETCore-2.2.0-3963bc.svg)\n![](https://img.shields.io/badge/license-MIT-3963bc.svg)\n![](https://img.shields.io/badge/developer-IGeekFan-3963bc.svg)\n\n\n本项目是完全出于个人喜爱，看到Lin-cms有了python,node.js,社区也有人出了[lin-cms-tp5](https://github.com/ChenJinchuang/lin-cms-tp5)的版本\n\n本项目是 Lin CMS 后端的 [.NET Core 2.2](https://docs.microsoft.com/zh-cn/dotnet/core/)的 实现，\n\n## 什么是 Lin CMS？\n\n Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套**内容管理系统框架**。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问[**前端仓库**](https://github.com/TaleLin/lin-cms-vue)。官方团队产品了解请访问[**TaleLin**](https://github.com/TaleLin)\n\n## 线上文档地址(完善中)\n\n[https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/](https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/)\n\n## 线上 Demo\n\n- 官方地址 [http://face.cms.7yue.pro/#/login](http://face.cms.7yue.pro/#/login) \n  - 用户名： super\n  - 密码： 123456\n- 本项目swagger地址 [http://47.106.80.39:5001/swagger/index.html](http://47.106.80.39:5001/swagger/index.html)\n\n## 前端\n- 在原[开源项目](https://github.com/TaleLin/lin-cms-vue)中增加了博客文章、回复、留言板、标签、文章分组管理、插件式功能（还没有）\n- [https://github.com/luoyunchong/lin-cms-vue](https://github.com/luoyunchong/lin-cms-vue)\n\n### Lin CMS 的特点\n\nLin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。\n\n### Lin CMS 是一个前后端分离的 CMS 解决方案\n\n这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，\n\n首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor等模板技术。\n\n服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。\n\n但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。\n\n其次，单页面应用程序的体验本身就要好于传统网站。\n\n### 框架本身已内置了 CMS 常用的功能\n\nLin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可\n\n更多关于Lin CMS的介绍请访问[Lin CMS线上文档](http://doc.cms.7yue.pro/)\n\n## 所需基础\n\n由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。\n\n### 后端 C#\n该项目的Lin 的服务端框架是基于[.NET Core 2.2](https://docs.microsoft.com/zh-cn/dotnet/core/)构建的，所以如果你比较熟悉Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework中Mvc开发经验，相信你一定很容易写出代码。\n\n### 后端主要技术\n- 数据库：FreeSql+MySQL5.6\n- ASP.NET Core2.2+MVC\n- 简化对象映射：AutoMapper\n- 身份认证框架：IdentityServer4\n- Json Web令牌:JWT\n- 文档：Swagger\n- 序列化：Newtonsoft.Json\n- 测试框架：Xunit\n- 日志 NLog\n- 简化注入服务：Scrutor\n- 通用扩展方法 Z.ExtensionMethods\n\n### 前端 \n前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router等等等\n\n\n# 快速开始\n\n## Server 端必备环境\n* 安装软件开发包 [.NET Core SDK 2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2)   \n* 安装开发工具  [Visual Studio 2019](https://visualstudio.microsoft.com/zh-hans/vs/?rr=https%3A%2F%2Fcn.bing.com%2F)  \n* 安装MySQL（version： 5.6+,别装8.0+，未测试）\n\n\n## 获取工程项目\n```bash\ngit clone https://github.com/luoyunchong/lin-cms-dotnetcore.git\n```\n## 安装依赖包\n\n打开lin-cms-dotnetcore项目目录\n\n右击build-all.ps1,使用powershell运行。即可安装好相应的依赖。\n\n或\n\n打开powershell，cd到lin-cms-dotnetcore目录 ，输入如 下命令，运行此脚本。\n```\n.\\build-all.ps1\n```\n双击lin-cms-dotnetcore.sln即可使用vs2019打开项目。\n\n\n## 数据库配置\n\nsrc/LinCms.Web目录中appsettings.json\n**请务必根据自己的实际情况修改此配置项**\n```\n  \"ConnectionStrings\": {\n    \"Default\": \"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=LinCms;Charset=utf8;SslMode=none;Max pool size=10\"\n  }\n```\n## 数据迁移\n该项目使用[FreeSql](https://github.com/2881099/FreeSql)，默认自动迁移数据表结构，无须用户操作，但无数据，而且只有访问到表时才会创建某个表，所以用户可将[备份SQL](https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/docs/sql/lincms.sql)放到Mysql中生成，还原表结构及数据。\n\n## 运行\n用户可使用vs2019，单击LinCms .Web，即可自动启动后台服务。\n\n![](https://ae01.alicdn.com/kf/H70086026eaca4dc8ab4806ee1d07443bP.jpg)\n\n会打开浏览器，访问[https://localhosst:5001/swagger/index.html](https://localhosst:5001/swagger/index.html)，会看到swagger的文档。\n\n![](https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg)\n\n## 部署\n\n[https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/](https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/)\n\n## 讨论交流\n\n### QQ 交流群\n\n- 林间有风（lin-cms-vue） QQ 群号：643205479\n- .NET Core搬砖队(lin-cms-dotnetcore) QQ群号：762828442\n\n<img class=\"QR-img\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/Hed659970c86c4004b42480fe7d7f97acW.jpg\">\n\n<img class=\"QR-img\" style=\"margin-left:10px\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/H6c1668c7987a436caae6b19ee6b86af5J.jpg\">\n\n### 微信公众号\n\n微信搜索：林间有风\n\n<img class=\"QR-img\" src=\"https://ae01.alicdn.com/kf/H4e69faac4a834b8a82f54ea05d2dd53av.jpg\">\n\n\n## 下个版本开发计划\n1. 迁移Mock.Luo项目至lin-cms-dotnetcore,\n2. 实现模块化开发，支持基础组件安装与卸载。\n3. 实现abp vnext的文档的功能 [https://docs.abp.io/en/abp/latest](https://docs.abp.io/en/abp/latest)\n4. 写文档。\n\n- [ ] 基于lin-cms-vue的基础,将之前Mock.luo项目中的博客迁移过来\n  - [x] 博客随笔发布/编辑/删除\n  - [x] 留言板\n  - [ ] 评论回复、审核、点赞等\n  - [ ] 前端展示博客效果\n- [x] 字典管理分为如下\n  - [x] 基础资料  BaseItem\n  - [x] 类别管理  BaseType\n- [x] 创建时间、创建人、修改时间、修改人、删除人、删除时间、是否删除(软删除)\n- [x] 部署 \n- [ ] 系统访问日志、错误日志可视化\n- [ ] 完善文档\n- [ ] 重构核心库结构\n\n\n##  开源地址\n* Gitee 链接 [https://gitee.com/igeekfan/lin-cms-dotnetcore](https://gitee.com/igeekfan/lin-cms-dotnetcore)\n* GitHub 链接 [https://github.com/luoyunchong/lin-cms-dotnetcore](https://github.com/luoyunchong/lin-cms-dotnetcore)\n","slug":"lin-cms-dotnetcore/README","published":1,"updated":"2019-12-09T11:16:08.073Z","_id":"ck2362ypk005em0twpx3mwb7w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <p>\n  Lin CMS .NET Core\n  </p>\n</h1>\n😃 A simple and practical CMS implememted by .NET Core 2.2\n\n<a id=\"more\"></a>\n\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><!-- ![Total visitor](https://visitor-count-badge.herokuapp.com/total.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore)\n![Visitors in today](https://visitor-count-badge.herokuapp.com/today.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore) -->\n\n<!-- ![](https://img.shields.io/badge/版本-0.0.1.beta.2-3963bc.svg) -->\n\n<p><img src=\"https://travis-ci.org/luoyunchong/lin-cms-dotnetcore.svg?branch=master\" alt=\"Build Status\"><br><img src=\"https://img.shields.io/badge/.NETCore-2.2.0-3963bc.svg\" alt><br><img src=\"https://img.shields.io/badge/license-MIT-3963bc.svg\" alt><br><img src=\"https://img.shields.io/badge/developer-IGeekFan-3963bc.svg\" alt></p>\n<p>本项目是完全出于个人喜爱，看到Lin-cms有了python,node.js,社区也有人出了<a href=\"https://github.com/ChenJinchuang/lin-cms-tp5\" target=\"_blank\" rel=\"noopener\">lin-cms-tp5</a>的版本</p>\n<p>本项目是 Lin CMS 后端的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/\" target=\"_blank\" rel=\"noopener\">.NET Core 2.2</a>的 实现，</p>\n<h2 id=\"什么是-Lin-CMS？\"><a href=\"#什么是-Lin-CMS？\" class=\"headerlink\" title=\"什么是 Lin CMS？\"></a>什么是 Lin CMS？</h2><p> Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套<strong>内容管理系统框架</strong>。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\"><strong>前端仓库</strong></a>。官方团队产品了解请访问<a href=\"https://github.com/TaleLin\" target=\"_blank\" rel=\"noopener\"><strong>TaleLin</strong></a></p>\n<h2 id=\"线上文档地址-完善中\"><a href=\"#线上文档地址-完善中\" class=\"headerlink\" title=\"线上文档地址(完善中)\"></a>线上文档地址(完善中)</h2><p><a href=\"https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/</a></p>\n<h2 id=\"线上-Demo\"><a href=\"#线上-Demo\" class=\"headerlink\" title=\"线上 Demo\"></a>线上 Demo</h2><ul>\n<li>官方地址 <a href=\"http://face.cms.7yue.pro/#/login\" target=\"_blank\" rel=\"noopener\">http://face.cms.7yue.pro/#/login</a> <ul>\n<li>用户名： super</li>\n<li>密码： 123456</li>\n</ul>\n</li>\n<li>本项目swagger地址 <a href=\"http://47.106.80.39:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39:5001/swagger/index.html</a></li>\n</ul>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><ul>\n<li>在原<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">开源项目</a>中增加了博客文章、回复、留言板、标签、文章分组管理、插件式功能（还没有）</li>\n<li><a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n</ul>\n<h3 id=\"Lin-CMS-的特点\"><a href=\"#Lin-CMS-的特点\" class=\"headerlink\" title=\"Lin CMS 的特点\"></a>Lin CMS 的特点</h3><p>Lin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。</p>\n<h3 id=\"Lin-CMS-是一个前后端分离的-CMS-解决方案\"><a href=\"#Lin-CMS-是一个前后端分离的-CMS-解决方案\" class=\"headerlink\" title=\"Lin CMS 是一个前后端分离的 CMS 解决方案\"></a>Lin CMS 是一个前后端分离的 CMS 解决方案</h3><p>这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，</p>\n<p>首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor等模板技术。</p>\n<p>服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。</p>\n<p>但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。</p>\n<p>其次，单页面应用程序的体验本身就要好于传统网站。</p>\n<h3 id=\"框架本身已内置了-CMS-常用的功能\"><a href=\"#框架本身已内置了-CMS-常用的功能\" class=\"headerlink\" title=\"框架本身已内置了 CMS 常用的功能\"></a>框架本身已内置了 CMS 常用的功能</h3><p>Lin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可</p>\n<p>更多关于Lin CMS的介绍请访问<a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener\">Lin CMS线上文档</a></p>\n<h2 id=\"所需基础\"><a href=\"#所需基础\" class=\"headerlink\" title=\"所需基础\"></a>所需基础</h2><p>由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。</p>\n<h3 id=\"后端-C\"><a href=\"#后端-C\" class=\"headerlink\" title=\"后端 C\"></a>后端 C</h3><p>该项目的Lin 的服务端框架是基于<a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/\" target=\"_blank\" rel=\"noopener\">.NET Core 2.2</a>构建的，所以如果你比较熟悉Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework中Mvc开发经验，相信你一定很容易写出代码。</p>\n<h3 id=\"后端主要技术\"><a href=\"#后端主要技术\" class=\"headerlink\" title=\"后端主要技术\"></a>后端主要技术</h3><ul>\n<li>数据库：FreeSql+MySQL5.6</li>\n<li>ASP.NET Core2.2+MVC</li>\n<li>简化对象映射：AutoMapper</li>\n<li>身份认证框架：IdentityServer4</li>\n<li>Json Web令牌:JWT</li>\n<li>文档：Swagger</li>\n<li>序列化：Newtonsoft.Json</li>\n<li>测试框架：Xunit</li>\n<li>日志 NLog</li>\n<li>简化注入服务：Scrutor</li>\n<li>通用扩展方法 Z.ExtensionMethods</li>\n</ul>\n<h3 id=\"前端-1\"><a href=\"#前端-1\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router等等等</p>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><h2 id=\"Server-端必备环境\"><a href=\"#Server-端必备环境\" class=\"headerlink\" title=\"Server 端必备环境\"></a>Server 端必备环境</h2><ul>\n<li>安装软件开发包 <a href=\"https://dotnet.microsoft.com/download/dotnet-core/2.2\" target=\"_blank\" rel=\"noopener\">.NET Core SDK 2.2</a>   </li>\n<li>安装开发工具  <a href=\"https://visualstudio.microsoft.com/zh-hans/vs/?rr=https%3A%2F%2Fcn.bing.com%2F\" target=\"_blank\" rel=\"noopener\">Visual Studio 2019</a>  </li>\n<li>安装MySQL（version： 5.6+,别装8.0+，未测试）</li>\n</ul>\n<h2 id=\"获取工程项目\"><a href=\"#获取工程项目\" class=\"headerlink\" title=\"获取工程项目\"></a>获取工程项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/luoyunchong/lin-cms-dotnetcore.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><p>打开lin-cms-dotnetcore项目目录</p>\n<p>右击build-all.ps1,使用powershell运行。即可安装好相应的依赖。</p>\n<p>或</p>\n<p>打开powershell，cd到lin-cms-dotnetcore目录 ，输入如 下命令，运行此脚本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\build-all.ps1</span><br></pre></td></tr></table></figure>\n\n<p>双击lin-cms-dotnetcore.sln即可使用vs2019打开项目。</p>\n<h2 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h2><p>src/LinCms.Web目录中appsettings.json<br><strong>请务必根据自己的实际情况修改此配置项</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;ConnectionStrings&quot;: &#123;</span><br><span class=\"line\">  &quot;Default&quot;: &quot;Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=LinCms;Charset=utf8;SslMode=none;Max pool size=10&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据迁移\"><a href=\"#数据迁移\" class=\"headerlink\" title=\"数据迁移\"></a>数据迁移</h2><p>该项目使用<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">FreeSql</a>，默认自动迁移数据表结构，无须用户操作，但无数据，而且只有访问到表时才会创建某个表，所以用户可将<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/docs/sql/lincms.sql\" target=\"_blank\" rel=\"noopener\">备份SQL</a>放到Mysql中生成，还原表结构及数据。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>用户可使用vs2019，单击LinCms .Web，即可自动启动后台服务。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/H70086026eaca4dc8ab4806ee1d07443bP.jpg\" alt></p>\n<p>会打开浏览器，访问<a href=\"https://localhosst:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener\">https://localhosst:5001/swagger/index.html</a>，会看到swagger的文档。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg\" alt></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p><a href=\"https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/\">https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/</a></p>\n<h2 id=\"讨论交流\"><a href=\"#讨论交流\" class=\"headerlink\" title=\"讨论交流\"></a>讨论交流</h2><h3 id=\"QQ-交流群\"><a href=\"#QQ-交流群\" class=\"headerlink\" title=\"QQ 交流群\"></a>QQ 交流群</h3><ul>\n<li>林间有风（lin-cms-vue） QQ 群号：643205479</li>\n<li>.NET Core搬砖队(lin-cms-dotnetcore) QQ群号：762828442</li>\n</ul>\n<img class=\"QR-img\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/Hed659970c86c4004b42480fe7d7f97acW.jpg\">\n\n<img class=\"QR-img\" style=\"margin-left:10px\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/H6c1668c7987a436caae6b19ee6b86af5J.jpg\">\n\n<h3 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h3><p>微信搜索：林间有风</p>\n<img class=\"QR-img\" src=\"https://ae01.alicdn.com/kf/H4e69faac4a834b8a82f54ea05d2dd53av.jpg\">\n\n\n<h2 id=\"下个版本开发计划\"><a href=\"#下个版本开发计划\" class=\"headerlink\" title=\"下个版本开发计划\"></a>下个版本开发计划</h2><ol>\n<li>迁移Mock.Luo项目至lin-cms-dotnetcore,</li>\n<li>实现模块化开发，支持基础组件安装与卸载。</li>\n<li>实现abp vnext的文档的功能 <a href=\"https://docs.abp.io/en/abp/latest\" target=\"_blank\" rel=\"noopener\">https://docs.abp.io/en/abp/latest</a></li>\n<li>写文档。</li>\n</ol>\n<ul>\n<li><input disabled type=\"checkbox\"> 基于lin-cms-vue的基础,将之前Mock.luo项目中的博客迁移过来<ul>\n<li><input checked disabled type=\"checkbox\"> 博客随笔发布/编辑/删除</li>\n<li><input checked disabled type=\"checkbox\"> 留言板</li>\n<li><input disabled type=\"checkbox\"> 评论回复、审核、点赞等</li>\n<li><input disabled type=\"checkbox\"> 前端展示博客效果</li>\n</ul>\n</li>\n<li><input checked disabled type=\"checkbox\"> 字典管理分为如下<ul>\n<li><input checked disabled type=\"checkbox\"> 基础资料  BaseItem</li>\n<li><input checked disabled type=\"checkbox\"> 类别管理  BaseType</li>\n</ul>\n</li>\n<li><input checked disabled type=\"checkbox\"> 创建时间、创建人、修改时间、修改人、删除人、删除时间、是否删除(软删除)</li>\n<li><input checked disabled type=\"checkbox\"> 部署 </li>\n<li><input disabled type=\"checkbox\"> 系统访问日志、错误日志可视化</li>\n<li><input disabled type=\"checkbox\"> 完善文档</li>\n<li><input disabled type=\"checkbox\"> 重构核心库结构</li>\n</ul>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><ul>\n<li>Gitee 链接 <a href=\"https://gitee.com/igeekfan/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>\n<li>GitHub 链接 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <p>\n  Lin CMS .NET Core\n  </p>\n</h1>\n😃 A simple and practical CMS implememted by .NET Core 2.2","more":"<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><!-- ![Total visitor](https://visitor-count-badge.herokuapp.com/total.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore)\n![Visitors in today](https://visitor-count-badge.herokuapp.com/today.svg?repo_id=https://github.com/luoyunchong/lin-cms-dotnetcore) -->\n\n<!-- ![](https://img.shields.io/badge/版本-0.0.1.beta.2-3963bc.svg) -->\n\n<p><img src=\"https://travis-ci.org/luoyunchong/lin-cms-dotnetcore.svg?branch=master\" alt=\"Build Status\"><br><img src=\"https://img.shields.io/badge/.NETCore-2.2.0-3963bc.svg\" alt><br><img src=\"https://img.shields.io/badge/license-MIT-3963bc.svg\" alt><br><img src=\"https://img.shields.io/badge/developer-IGeekFan-3963bc.svg\" alt></p>\n<p>本项目是完全出于个人喜爱，看到Lin-cms有了python,node.js,社区也有人出了<a href=\"https://github.com/ChenJinchuang/lin-cms-tp5\" target=\"_blank\" rel=\"noopener\">lin-cms-tp5</a>的版本</p>\n<p>本项目是 Lin CMS 后端的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/\" target=\"_blank\" rel=\"noopener\">.NET Core 2.2</a>的 实现，</p>\n<h2 id=\"什么是-Lin-CMS？\"><a href=\"#什么是-Lin-CMS？\" class=\"headerlink\" title=\"什么是 Lin CMS？\"></a>什么是 Lin CMS？</h2><p> Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套<strong>内容管理系统框架</strong>。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\"><strong>前端仓库</strong></a>。官方团队产品了解请访问<a href=\"https://github.com/TaleLin\" target=\"_blank\" rel=\"noopener\"><strong>TaleLin</strong></a></p>\n<h2 id=\"线上文档地址-完善中\"><a href=\"#线上文档地址-完善中\" class=\"headerlink\" title=\"线上文档地址(完善中)\"></a>线上文档地址(完善中)</h2><p><a href=\"https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/\" target=\"_blank\" rel=\"noopener\">https://luoyunchong.github.io/vuepress-docs/dotnetcore/lin-cms/</a></p>\n<h2 id=\"线上-Demo\"><a href=\"#线上-Demo\" class=\"headerlink\" title=\"线上 Demo\"></a>线上 Demo</h2><ul>\n<li>官方地址 <a href=\"http://face.cms.7yue.pro/#/login\" target=\"_blank\" rel=\"noopener\">http://face.cms.7yue.pro/#/login</a> <ul>\n<li>用户名： super</li>\n<li>密码： 123456</li>\n</ul>\n</li>\n<li>本项目swagger地址 <a href=\"http://47.106.80.39:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39:5001/swagger/index.html</a></li>\n</ul>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><ul>\n<li>在原<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">开源项目</a>中增加了博客文章、回复、留言板、标签、文章分组管理、插件式功能（还没有）</li>\n<li><a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n</ul>\n<h3 id=\"Lin-CMS-的特点\"><a href=\"#Lin-CMS-的特点\" class=\"headerlink\" title=\"Lin CMS 的特点\"></a>Lin CMS 的特点</h3><p>Lin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。</p>\n<h3 id=\"Lin-CMS-是一个前后端分离的-CMS-解决方案\"><a href=\"#Lin-CMS-是一个前后端分离的-CMS-解决方案\" class=\"headerlink\" title=\"Lin CMS 是一个前后端分离的 CMS 解决方案\"></a>Lin CMS 是一个前后端分离的 CMS 解决方案</h3><p>这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，</p>\n<p>首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor等模板技术。</p>\n<p>服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。</p>\n<p>但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。</p>\n<p>其次，单页面应用程序的体验本身就要好于传统网站。</p>\n<h3 id=\"框架本身已内置了-CMS-常用的功能\"><a href=\"#框架本身已内置了-CMS-常用的功能\" class=\"headerlink\" title=\"框架本身已内置了 CMS 常用的功能\"></a>框架本身已内置了 CMS 常用的功能</h3><p>Lin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可</p>\n<p>更多关于Lin CMS的介绍请访问<a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener\">Lin CMS线上文档</a></p>\n<h2 id=\"所需基础\"><a href=\"#所需基础\" class=\"headerlink\" title=\"所需基础\"></a>所需基础</h2><p>由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。</p>\n<h3 id=\"后端-C\"><a href=\"#后端-C\" class=\"headerlink\" title=\"后端 C\"></a>后端 C</h3><p>该项目的Lin 的服务端框架是基于<a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/\" target=\"_blank\" rel=\"noopener\">.NET Core 2.2</a>构建的，所以如果你比较熟悉Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework中Mvc开发经验，相信你一定很容易写出代码。</p>\n<h3 id=\"后端主要技术\"><a href=\"#后端主要技术\" class=\"headerlink\" title=\"后端主要技术\"></a>后端主要技术</h3><ul>\n<li>数据库：FreeSql+MySQL5.6</li>\n<li>ASP.NET Core2.2+MVC</li>\n<li>简化对象映射：AutoMapper</li>\n<li>身份认证框架：IdentityServer4</li>\n<li>Json Web令牌:JWT</li>\n<li>文档：Swagger</li>\n<li>序列化：Newtonsoft.Json</li>\n<li>测试框架：Xunit</li>\n<li>日志 NLog</li>\n<li>简化注入服务：Scrutor</li>\n<li>通用扩展方法 Z.ExtensionMethods</li>\n</ul>\n<h3 id=\"前端-1\"><a href=\"#前端-1\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router等等等</p>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><h2 id=\"Server-端必备环境\"><a href=\"#Server-端必备环境\" class=\"headerlink\" title=\"Server 端必备环境\"></a>Server 端必备环境</h2><ul>\n<li>安装软件开发包 <a href=\"https://dotnet.microsoft.com/download/dotnet-core/2.2\" target=\"_blank\" rel=\"noopener\">.NET Core SDK 2.2</a>   </li>\n<li>安装开发工具  <a href=\"https://visualstudio.microsoft.com/zh-hans/vs/?rr=https%3A%2F%2Fcn.bing.com%2F\" target=\"_blank\" rel=\"noopener\">Visual Studio 2019</a>  </li>\n<li>安装MySQL（version： 5.6+,别装8.0+，未测试）</li>\n</ul>\n<h2 id=\"获取工程项目\"><a href=\"#获取工程项目\" class=\"headerlink\" title=\"获取工程项目\"></a>获取工程项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/luoyunchong/lin-cms-dotnetcore.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><p>打开lin-cms-dotnetcore项目目录</p>\n<p>右击build-all.ps1,使用powershell运行。即可安装好相应的依赖。</p>\n<p>或</p>\n<p>打开powershell，cd到lin-cms-dotnetcore目录 ，输入如 下命令，运行此脚本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\build-all.ps1</span><br></pre></td></tr></table></figure>\n\n<p>双击lin-cms-dotnetcore.sln即可使用vs2019打开项目。</p>\n<h2 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h2><p>src/LinCms.Web目录中appsettings.json<br><strong>请务必根据自己的实际情况修改此配置项</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;ConnectionStrings&quot;: &#123;</span><br><span class=\"line\">  &quot;Default&quot;: &quot;Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=LinCms;Charset=utf8;SslMode=none;Max pool size=10&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据迁移\"><a href=\"#数据迁移\" class=\"headerlink\" title=\"数据迁移\"></a>数据迁移</h2><p>该项目使用<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">FreeSql</a>，默认自动迁移数据表结构，无须用户操作，但无数据，而且只有访问到表时才会创建某个表，所以用户可将<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/docs/sql/lincms.sql\" target=\"_blank\" rel=\"noopener\">备份SQL</a>放到Mysql中生成，还原表结构及数据。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>用户可使用vs2019，单击LinCms .Web，即可自动启动后台服务。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/H70086026eaca4dc8ab4806ee1d07443bP.jpg\" alt></p>\n<p>会打开浏览器，访问<a href=\"https://localhosst:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener\">https://localhosst:5001/swagger/index.html</a>，会看到swagger的文档。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg\" alt></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p><a href=\"https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/\">https://blog.igeekfan.cn/2019/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu/</a></p>\n<h2 id=\"讨论交流\"><a href=\"#讨论交流\" class=\"headerlink\" title=\"讨论交流\"></a>讨论交流</h2><h3 id=\"QQ-交流群\"><a href=\"#QQ-交流群\" class=\"headerlink\" title=\"QQ 交流群\"></a>QQ 交流群</h3><ul>\n<li>林间有风（lin-cms-vue） QQ 群号：643205479</li>\n<li>.NET Core搬砖队(lin-cms-dotnetcore) QQ群号：762828442</li>\n</ul>\n<img class=\"QR-img\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/Hed659970c86c4004b42480fe7d7f97acW.jpg\">\n\n<img class=\"QR-img\" style=\"margin-left:10px\" width=\"258\" height=\"300\" src=\"https://ae01.alicdn.com/kf/H6c1668c7987a436caae6b19ee6b86af5J.jpg\">\n\n<h3 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h3><p>微信搜索：林间有风</p>\n<img class=\"QR-img\" src=\"https://ae01.alicdn.com/kf/H4e69faac4a834b8a82f54ea05d2dd53av.jpg\">\n\n\n<h2 id=\"下个版本开发计划\"><a href=\"#下个版本开发计划\" class=\"headerlink\" title=\"下个版本开发计划\"></a>下个版本开发计划</h2><ol>\n<li>迁移Mock.Luo项目至lin-cms-dotnetcore,</li>\n<li>实现模块化开发，支持基础组件安装与卸载。</li>\n<li>实现abp vnext的文档的功能 <a href=\"https://docs.abp.io/en/abp/latest\" target=\"_blank\" rel=\"noopener\">https://docs.abp.io/en/abp/latest</a></li>\n<li>写文档。</li>\n</ol>\n<ul>\n<li><input disabled type=\"checkbox\"> 基于lin-cms-vue的基础,将之前Mock.luo项目中的博客迁移过来<ul>\n<li><input checked disabled type=\"checkbox\"> 博客随笔发布/编辑/删除</li>\n<li><input checked disabled type=\"checkbox\"> 留言板</li>\n<li><input disabled type=\"checkbox\"> 评论回复、审核、点赞等</li>\n<li><input disabled type=\"checkbox\"> 前端展示博客效果</li>\n</ul>\n</li>\n<li><input checked disabled type=\"checkbox\"> 字典管理分为如下<ul>\n<li><input checked disabled type=\"checkbox\"> 基础资料  BaseItem</li>\n<li><input checked disabled type=\"checkbox\"> 类别管理  BaseType</li>\n</ul>\n</li>\n<li><input checked disabled type=\"checkbox\"> 创建时间、创建人、修改时间、修改人、删除人、删除时间、是否删除(软删除)</li>\n<li><input checked disabled type=\"checkbox\"> 部署 </li>\n<li><input disabled type=\"checkbox\"> 系统访问日志、错误日志可视化</li>\n<li><input disabled type=\"checkbox\"> 完善文档</li>\n<li><input disabled type=\"checkbox\"> 重构核心库结构</li>\n</ul>\n<h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><ul>\n<li>Gitee 链接 <a href=\"https://gitee.com/igeekfan/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>\n<li>GitHub 链接 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png","popularPost_tmp_gaData":{"updated":"Mon Dec 09 2019 19:16:08 GMT+0800 (GMT+08:00)","title":"lin-cms-dotnet-core README","path":"2019/10/08/lin-cms-dotnetcore/README/","eyeCatchImage":"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png","excerpt":"<h1 align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <p>\n  Lin CMS .NET Core\n  </p>\n</h1>\n😃 A simple and practical CMS implememted by .NET Core 2.2","date":"2019-10-08T04:44:22.000Z","pv":0,"totalPV":0,"categories":"lin-cms-dotnetcore","tags":[".NET Core","开源","lin-cms"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"csredis-in-asp.net core理论实战-主从配置、哨兵模式","date":"2019-07-06T13:09:07.000Z","_content":"\n# csredis     \n- GitHub  https://github.com/2881099/csredis\n\n看了github上的开源项目,上面真的只是单纯的使用文档，可能对于我这种人（菜鸟）就不太友好，\n\n我知道他对标的是ServiceStack.Redis， 一开始csredis只支持. net 版本，但原作者没有继续维护，作者使用 . net core重写后，逐渐演化的一个. net core 版本的redis 驱动，\n\n使用这个类库可以方便的地在 c#中访问redis数据库，官方介绍 \n## 低门槛、高性能，和分区高级玩法的redis-cli SDK；\n\n我呢，就照着官方文档写一些示例，大佬就别看了，只是集成方案与学习笔记。\n\n- https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/\n\n<!-- more -->\n\n在学习之前，看到README.md上的内容不免陷入沉思，好多关键字我都不懂是什么意思，所以还是从理论入手，搜索资料，整合出入门资料，往后再讲在asp .net core中集成与使用的示例。\n\n\n## 哨兵模式\n * Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d \n\n**先在本地搭建好主从redis服务，我本地win10，已安装好一个redis,部署在6379端口上、先把这些文档看看。**\n\n### 下载\nwindows安装绿色版Redis \n- https://blog.csdn.net/ml863606/article/details/87456239\n\n## 主从配置(Windows版)\n本地Redis主从配置(Windows版)，从github上下载zip压缩包，解压后，复制二份文件夹至某一目录，配置二个从Redis服务器，可参考如下\n- https://www.cnblogs.com/cang12138/p/9132288.html#_label0\n\n### 简单教程\nD:\\services\\Redis-x64-3.2.100目录 其实有 “Windows Service Documentation.docx ”，上面说的很清楚，这里只说最简单的配置多个服务的方式，使用文本编辑器打开redis.windows-service.conf文件，可修改启用端口。\n```\nport 6380\n```\ncmd 到D:\\services\\Redis-x64-3.2.100-1，一定要管理员运行\n```\n#安装服务\nredis-server --service-install redis.windows-service.conf  --service-name redis6380\n#开启服务\nnet start redis6380  \n```\n如果无法开启服务redis6380，就删除此服务，再次执行，见下方参考命令 删除服务。\n\n本地安装成了三个reids,他们运行在不同的端口，三个哨兵。\n服务类型 | IP|port\n---|---|---\nmaster Redis服务|localhost|6379\nslave Redis服务器 |localhost|6380\nslave Redis服务器 |localhost|6381\nsentinel|localhost|26381\nsentinel|localhost|26379\nsentinel|localhost|26380\n\n```\nslaveof $host $port 作用是设置主从库，在redis-cli命令中执行，即可将此redis设置为host下port端口的从库，$开头的为参数 \n\nslaveof no one #取消同步\n\n也可在windows-server.conf文件中配置\n```\n\n6379那个redis是使用msi安装包安装的，所以redis-cli是可以在任意文件夹位置执行的，如未配置，请在D:\\service\\Redis-x64-3.2.100-1目录下执行这些命令。\n\n```\nC:\\Users\\Computer>redis-cli -p 6380\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\nctrl+c退出命令行状态。\nC:\\Users\\Computer>redis-cli -p 6381\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\n```\n\n另开一个终端 \n```\nC:\\Users\\Computer>redis-cli -p 6379\n127.0.0.1:6379> set a 1233\nOK\n127.0.0.1:6379> get a\n\"1233\"\n```\n\n原本的终端得到a的值是\"1233\"，已经被同步过来了。\n```\n127.0.0.1:6381> get a\n\"1233\"\n```\n\n### 参考命令\n\n右击电脑 ->管理->服务和应用程序 ->服务->可选择服务名进行管理。\n~~~\n#开启服务\nnet start redis6380  \n#关闭服务\nnet stop redis6380  \n#删除服务：当服务不正常时可根据名称删除\nsc delete redis6380  \n~~~\n以管理员权限cmd到目录D:\\services\\Redis-x64-3.2.100中，可使用如下命令。\n* Installing the Service：--service-install\n```\nredis-server --service-install redis.windows-service.conf --loglevel verbose\nredis-server --service-install redis.windows.conf  --service-name redis6380\n```\n* Uninstalling the Service：--service-uninstall\n```\nredis-server --service-uninstall\n```\n* Starting the Service:--service-start\n```\nredis-server --service-start\n```\n* Stopping the Service:--service-stop\n```\nredis-server --service-stop\n```\n* Naming the Service: --service-name name\n```\nredis-server --service-install --service-name redisService1 --port 10001\n```\n* set port :--port 10001\n\n查看redis 版本、redis-cli版本\n```\nPS D:\\service\\Redis-x64-3.2.100-1> redis-server -v\nRedis server v=3.2.100 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=dd26f1f93c5130ee\nPS D:\\service\\Redis-x64-3.2.100-1> redis-cli -v\nredis-cli 3.2.100\n```\n\n### 哨兵配置\n哨兵模式是Redis提供的一个命令，独立进程，独立运行，哨兵的作用是为了实现对redis服务器状态的监控，保证服务的可用性，实现故障切换，无须人为干预。\n\n1.配置项\n\n这个是通过 .msi文件安装的redis，与.zip解压后启动的服务无区别。打开E:\\Program Files\\Redis\\sentinel.conf，没有就创建此文件，另外二个redis，只用改port对应的值，改成26739、26740，配置内容如下：\n```conf\n#当前Sentinel服务运行的端口\nport 26381\n# 3s内mymaster无响应，则认为mymaster宕机了\nsentinel monitor mymaster 127.0.0.1 6379 2\n#如果10秒后,mysater仍没启动过来，则启动failover\nsentinel down-after-milliseconds mymaster 3000\n# 执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步\nsentinel failover-timeout mymaster 10000\n```\n\n**配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，127.0.0.1代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。**\n\n2. 启动哨兵\n\n前提redis服务已启动。\n```PowerShell\nPS E:\\Program Files\\Redis> .\\redis-server.exe .\\sentinel.conf --sentinel\n                _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 3.2.100 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in sentinel mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 26381\n |    `-._   `._    /     _.-'    |     PID: 22452\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |                                  \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                       \n          `-._        _.-'                                           \n              `-.__.-'                                               \n\n[22452] 07 Jul 11:47:00.111 # Sentinel ID is fc076362c0a5cc71d3c72f71c00a15b2726b2bf8\n[22452] 07 Jul 11:47:00.111 # +monitor master mymaster 127.0.0.1 6379 quorum 2\n[22452] 07 Jul 11:47:00.114 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n```\n\n因为windows下不支持守护进程(一种可在后台运行的程序)，这样命令行一关闭，哨兵也停止了（Windows does not support daemonize. Start Redis as service），在windows下叫服务（service）,是可以后台一直运行的。\n\n3. 在windows下以服务的形式启动哨兵\n\n管理员运行\n```PowerShell\nE:\\Program Files\\Redis>redis-server --service-install --service-name sentinel sentinel.conf --sentinel\n\nD:\\service\\Redis-x64-3.2.100-1>redis-server --service-install --service-name sentinel-1 sentinel.conf --sentinel\n[20700] 07 Jul 12:01:21.297 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-1\" \"D:\\service\\Redis-x64-3.2.100-1\\\"\n[20700] 07 Jul 12:01:21.300 # Redis successfully installed as a service.\n\nD:\\service\\Redis-x64-3.2.100-2>redis-server --service-install --service-name sentinel-2 sentinel.conf --sentinel\n[15772] 07 Jul 12:01:33.942 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-2\" \"D:\\service\\Redis-x64-3.2.100-2\\\"\n[15772] 07 Jul 12:01:33.944 # Redis successfully installed as a service.\n```\n\n此时D:\\\\service\\\\Redis-x64-3.2.100-1\\\\sentinel.conf，哨兵运行在26379端口 ,生成哨兵ID（Sentinel ID）\n```\nsentinel myid a2e75eedaf161357fe03df490a14b4158ad3ba88\n```\n\n也生成了如下内容，能监控到从slave服务6380的redis、slave6381的redis,也能监控到其他的哨兵，分别运行在26380、26381端口\n```\n# Generated by CONFIG REWRITE\ndir \"D:\\\\service\\\\Redis-x64-3.2.100-1\"\nsentinel config-epoch mymaster 0\nsentinel leader-epoch mymaster 0\nsentinel known-slave mymaster 127.0.0.1 6380\nsentinel known-slave mymaster 127.0.0.1 6381\nsentinel known-sentinel mymaster 127.0.0.1 26380 a2e75eedaf161357fe03df490a14b4158ad3ba88\nsentinel known-sentinel mymaster 127.0.0.1 26381 fc076362c0a5cc71d3c72f71c00a15b2726b2bf8\nsentinel current-epoch 0\n\n```\n\n在主master redis中查看redis当前信息\n```PS\nPS E:\\Program Files\\Redis> redis-cli -p 6379\n127.0.0.1:6379> info replication\n# Replication\nrole:master\nconnected_slaves:2\nslave0:ip=127.0.0.1,port=6381,state=online,offset=141627,lag=1\nslave1:ip=127.0.0.1,port=6380,state=online,offset=141627,lag=0\n...\n```\n\nctrl+c退出，查看redis6380信息\n```\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:1\nmaster_sync_in_progress:0\nslave_repl_offset:161451\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\n...\n```\n### 高可用测试\n\n#### 1.主服务器Master 挂掉\n停止 6379服务\n```\nC:\\WINDOWS\\system32>redis-cli -p 6379\n127.0.0.1:6379> shutdown\nnot connected> \n或\nC:\\WINDOWS\\system32>net stop redis\n```\n\n6379中sentinel_log.log,可见，当6379redis服务挂 了后，此日志表明，redis在failover后错误重试，switch-master切换为6380\n\n```log\n[240] 07 Jul 12:16:15.015 # +sdown master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.086 # +odown master mymaster 127.0.0.1 6379 #quorum 2/2\n[240] 07 Jul 12:16:15.086 # +new-epoch 1\n[240] 07 Jul 12:16:15.086 # +try-failover master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.088 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.090 # a2e75eedaf161357fe03df490a14b4158ad3ba88 voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.091 # 14c6428bae2afc1d92b5159b0788dbba753ee85b voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.188 # +elected-leader master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.188 # +failover-state-select-slave master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.255 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.255 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.338 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.718 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.718 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.800 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.217 # -odown master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.757 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.758 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.834 # +failover-end master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.834 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380\n[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380\n[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n[240] 07 Jul 12:16:19.853 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n```\n\n6380redis 服务 日志,当6379服务挂了后，6380成为主节点，其他节点(6379、6381)成为从节点，此时打开D:\\service\\Redis-x64-3.2.100-1\\redis.windows-service.conf，之前配置的slaveof 127.0.0.1 6379已经没有了。\n```\n[9404] 07 Jul 12:16:15.037 # +sdown master mymaster 127.0.0.1 6379\n[9404] 07 Jul 12:16:15.089 # +new-epoch 1\n[9404] 07 Jul 12:16:15.090 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[9404] 07 Jul 12:16:15.104 # +odown master mymaster 127.0.0.1 6379 #quorum 3/2\n[9404] 07 Jul 12:16:15.104 # Next failover delay: I will not start a failover before Sun Jul 07 12:16:35 2019\n[9404] 07 Jul 12:16:15.801 # +config-update-from sentinel 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 127.0.0.1 26381 @ mymaster 127.0.0.1 6379\n[9404] 07 Jul 12:16:15.801 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380\n[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380\n[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n[9404] 07 Jul 12:16:18.812 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n```\n\n此时查看 6380的信息,可以看到此时只有一个slave在线,其配置为127.0.0.1的6381端口，\n```\nredis-cli -p 6380\n127.0.0.1:6380> info replication\nrole:master\nconnected_slaves:1\nslave0:ip=127.0.0.1,port=6381,state=online,offset=119281,lag=1\nmaster_repl_offset:119547\n...\n```\n#### 2.6379服务再次启动\n\n当6379的服务启动后，6379的服务将成为6380的从服务器slave，再次通过 redis-cli -p 端口， 输入 info replication查看对应服务的节点信息\n```\nPS E:\\Program Files\\Redis> redis-server --service-start\n或\nC:\\WINDOWS\\system32>net start redis\n\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\n# Replication\nrole:master\nconnected_slaves:2\nslave0:ip=127.0.0.1,port=6379,state=online,offset=339593,lag=1\nslave1:ip=127.0.0.1,port=6381,state=online,offset=339593,lag=1\n...\n```\n\n#### 3.slave 6381关闭\n此时查看6380的info，可见此时只有一个从节点6379\n```\nC:\\WINDOWS\\system32>net stop redis6381\nrole:master\nconnected_slaves:1\n\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\nrole:master\nconnected_slaves:1\nslave0:ip=127.0.0.1,port=6379,state=online,offset=329392,lag=1\nmaster_repl_offset:329525\n...\n```\n\n\n### 相关链接\n <!--* Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d -->\n <!--* windows安装绿色版Redis - https://blog.csdn.net/ml863606/article/details/87456239-->\n <!--* 主从配置(Windows版) https://www.cnblogs.com/cang12138/p/9132288.html#_label0-->\n <!--* csredis https://github.com/2881099/csredis-->\n * Cross-platform GUI management tool for Redis https://github.com/uglide/RedisDesktopManager\n * Redis in Windows的3.x版本  https://github.com/MicrosoftArchive/redis\n * Redis in Windows的4.x版本 https://github.com/tporadowski/redis\n * Redis in linux https://github.com/antirez/redis\n * Redis高可用集群-哨兵模式（Redis-Sentinel）搭建配置教程【Windows环境】 https://aflyun.blog.csdn.net/article/details/79430105\n \n### linux版Redis主从搭建\n建议大家看这个文章，我一开始参考了其他的，写完windows版，才看到这个链接，关于**深入剖析Redis系列**\n* https://juejin.im/post/5b76e732f265da4376203849","source":"_posts/re-start/csredis-in-asp-net-core-master-slaver.md","raw":"---\ntitle: csredis-in-asp.net core理论实战-主从配置、哨兵模式\ndate: 2019-07-06 21:09:07\ntags:\n- Redis\n- ASP.NET Core\ncategory:\n- .NET Core\n---\n\n# csredis     \n- GitHub  https://github.com/2881099/csredis\n\n看了github上的开源项目,上面真的只是单纯的使用文档，可能对于我这种人（菜鸟）就不太友好，\n\n我知道他对标的是ServiceStack.Redis， 一开始csredis只支持. net 版本，但原作者没有继续维护，作者使用 . net core重写后，逐渐演化的一个. net core 版本的redis 驱动，\n\n使用这个类库可以方便的地在 c#中访问redis数据库，官方介绍 \n## 低门槛、高性能，和分区高级玩法的redis-cli SDK；\n\n我呢，就照着官方文档写一些示例，大佬就别看了，只是集成方案与学习笔记。\n\n- https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/\n\n<!-- more -->\n\n在学习之前，看到README.md上的内容不免陷入沉思，好多关键字我都不懂是什么意思，所以还是从理论入手，搜索资料，整合出入门资料，往后再讲在asp .net core中集成与使用的示例。\n\n\n## 哨兵模式\n * Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d \n\n**先在本地搭建好主从redis服务，我本地win10，已安装好一个redis,部署在6379端口上、先把这些文档看看。**\n\n### 下载\nwindows安装绿色版Redis \n- https://blog.csdn.net/ml863606/article/details/87456239\n\n## 主从配置(Windows版)\n本地Redis主从配置(Windows版)，从github上下载zip压缩包，解压后，复制二份文件夹至某一目录，配置二个从Redis服务器，可参考如下\n- https://www.cnblogs.com/cang12138/p/9132288.html#_label0\n\n### 简单教程\nD:\\services\\Redis-x64-3.2.100目录 其实有 “Windows Service Documentation.docx ”，上面说的很清楚，这里只说最简单的配置多个服务的方式，使用文本编辑器打开redis.windows-service.conf文件，可修改启用端口。\n```\nport 6380\n```\ncmd 到D:\\services\\Redis-x64-3.2.100-1，一定要管理员运行\n```\n#安装服务\nredis-server --service-install redis.windows-service.conf  --service-name redis6380\n#开启服务\nnet start redis6380  \n```\n如果无法开启服务redis6380，就删除此服务，再次执行，见下方参考命令 删除服务。\n\n本地安装成了三个reids,他们运行在不同的端口，三个哨兵。\n服务类型 | IP|port\n---|---|---\nmaster Redis服务|localhost|6379\nslave Redis服务器 |localhost|6380\nslave Redis服务器 |localhost|6381\nsentinel|localhost|26381\nsentinel|localhost|26379\nsentinel|localhost|26380\n\n```\nslaveof $host $port 作用是设置主从库，在redis-cli命令中执行，即可将此redis设置为host下port端口的从库，$开头的为参数 \n\nslaveof no one #取消同步\n\n也可在windows-server.conf文件中配置\n```\n\n6379那个redis是使用msi安装包安装的，所以redis-cli是可以在任意文件夹位置执行的，如未配置，请在D:\\service\\Redis-x64-3.2.100-1目录下执行这些命令。\n\n```\nC:\\Users\\Computer>redis-cli -p 6380\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\nctrl+c退出命令行状态。\nC:\\Users\\Computer>redis-cli -p 6381\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\n```\n\n另开一个终端 \n```\nC:\\Users\\Computer>redis-cli -p 6379\n127.0.0.1:6379> set a 1233\nOK\n127.0.0.1:6379> get a\n\"1233\"\n```\n\n原本的终端得到a的值是\"1233\"，已经被同步过来了。\n```\n127.0.0.1:6381> get a\n\"1233\"\n```\n\n### 参考命令\n\n右击电脑 ->管理->服务和应用程序 ->服务->可选择服务名进行管理。\n~~~\n#开启服务\nnet start redis6380  \n#关闭服务\nnet stop redis6380  \n#删除服务：当服务不正常时可根据名称删除\nsc delete redis6380  \n~~~\n以管理员权限cmd到目录D:\\services\\Redis-x64-3.2.100中，可使用如下命令。\n* Installing the Service：--service-install\n```\nredis-server --service-install redis.windows-service.conf --loglevel verbose\nredis-server --service-install redis.windows.conf  --service-name redis6380\n```\n* Uninstalling the Service：--service-uninstall\n```\nredis-server --service-uninstall\n```\n* Starting the Service:--service-start\n```\nredis-server --service-start\n```\n* Stopping the Service:--service-stop\n```\nredis-server --service-stop\n```\n* Naming the Service: --service-name name\n```\nredis-server --service-install --service-name redisService1 --port 10001\n```\n* set port :--port 10001\n\n查看redis 版本、redis-cli版本\n```\nPS D:\\service\\Redis-x64-3.2.100-1> redis-server -v\nRedis server v=3.2.100 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=dd26f1f93c5130ee\nPS D:\\service\\Redis-x64-3.2.100-1> redis-cli -v\nredis-cli 3.2.100\n```\n\n### 哨兵配置\n哨兵模式是Redis提供的一个命令，独立进程，独立运行，哨兵的作用是为了实现对redis服务器状态的监控，保证服务的可用性，实现故障切换，无须人为干预。\n\n1.配置项\n\n这个是通过 .msi文件安装的redis，与.zip解压后启动的服务无区别。打开E:\\Program Files\\Redis\\sentinel.conf，没有就创建此文件，另外二个redis，只用改port对应的值，改成26739、26740，配置内容如下：\n```conf\n#当前Sentinel服务运行的端口\nport 26381\n# 3s内mymaster无响应，则认为mymaster宕机了\nsentinel monitor mymaster 127.0.0.1 6379 2\n#如果10秒后,mysater仍没启动过来，则启动failover\nsentinel down-after-milliseconds mymaster 3000\n# 执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步\nsentinel failover-timeout mymaster 10000\n```\n\n**配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，127.0.0.1代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。**\n\n2. 启动哨兵\n\n前提redis服务已启动。\n```PowerShell\nPS E:\\Program Files\\Redis> .\\redis-server.exe .\\sentinel.conf --sentinel\n                _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 3.2.100 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in sentinel mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 26381\n |    `-._   `._    /     _.-'    |     PID: 22452\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |                                  \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                       \n          `-._        _.-'                                           \n              `-.__.-'                                               \n\n[22452] 07 Jul 11:47:00.111 # Sentinel ID is fc076362c0a5cc71d3c72f71c00a15b2726b2bf8\n[22452] 07 Jul 11:47:00.111 # +monitor master mymaster 127.0.0.1 6379 quorum 2\n[22452] 07 Jul 11:47:00.114 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n```\n\n因为windows下不支持守护进程(一种可在后台运行的程序)，这样命令行一关闭，哨兵也停止了（Windows does not support daemonize. Start Redis as service），在windows下叫服务（service）,是可以后台一直运行的。\n\n3. 在windows下以服务的形式启动哨兵\n\n管理员运行\n```PowerShell\nE:\\Program Files\\Redis>redis-server --service-install --service-name sentinel sentinel.conf --sentinel\n\nD:\\service\\Redis-x64-3.2.100-1>redis-server --service-install --service-name sentinel-1 sentinel.conf --sentinel\n[20700] 07 Jul 12:01:21.297 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-1\" \"D:\\service\\Redis-x64-3.2.100-1\\\"\n[20700] 07 Jul 12:01:21.300 # Redis successfully installed as a service.\n\nD:\\service\\Redis-x64-3.2.100-2>redis-server --service-install --service-name sentinel-2 sentinel.conf --sentinel\n[15772] 07 Jul 12:01:33.942 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-2\" \"D:\\service\\Redis-x64-3.2.100-2\\\"\n[15772] 07 Jul 12:01:33.944 # Redis successfully installed as a service.\n```\n\n此时D:\\\\service\\\\Redis-x64-3.2.100-1\\\\sentinel.conf，哨兵运行在26379端口 ,生成哨兵ID（Sentinel ID）\n```\nsentinel myid a2e75eedaf161357fe03df490a14b4158ad3ba88\n```\n\n也生成了如下内容，能监控到从slave服务6380的redis、slave6381的redis,也能监控到其他的哨兵，分别运行在26380、26381端口\n```\n# Generated by CONFIG REWRITE\ndir \"D:\\\\service\\\\Redis-x64-3.2.100-1\"\nsentinel config-epoch mymaster 0\nsentinel leader-epoch mymaster 0\nsentinel known-slave mymaster 127.0.0.1 6380\nsentinel known-slave mymaster 127.0.0.1 6381\nsentinel known-sentinel mymaster 127.0.0.1 26380 a2e75eedaf161357fe03df490a14b4158ad3ba88\nsentinel known-sentinel mymaster 127.0.0.1 26381 fc076362c0a5cc71d3c72f71c00a15b2726b2bf8\nsentinel current-epoch 0\n\n```\n\n在主master redis中查看redis当前信息\n```PS\nPS E:\\Program Files\\Redis> redis-cli -p 6379\n127.0.0.1:6379> info replication\n# Replication\nrole:master\nconnected_slaves:2\nslave0:ip=127.0.0.1,port=6381,state=online,offset=141627,lag=1\nslave1:ip=127.0.0.1,port=6380,state=online,offset=141627,lag=0\n...\n```\n\nctrl+c退出，查看redis6380信息\n```\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:1\nmaster_sync_in_progress:0\nslave_repl_offset:161451\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\n...\n```\n### 高可用测试\n\n#### 1.主服务器Master 挂掉\n停止 6379服务\n```\nC:\\WINDOWS\\system32>redis-cli -p 6379\n127.0.0.1:6379> shutdown\nnot connected> \n或\nC:\\WINDOWS\\system32>net stop redis\n```\n\n6379中sentinel_log.log,可见，当6379redis服务挂 了后，此日志表明，redis在failover后错误重试，switch-master切换为6380\n\n```log\n[240] 07 Jul 12:16:15.015 # +sdown master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.086 # +odown master mymaster 127.0.0.1 6379 #quorum 2/2\n[240] 07 Jul 12:16:15.086 # +new-epoch 1\n[240] 07 Jul 12:16:15.086 # +try-failover master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.088 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.090 # a2e75eedaf161357fe03df490a14b4158ad3ba88 voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.091 # 14c6428bae2afc1d92b5159b0788dbba753ee85b voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[240] 07 Jul 12:16:15.188 # +elected-leader master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.188 # +failover-state-select-slave master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.255 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.255 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.338 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.718 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.718 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:15.800 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.217 # -odown master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.757 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.758 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.834 # +failover-end master mymaster 127.0.0.1 6379\n[240] 07 Jul 12:16:16.834 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380\n[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380\n[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n[240] 07 Jul 12:16:19.853 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n```\n\n6380redis 服务 日志,当6379服务挂了后，6380成为主节点，其他节点(6379、6381)成为从节点，此时打开D:\\service\\Redis-x64-3.2.100-1\\redis.windows-service.conf，之前配置的slaveof 127.0.0.1 6379已经没有了。\n```\n[9404] 07 Jul 12:16:15.037 # +sdown master mymaster 127.0.0.1 6379\n[9404] 07 Jul 12:16:15.089 # +new-epoch 1\n[9404] 07 Jul 12:16:15.090 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1\n[9404] 07 Jul 12:16:15.104 # +odown master mymaster 127.0.0.1 6379 #quorum 3/2\n[9404] 07 Jul 12:16:15.104 # Next failover delay: I will not start a failover before Sun Jul 07 12:16:35 2019\n[9404] 07 Jul 12:16:15.801 # +config-update-from sentinel 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 127.0.0.1 26381 @ mymaster 127.0.0.1 6379\n[9404] 07 Jul 12:16:15.801 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380\n[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380\n[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n[9404] 07 Jul 12:16:18.812 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380\n```\n\n此时查看 6380的信息,可以看到此时只有一个slave在线,其配置为127.0.0.1的6381端口，\n```\nredis-cli -p 6380\n127.0.0.1:6380> info replication\nrole:master\nconnected_slaves:1\nslave0:ip=127.0.0.1,port=6381,state=online,offset=119281,lag=1\nmaster_repl_offset:119547\n...\n```\n#### 2.6379服务再次启动\n\n当6379的服务启动后，6379的服务将成为6380的从服务器slave，再次通过 redis-cli -p 端口， 输入 info replication查看对应服务的节点信息\n```\nPS E:\\Program Files\\Redis> redis-server --service-start\n或\nC:\\WINDOWS\\system32>net start redis\n\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\n# Replication\nrole:master\nconnected_slaves:2\nslave0:ip=127.0.0.1,port=6379,state=online,offset=339593,lag=1\nslave1:ip=127.0.0.1,port=6381,state=online,offset=339593,lag=1\n...\n```\n\n#### 3.slave 6381关闭\n此时查看6380的info，可见此时只有一个从节点6379\n```\nC:\\WINDOWS\\system32>net stop redis6381\nrole:master\nconnected_slaves:1\n\nPS E:\\Program Files\\Redis> redis-cli -p 6380\n127.0.0.1:6380> info replication\nrole:master\nconnected_slaves:1\nslave0:ip=127.0.0.1,port=6379,state=online,offset=329392,lag=1\nmaster_repl_offset:329525\n...\n```\n\n\n### 相关链接\n <!--* Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d -->\n <!--* windows安装绿色版Redis - https://blog.csdn.net/ml863606/article/details/87456239-->\n <!--* 主从配置(Windows版) https://www.cnblogs.com/cang12138/p/9132288.html#_label0-->\n <!--* csredis https://github.com/2881099/csredis-->\n * Cross-platform GUI management tool for Redis https://github.com/uglide/RedisDesktopManager\n * Redis in Windows的3.x版本  https://github.com/MicrosoftArchive/redis\n * Redis in Windows的4.x版本 https://github.com/tporadowski/redis\n * Redis in linux https://github.com/antirez/redis\n * Redis高可用集群-哨兵模式（Redis-Sentinel）搭建配置教程【Windows环境】 https://aflyun.blog.csdn.net/article/details/79430105\n \n### linux版Redis主从搭建\n建议大家看这个文章，我一开始参考了其他的，写完windows版，才看到这个链接，关于**深入剖析Redis系列**\n* https://juejin.im/post/5b76e732f265da4376203849","slug":"re-start/csredis-in-asp-net-core-master-slaver","published":1,"updated":"2019-10-08T04:21:13.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362ypq005hm0tw2oe8qck6","content":"<h1 id=\"csredis\"><a href=\"#csredis\" class=\"headerlink\" title=\"csredis\"></a>csredis</h1><ul>\n<li>GitHub  <a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n</ul>\n<p>看了github上的开源项目,上面真的只是单纯的使用文档，可能对于我这种人（菜鸟）就不太友好，</p>\n<p>我知道他对标的是ServiceStack.Redis， 一开始csredis只支持. net 版本，但原作者没有继续维护，作者使用 . net core重写后，逐渐演化的一个. net core 版本的redis 驱动，</p>\n<p>使用这个类库可以方便的地在 c#中访问redis数据库，官方介绍 </p>\n<h2 id=\"低门槛、高性能，和分区高级玩法的redis-cli-SDK；\"><a href=\"#低门槛、高性能，和分区高级玩法的redis-cli-SDK；\" class=\"headerlink\" title=\"低门槛、高性能，和分区高级玩法的redis-cli SDK；\"></a>低门槛、高性能，和分区高级玩法的redis-cli SDK；</h2><p>我呢，就照着官方文档写一些示例，大佬就别看了，只是集成方案与学习笔记。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<p>在学习之前，看到README.md上的内容不免陷入沉思，好多关键字我都不懂是什么意思，所以还是从理论入手，搜索资料，整合出入门资料，往后再讲在asp .net core中集成与使用的示例。</p>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><ul>\n<li>Redis哨兵（Sentinel）模式 <a href=\"https://www.jianshu.com/p/06ab9daf921d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/06ab9daf921d</a> </li>\n</ul>\n<p><strong>先在本地搭建好主从redis服务，我本地win10，已安装好一个redis,部署在6379端口上、先把这些文档看看。</strong></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>windows安装绿色版Redis </p>\n<ul>\n<li><a href=\"https://blog.csdn.net/ml863606/article/details/87456239\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ml863606/article/details/87456239</a></li>\n</ul>\n<h2 id=\"主从配置-Windows版\"><a href=\"#主从配置-Windows版\" class=\"headerlink\" title=\"主从配置(Windows版)\"></a>主从配置(Windows版)</h2><p>本地Redis主从配置(Windows版)，从github上下载zip压缩包，解压后，复制二份文件夹至某一目录，配置二个从Redis服务器，可参考如下</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/cang12138/p/9132288.html#_label0\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cang12138/p/9132288.html#_label0</a></li>\n</ul>\n<h3 id=\"简单教程\"><a href=\"#简单教程\" class=\"headerlink\" title=\"简单教程\"></a>简单教程</h3><p>D:\\services\\Redis-x64-3.2.100目录 其实有 “Windows Service Documentation.docx ”，上面说的很清楚，这里只说最简单的配置多个服务的方式，使用文本编辑器打开redis.windows-service.conf文件，可修改启用端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">port 6380</span><br></pre></td></tr></table></figure>\n\n<p>cmd 到D:\\services\\Redis-x64-3.2.100-1，一定要管理员运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#安装服务</span><br><span class=\"line\">redis-server --service-install redis.windows-service.conf  --service-name redis6380</span><br><span class=\"line\">#开启服务</span><br><span class=\"line\">net start redis6380</span><br></pre></td></tr></table></figure>\n\n<p>如果无法开启服务redis6380，就删除此服务，再次执行，见下方参考命令 删除服务。</p>\n<p>本地安装成了三个reids,他们运行在不同的端口，三个哨兵。<br>服务类型 | IP|port<br>—|—|—<br>master Redis服务|localhost|6379<br>slave Redis服务器 |localhost|6380<br>slave Redis服务器 |localhost|6381<br>sentinel|localhost|26381<br>sentinel|localhost|26379<br>sentinel|localhost|26380</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">slaveof $host $port 作用是设置主从库，在redis-cli命令中执行，即可将此redis设置为host下port端口的从库，$开头的为参数 </span><br><span class=\"line\"></span><br><span class=\"line\">slaveof no one #取消同步</span><br><span class=\"line\"></span><br><span class=\"line\">也可在windows-server.conf文件中配置</span><br></pre></td></tr></table></figure>\n\n<p>6379那个redis是使用msi安装包安装的，所以redis-cli是可以在任意文件夹位置执行的，如未配置，请在D:\\service\\Redis-x64-3.2.100-1目录下执行这些命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">ctrl+c退出命令行状态。</span><br><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6381</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>另开一个终端 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6379</span><br><span class=\"line\">127.0.0.1:6379&gt; set a 1233</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;1233&quot;</span><br></pre></td></tr></table></figure>\n\n<p>原本的终端得到a的值是”1233”，已经被同步过来了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; get a</span><br><span class=\"line\">&quot;1233&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考命令\"><a href=\"#参考命令\" class=\"headerlink\" title=\"参考命令\"></a>参考命令</h3><p>右击电脑 -&gt;管理-&gt;服务和应用程序 -&gt;服务-&gt;可选择服务名进行管理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#开启服务</span><br><span class=\"line\">net start redis6380  </span><br><span class=\"line\">#关闭服务</span><br><span class=\"line\">net stop redis6380  </span><br><span class=\"line\">#删除服务：当服务不正常时可根据名称删除</span><br><span class=\"line\">sc delete redis6380</span><br></pre></td></tr></table></figure>\n\n<p>以管理员权限cmd到目录D:\\services\\Redis-x64-3.2.100中，可使用如下命令。</p>\n<ul>\n<li><p>Installing the Service：–service-install</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-install redis.windows-service.conf --loglevel verbose</span><br><span class=\"line\">redis-server --service-install redis.windows.conf  --service-name redis6380</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Uninstalling the Service：–service-uninstall</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Starting the Service:–service-start</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Stopping the Service:–service-stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Naming the Service: –service-name name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-install --service-name redisService1 --port 10001</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set port :–port 10001</p>\n</li>\n</ul>\n<p>查看redis 版本、redis-cli版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS D:\\service\\Redis-x64-3.2.100-1&gt; redis-server -v</span><br><span class=\"line\">Redis server v=3.2.100 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=dd26f1f93c5130ee</span><br><span class=\"line\">PS D:\\service\\Redis-x64-3.2.100-1&gt; redis-cli -v</span><br><span class=\"line\">redis-cli 3.2.100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哨兵配置\"><a href=\"#哨兵配置\" class=\"headerlink\" title=\"哨兵配置\"></a>哨兵配置</h3><p>哨兵模式是Redis提供的一个命令，独立进程，独立运行，哨兵的作用是为了实现对redis服务器状态的监控，保证服务的可用性，实现故障切换，无须人为干预。</p>\n<p>1.配置项</p>\n<p>这个是通过 .msi文件安装的redis，与.zip解压后启动的服务无区别。打开E:\\Program Files\\Redis\\sentinel.conf，没有就创建此文件，另外二个redis，只用改port对应的值，改成26739、26740，配置内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#当前Sentinel服务运行的端口</span><br><span class=\"line\">port 26381</span><br><span class=\"line\"># 3s内mymaster无响应，则认为mymaster宕机了</span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\">#如果10秒后,mysater仍没启动过来，则启动failover</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 3000</span><br><span class=\"line\"># 执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步</span><br><span class=\"line\">sentinel failover-timeout mymaster 10000</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，127.0.0.1代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</strong></p>\n<ol start=\"2\">\n<li>启动哨兵</li>\n</ol>\n<p>前提redis服务已启动。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; .\\redis-server.exe .\\sentinel.conf --sentinel</span><br><span class=\"line\">                _._                                                  </span><br><span class=\"line\">           _.-``__ <span class=\"string\">''</span>-._                                             </span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">''</span>-._           Redis <span class=\"number\">3.2</span>.<span class=\"number\">100</span> (<span class=\"number\">00000000</span>/<span class=\"number\">0</span>) <span class=\"number\">64</span> bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">''</span>-._                                   </span><br><span class=\"line\"> (    <span class=\"string\">'      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class=\"string\">'|     Port: 26381</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-'</span>    |     PID: <span class=\"number\">22452</span></span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">'    _.-'</span>_.-<span class=\"string\">'|                                  </span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-'</span>_.-<span class=\"string\">'    |           http://redis.io        </span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-'</span>_.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">'    _.-'</span>_.-<span class=\"string\">'|                                  </span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-'</span>_.-<span class=\"string\">'    |                                  </span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-'</span>_.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">'    _.-'</span>                                       </span><br><span class=\"line\">          `-._        _.-<span class=\"string\">'                                           </span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-'</span>                                               </span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.111</span> <span class=\"comment\"># Sentinel ID is fc076362c0a5cc71d3c72f71c00a15b2726b2bf8</span></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.111</span> <span class=\"comment\"># +monitor master mymaster 127.0.0.1 6379 quorum 2</span></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.114</span> * +slave slave <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6381</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> <span class=\"number\">6381</span> @ mymaster <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>因为windows下不支持守护进程(一种可在后台运行的程序)，这样命令行一关闭，哨兵也停止了（Windows does not support daemonize. Start Redis as service），在windows下叫服务（service）,是可以后台一直运行的。</p>\n<ol start=\"3\">\n<li>在windows下以服务的形式启动哨兵</li>\n</ol>\n<p>管理员运行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">E:\\Program Files\\Redis&gt;redis-server --service-install --service-name sentinel sentinel.conf --sentinel</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\service\\Redis-x64-<span class=\"number\">3.2</span>.<span class=\"number\">100</span>-<span class=\"number\">1</span>&gt;redis-server --service-install --service-name sentinel-<span class=\"number\">1</span> sentinel.conf --sentinel</span><br><span class=\"line\">[<span class=\"number\">20700</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">21.297</span> <span class=\"comment\"># Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-1\" \"D:\\service\\Redis-x64-3.2.100-1\\\"</span></span><br><span class=\"line\">[<span class=\"number\">20700</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">21.300</span> <span class=\"comment\"># Redis successfully installed as a service.</span></span><br><span class=\"line\"></span><br><span class=\"line\">D:\\service\\Redis-x64-<span class=\"number\">3.2</span>.<span class=\"number\">100</span>-<span class=\"number\">2</span>&gt;redis-server --service-install --service-name sentinel-<span class=\"number\">2</span> sentinel.conf --sentinel</span><br><span class=\"line\">[<span class=\"number\">15772</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">33.942</span> <span class=\"comment\"># Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-2\" \"D:\\service\\Redis-x64-3.2.100-2\\\"</span></span><br><span class=\"line\">[<span class=\"number\">15772</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">33.944</span> <span class=\"comment\"># Redis successfully installed as a service.</span></span><br></pre></td></tr></table></figure>\n\n<p>此时D:\\service\\Redis-x64-3.2.100-1\\sentinel.conf，哨兵运行在26379端口 ,生成哨兵ID（Sentinel ID）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentinel myid a2e75eedaf161357fe03df490a14b4158ad3ba88</span><br></pre></td></tr></table></figure>\n\n<p>也生成了如下内容，能监控到从slave服务6380的redis、slave6381的redis,也能监控到其他的哨兵，分别运行在26380、26381端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Generated by CONFIG REWRITE</span><br><span class=\"line\">dir &quot;D:\\\\service\\\\Redis-x64-3.2.100-1&quot;</span><br><span class=\"line\">sentinel config-epoch mymaster 0</span><br><span class=\"line\">sentinel leader-epoch mymaster 0</span><br><span class=\"line\">sentinel known-slave mymaster 127.0.0.1 6380</span><br><span class=\"line\">sentinel known-slave mymaster 127.0.0.1 6381</span><br><span class=\"line\">sentinel known-sentinel mymaster 127.0.0.1 26380 a2e75eedaf161357fe03df490a14b4158ad3ba88</span><br><span class=\"line\">sentinel known-sentinel mymaster 127.0.0.1 26381 fc076362c0a5cc71d3c72f71c00a15b2726b2bf8</span><br><span class=\"line\">sentinel current-epoch 0</span><br></pre></td></tr></table></figure>\n\n<p>在主master redis中查看redis当前信息</p>\n<figure class=\"highlight ps\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:<span class=\"number\">2</span></span><br><span class=\"line\">slave0:ip=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>,port=<span class=\"number\">6381</span>,state=online,offset=<span class=\"number\">141627</span>,lag=<span class=\"number\">1</span></span><br><span class=\"line\">slave1:ip=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>,port=<span class=\"number\">6380</span>,state=online,offset=<span class=\"number\">141627</span>,lag=<span class=\"number\">0</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>ctrl+c退出，查看redis6380信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:slave</span><br><span class=\"line\">master_host:127.0.0.1</span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:1</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:161451</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高可用测试\"><a href=\"#高可用测试\" class=\"headerlink\" title=\"高可用测试\"></a>高可用测试</h3><h4 id=\"1-主服务器Master-挂掉\"><a href=\"#1-主服务器Master-挂掉\" class=\"headerlink\" title=\"1.主服务器Master 挂掉\"></a>1.主服务器Master 挂掉</h4><p>停止 6379服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt;redis-cli -p 6379</span><br><span class=\"line\">127.0.0.1:6379&gt; shutdown</span><br><span class=\"line\">not connected&gt; </span><br><span class=\"line\">或</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;net stop redis</span><br></pre></td></tr></table></figure>\n\n<p>6379中sentinel_log.log,可见，当6379redis服务挂 了后，此日志表明，redis在failover后错误重试，switch-master切换为6380</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[240] 07 Jul 12:16:15.015 # +sdown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +odown master mymaster 127.0.0.1 6379 #quorum 2/2</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +new-epoch 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.088 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.090 # a2e75eedaf161357fe03df490a14b4158ad3ba88 voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.091 # 14c6428bae2afc1d92b5159b0788dbba753ee85b voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.188 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.188 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.255 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.255 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.338 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.718 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.718 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.800 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.217 # -odown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.757 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.758 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.834 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.834 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:19.853 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br></pre></td></tr></table></figure>\n\n<p>6380redis 服务 日志,当6379服务挂了后，6380成为主节点，其他节点(6379、6381)成为从节点，此时打开D:\\service\\Redis-x64-3.2.100-1\\redis.windows-service.conf，之前配置的slaveof 127.0.0.1 6379已经没有了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[9404] 07 Jul 12:16:15.037 # +sdown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.089 # +new-epoch 1</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.090 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.104 # +odown master mymaster 127.0.0.1 6379 #quorum 3/2</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.104 # Next failover delay: I will not start a failover before Sun Jul 07 12:16:35 2019</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.801 # +config-update-from sentinel 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 127.0.0.1 26381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.801 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:18.812 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br></pre></td></tr></table></figure>\n\n<p>此时查看 6380的信息,可以看到此时只有一个slave在线,其配置为127.0.0.1的6381端口，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6381,state=online,offset=119281,lag=1</span><br><span class=\"line\">master_repl_offset:119547</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6379服务再次启动\"><a href=\"#2-6379服务再次启动\" class=\"headerlink\" title=\"2.6379服务再次启动\"></a>2.6379服务再次启动</h4><p>当6379的服务启动后，6379的服务将成为6380的从服务器slave，再次通过 redis-cli -p 端口， 输入 info replication查看对应服务的节点信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-server --service-start</span><br><span class=\"line\">或</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;net start redis</span><br><span class=\"line\"></span><br><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:2</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6379,state=online,offset=339593,lag=1</span><br><span class=\"line\">slave1:ip=127.0.0.1,port=6381,state=online,offset=339593,lag=1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-slave-6381关闭\"><a href=\"#3-slave-6381关闭\" class=\"headerlink\" title=\"3.slave 6381关闭\"></a>3.slave 6381关闭</h4><p>此时查看6380的info，可见此时只有一个从节点6379</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt;net stop redis6381</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\"></span><br><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6379,state=online,offset=329392,lag=1</span><br><span class=\"line\">master_repl_offset:329525</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3> <!--* Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d -->\n <!--* windows安装绿色版Redis - https://blog.csdn.net/ml863606/article/details/87456239-->\n <!--* 主从配置(Windows版) https://www.cnblogs.com/cang12138/p/9132288.html#_label0-->\n <!--* csredis https://github.com/2881099/csredis-->\n<ul>\n<li>Cross-platform GUI management tool for Redis <a href=\"https://github.com/uglide/RedisDesktopManager\" target=\"_blank\" rel=\"noopener\">https://github.com/uglide/RedisDesktopManager</a></li>\n<li>Redis in Windows的3.x版本  <a href=\"https://github.com/MicrosoftArchive/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/MicrosoftArchive/redis</a></li>\n<li>Redis in Windows的4.x版本 <a href=\"https://github.com/tporadowski/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/tporadowski/redis</a></li>\n<li>Redis in linux <a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/antirez/redis</a></li>\n<li>Redis高可用集群-哨兵模式（Redis-Sentinel）搭建配置教程【Windows环境】 <a href=\"https://aflyun.blog.csdn.net/article/details/79430105\" target=\"_blank\" rel=\"noopener\">https://aflyun.blog.csdn.net/article/details/79430105</a></li>\n</ul>\n<h3 id=\"linux版Redis主从搭建\"><a href=\"#linux版Redis主从搭建\" class=\"headerlink\" title=\"linux版Redis主从搭建\"></a>linux版Redis主从搭建</h3><p>建议大家看这个文章，我一开始参考了其他的，写完windows版，才看到这个链接，关于<strong>深入剖析Redis系列</strong></p>\n<ul>\n<li><a href=\"https://juejin.im/post/5b76e732f265da4376203849\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b76e732f265da4376203849</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"csredis\"><a href=\"#csredis\" class=\"headerlink\" title=\"csredis\"></a>csredis</h1><ul>\n<li>GitHub  <a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n</ul>\n<p>看了github上的开源项目,上面真的只是单纯的使用文档，可能对于我这种人（菜鸟）就不太友好，</p>\n<p>我知道他对标的是ServiceStack.Redis， 一开始csredis只支持. net 版本，但原作者没有继续维护，作者使用 . net core重写后，逐渐演化的一个. net core 版本的redis 驱动，</p>\n<p>使用这个类库可以方便的地在 c#中访问redis数据库，官方介绍 </p>\n<h2 id=\"低门槛、高性能，和分区高级玩法的redis-cli-SDK；\"><a href=\"#低门槛、高性能，和分区高级玩法的redis-cli-SDK；\" class=\"headerlink\" title=\"低门槛、高性能，和分区高级玩法的redis-cli SDK；\"></a>低门槛、高性能，和分区高级玩法的redis-cli SDK；</h2><p>我呢，就照着官方文档写一些示例，大佬就别看了，只是集成方案与学习笔记。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/</a></li>\n</ul>","more":"<p>在学习之前，看到README.md上的内容不免陷入沉思，好多关键字我都不懂是什么意思，所以还是从理论入手，搜索资料，整合出入门资料，往后再讲在asp .net core中集成与使用的示例。</p>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><ul>\n<li>Redis哨兵（Sentinel）模式 <a href=\"https://www.jianshu.com/p/06ab9daf921d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/06ab9daf921d</a> </li>\n</ul>\n<p><strong>先在本地搭建好主从redis服务，我本地win10，已安装好一个redis,部署在6379端口上、先把这些文档看看。</strong></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>windows安装绿色版Redis </p>\n<ul>\n<li><a href=\"https://blog.csdn.net/ml863606/article/details/87456239\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ml863606/article/details/87456239</a></li>\n</ul>\n<h2 id=\"主从配置-Windows版\"><a href=\"#主从配置-Windows版\" class=\"headerlink\" title=\"主从配置(Windows版)\"></a>主从配置(Windows版)</h2><p>本地Redis主从配置(Windows版)，从github上下载zip压缩包，解压后，复制二份文件夹至某一目录，配置二个从Redis服务器，可参考如下</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/cang12138/p/9132288.html#_label0\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cang12138/p/9132288.html#_label0</a></li>\n</ul>\n<h3 id=\"简单教程\"><a href=\"#简单教程\" class=\"headerlink\" title=\"简单教程\"></a>简单教程</h3><p>D:\\services\\Redis-x64-3.2.100目录 其实有 “Windows Service Documentation.docx ”，上面说的很清楚，这里只说最简单的配置多个服务的方式，使用文本编辑器打开redis.windows-service.conf文件，可修改启用端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">port 6380</span><br></pre></td></tr></table></figure>\n\n<p>cmd 到D:\\services\\Redis-x64-3.2.100-1，一定要管理员运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#安装服务</span><br><span class=\"line\">redis-server --service-install redis.windows-service.conf  --service-name redis6380</span><br><span class=\"line\">#开启服务</span><br><span class=\"line\">net start redis6380</span><br></pre></td></tr></table></figure>\n\n<p>如果无法开启服务redis6380，就删除此服务，再次执行，见下方参考命令 删除服务。</p>\n<p>本地安装成了三个reids,他们运行在不同的端口，三个哨兵。<br>服务类型 | IP|port<br>—|—|—<br>master Redis服务|localhost|6379<br>slave Redis服务器 |localhost|6380<br>slave Redis服务器 |localhost|6381<br>sentinel|localhost|26381<br>sentinel|localhost|26379<br>sentinel|localhost|26380</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">slaveof $host $port 作用是设置主从库，在redis-cli命令中执行，即可将此redis设置为host下port端口的从库，$开头的为参数 </span><br><span class=\"line\"></span><br><span class=\"line\">slaveof no one #取消同步</span><br><span class=\"line\"></span><br><span class=\"line\">也可在windows-server.conf文件中配置</span><br></pre></td></tr></table></figure>\n\n<p>6379那个redis是使用msi安装包安装的，所以redis-cli是可以在任意文件夹位置执行的，如未配置，请在D:\\service\\Redis-x64-3.2.100-1目录下执行这些命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">ctrl+c退出命令行状态。</span><br><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6381</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>另开一个终端 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Computer&gt;redis-cli -p 6379</span><br><span class=\"line\">127.0.0.1:6379&gt; set a 1233</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;1233&quot;</span><br></pre></td></tr></table></figure>\n\n<p>原本的终端得到a的值是”1233”，已经被同步过来了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; get a</span><br><span class=\"line\">&quot;1233&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考命令\"><a href=\"#参考命令\" class=\"headerlink\" title=\"参考命令\"></a>参考命令</h3><p>右击电脑 -&gt;管理-&gt;服务和应用程序 -&gt;服务-&gt;可选择服务名进行管理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#开启服务</span><br><span class=\"line\">net start redis6380  </span><br><span class=\"line\">#关闭服务</span><br><span class=\"line\">net stop redis6380  </span><br><span class=\"line\">#删除服务：当服务不正常时可根据名称删除</span><br><span class=\"line\">sc delete redis6380</span><br></pre></td></tr></table></figure>\n\n<p>以管理员权限cmd到目录D:\\services\\Redis-x64-3.2.100中，可使用如下命令。</p>\n<ul>\n<li><p>Installing the Service：–service-install</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-install redis.windows-service.conf --loglevel verbose</span><br><span class=\"line\">redis-server --service-install redis.windows.conf  --service-name redis6380</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Uninstalling the Service：–service-uninstall</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Starting the Service:–service-start</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Stopping the Service:–service-stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Naming the Service: –service-name name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --service-install --service-name redisService1 --port 10001</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set port :–port 10001</p>\n</li>\n</ul>\n<p>查看redis 版本、redis-cli版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS D:\\service\\Redis-x64-3.2.100-1&gt; redis-server -v</span><br><span class=\"line\">Redis server v=3.2.100 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=dd26f1f93c5130ee</span><br><span class=\"line\">PS D:\\service\\Redis-x64-3.2.100-1&gt; redis-cli -v</span><br><span class=\"line\">redis-cli 3.2.100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哨兵配置\"><a href=\"#哨兵配置\" class=\"headerlink\" title=\"哨兵配置\"></a>哨兵配置</h3><p>哨兵模式是Redis提供的一个命令，独立进程，独立运行，哨兵的作用是为了实现对redis服务器状态的监控，保证服务的可用性，实现故障切换，无须人为干预。</p>\n<p>1.配置项</p>\n<p>这个是通过 .msi文件安装的redis，与.zip解压后启动的服务无区别。打开E:\\Program Files\\Redis\\sentinel.conf，没有就创建此文件，另外二个redis，只用改port对应的值，改成26739、26740，配置内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#当前Sentinel服务运行的端口</span><br><span class=\"line\">port 26381</span><br><span class=\"line\"># 3s内mymaster无响应，则认为mymaster宕机了</span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\">#如果10秒后,mysater仍没启动过来，则启动failover</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 3000</span><br><span class=\"line\"># 执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步</span><br><span class=\"line\">sentinel failover-timeout mymaster 10000</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，127.0.0.1代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</strong></p>\n<ol start=\"2\">\n<li>启动哨兵</li>\n</ol>\n<p>前提redis服务已启动。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; .\\redis-server.exe .\\sentinel.conf --sentinel</span><br><span class=\"line\">                _._                                                  </span><br><span class=\"line\">           _.-``__ <span class=\"string\">''</span>-._                                             </span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">''</span>-._           Redis <span class=\"number\">3.2</span>.<span class=\"number\">100</span> (<span class=\"number\">00000000</span>/<span class=\"number\">0</span>) <span class=\"number\">64</span> bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">''</span>-._                                   </span><br><span class=\"line\"> (    <span class=\"string\">'      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class=\"string\">'|     Port: 26381</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-'</span>    |     PID: <span class=\"number\">22452</span></span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">'    _.-'</span>_.-<span class=\"string\">'|                                  </span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-'</span>_.-<span class=\"string\">'    |           http://redis.io        </span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-'</span>_.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">'    _.-'</span>_.-<span class=\"string\">'|                                  </span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-'</span>_.-<span class=\"string\">'    |                                  </span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-'</span>_.-<span class=\"string\">'    _.-'</span>                                   </span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">'    _.-'</span>                                       </span><br><span class=\"line\">          `-._        _.-<span class=\"string\">'                                           </span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-'</span>                                               </span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.111</span> <span class=\"comment\"># Sentinel ID is fc076362c0a5cc71d3c72f71c00a15b2726b2bf8</span></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.111</span> <span class=\"comment\"># +monitor master mymaster 127.0.0.1 6379 quorum 2</span></span><br><span class=\"line\">[<span class=\"number\">22452</span>] <span class=\"number\">07</span> Jul <span class=\"number\">11</span>:<span class=\"number\">47</span>:<span class=\"number\">00.114</span> * +slave slave <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6381</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> <span class=\"number\">6381</span> @ mymaster <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>因为windows下不支持守护进程(一种可在后台运行的程序)，这样命令行一关闭，哨兵也停止了（Windows does not support daemonize. Start Redis as service），在windows下叫服务（service）,是可以后台一直运行的。</p>\n<ol start=\"3\">\n<li>在windows下以服务的形式启动哨兵</li>\n</ol>\n<p>管理员运行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">E:\\Program Files\\Redis&gt;redis-server --service-install --service-name sentinel sentinel.conf --sentinel</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\service\\Redis-x64-<span class=\"number\">3.2</span>.<span class=\"number\">100</span>-<span class=\"number\">1</span>&gt;redis-server --service-install --service-name sentinel-<span class=\"number\">1</span> sentinel.conf --sentinel</span><br><span class=\"line\">[<span class=\"number\">20700</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">21.297</span> <span class=\"comment\"># Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-1\" \"D:\\service\\Redis-x64-3.2.100-1\\\"</span></span><br><span class=\"line\">[<span class=\"number\">20700</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">21.300</span> <span class=\"comment\"># Redis successfully installed as a service.</span></span><br><span class=\"line\"></span><br><span class=\"line\">D:\\service\\Redis-x64-<span class=\"number\">3.2</span>.<span class=\"number\">100</span>-<span class=\"number\">2</span>&gt;redis-server --service-install --service-name sentinel-<span class=\"number\">2</span> sentinel.conf --sentinel</span><br><span class=\"line\">[<span class=\"number\">15772</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">33.942</span> <span class=\"comment\"># Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\service\\Redis-x64-3.2.100-2\" \"D:\\service\\Redis-x64-3.2.100-2\\\"</span></span><br><span class=\"line\">[<span class=\"number\">15772</span>] <span class=\"number\">07</span> Jul <span class=\"number\">12</span>:<span class=\"number\">01</span>:<span class=\"number\">33.944</span> <span class=\"comment\"># Redis successfully installed as a service.</span></span><br></pre></td></tr></table></figure>\n\n<p>此时D:\\service\\Redis-x64-3.2.100-1\\sentinel.conf，哨兵运行在26379端口 ,生成哨兵ID（Sentinel ID）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentinel myid a2e75eedaf161357fe03df490a14b4158ad3ba88</span><br></pre></td></tr></table></figure>\n\n<p>也生成了如下内容，能监控到从slave服务6380的redis、slave6381的redis,也能监控到其他的哨兵，分别运行在26380、26381端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Generated by CONFIG REWRITE</span><br><span class=\"line\">dir &quot;D:\\\\service\\\\Redis-x64-3.2.100-1&quot;</span><br><span class=\"line\">sentinel config-epoch mymaster 0</span><br><span class=\"line\">sentinel leader-epoch mymaster 0</span><br><span class=\"line\">sentinel known-slave mymaster 127.0.0.1 6380</span><br><span class=\"line\">sentinel known-slave mymaster 127.0.0.1 6381</span><br><span class=\"line\">sentinel known-sentinel mymaster 127.0.0.1 26380 a2e75eedaf161357fe03df490a14b4158ad3ba88</span><br><span class=\"line\">sentinel known-sentinel mymaster 127.0.0.1 26381 fc076362c0a5cc71d3c72f71c00a15b2726b2bf8</span><br><span class=\"line\">sentinel current-epoch 0</span><br></pre></td></tr></table></figure>\n\n<p>在主master redis中查看redis当前信息</p>\n<figure class=\"highlight ps\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:<span class=\"number\">2</span></span><br><span class=\"line\">slave0:ip=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>,port=<span class=\"number\">6381</span>,state=online,offset=<span class=\"number\">141627</span>,lag=<span class=\"number\">1</span></span><br><span class=\"line\">slave1:ip=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>,port=<span class=\"number\">6380</span>,state=online,offset=<span class=\"number\">141627</span>,lag=<span class=\"number\">0</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>ctrl+c退出，查看redis6380信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:slave</span><br><span class=\"line\">master_host:127.0.0.1</span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:1</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:161451</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高可用测试\"><a href=\"#高可用测试\" class=\"headerlink\" title=\"高可用测试\"></a>高可用测试</h3><h4 id=\"1-主服务器Master-挂掉\"><a href=\"#1-主服务器Master-挂掉\" class=\"headerlink\" title=\"1.主服务器Master 挂掉\"></a>1.主服务器Master 挂掉</h4><p>停止 6379服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt;redis-cli -p 6379</span><br><span class=\"line\">127.0.0.1:6379&gt; shutdown</span><br><span class=\"line\">not connected&gt; </span><br><span class=\"line\">或</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;net stop redis</span><br></pre></td></tr></table></figure>\n\n<p>6379中sentinel_log.log,可见，当6379redis服务挂 了后，此日志表明，redis在failover后错误重试，switch-master切换为6380</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[240] 07 Jul 12:16:15.015 # +sdown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +odown master mymaster 127.0.0.1 6379 #quorum 2/2</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +new-epoch 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.086 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.088 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.090 # a2e75eedaf161357fe03df490a14b4158ad3ba88 voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.091 # 14c6428bae2afc1d92b5159b0788dbba753ee85b voted for 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[240] 07 Jul 12:16:15.188 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.188 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.255 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.255 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.338 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.718 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.718 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:15.800 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.217 # -odown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.757 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.758 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.834 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[240] 07 Jul 12:16:16.834 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:16.835 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[240] 07 Jul 12:16:19.853 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br></pre></td></tr></table></figure>\n\n<p>6380redis 服务 日志,当6379服务挂了后，6380成为主节点，其他节点(6379、6381)成为从节点，此时打开D:\\service\\Redis-x64-3.2.100-1\\redis.windows-service.conf，之前配置的slaveof 127.0.0.1 6379已经没有了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[9404] 07 Jul 12:16:15.037 # +sdown master mymaster 127.0.0.1 6379</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.089 # +new-epoch 1</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.090 # +vote-for-leader 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 1</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.104 # +odown master mymaster 127.0.0.1 6379 #quorum 3/2</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.104 # Next failover delay: I will not start a failover before Sun Jul 07 12:16:35 2019</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.801 # +config-update-from sentinel 207bd9abfe9283e32b6e0de3635e126bfdbba3b4 127.0.0.1 26381 @ mymaster 127.0.0.1 6379</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.801 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:15.802 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class=\"line\">[9404] 07 Jul 12:16:18.812 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br></pre></td></tr></table></figure>\n\n<p>此时查看 6380的信息,可以看到此时只有一个slave在线,其配置为127.0.0.1的6381端口，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6381,state=online,offset=119281,lag=1</span><br><span class=\"line\">master_repl_offset:119547</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6379服务再次启动\"><a href=\"#2-6379服务再次启动\" class=\"headerlink\" title=\"2.6379服务再次启动\"></a>2.6379服务再次启动</h4><p>当6379的服务启动后，6379的服务将成为6380的从服务器slave，再次通过 redis-cli -p 端口， 输入 info replication查看对应服务的节点信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-server --service-start</span><br><span class=\"line\">或</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;net start redis</span><br><span class=\"line\"></span><br><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:2</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6379,state=online,offset=339593,lag=1</span><br><span class=\"line\">slave1:ip=127.0.0.1,port=6381,state=online,offset=339593,lag=1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-slave-6381关闭\"><a href=\"#3-slave-6381关闭\" class=\"headerlink\" title=\"3.slave 6381关闭\"></a>3.slave 6381关闭</h4><p>此时查看6380的info，可见此时只有一个从节点6379</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt;net stop redis6381</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\"></span><br><span class=\"line\">PS E:\\Program Files\\Redis&gt; redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1</span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6379,state=online,offset=329392,lag=1</span><br><span class=\"line\">master_repl_offset:329525</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3> <!--* Redis哨兵（Sentinel）模式 https://www.jianshu.com/p/06ab9daf921d -->\n <!--* windows安装绿色版Redis - https://blog.csdn.net/ml863606/article/details/87456239-->\n <!--* 主从配置(Windows版) https://www.cnblogs.com/cang12138/p/9132288.html#_label0-->\n <!--* csredis https://github.com/2881099/csredis-->\n<ul>\n<li>Cross-platform GUI management tool for Redis <a href=\"https://github.com/uglide/RedisDesktopManager\" target=\"_blank\" rel=\"noopener\">https://github.com/uglide/RedisDesktopManager</a></li>\n<li>Redis in Windows的3.x版本  <a href=\"https://github.com/MicrosoftArchive/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/MicrosoftArchive/redis</a></li>\n<li>Redis in Windows的4.x版本 <a href=\"https://github.com/tporadowski/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/tporadowski/redis</a></li>\n<li>Redis in linux <a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/antirez/redis</a></li>\n<li>Redis高可用集群-哨兵模式（Redis-Sentinel）搭建配置教程【Windows环境】 <a href=\"https://aflyun.blog.csdn.net/article/details/79430105\" target=\"_blank\" rel=\"noopener\">https://aflyun.blog.csdn.net/article/details/79430105</a></li>\n</ul>\n<h3 id=\"linux版Redis主从搭建\"><a href=\"#linux版Redis主从搭建\" class=\"headerlink\" title=\"linux版Redis主从搭建\"></a>linux版Redis主从搭建</h3><p>建议大家看这个文章，我一开始参考了其他的，写完windows版，才看到这个链接，关于<strong>深入剖析Redis系列</strong></p>\n<ul>\n<li><a href=\"https://juejin.im/post/5b76e732f265da4376203849\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b76e732f265da4376203849</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"csredis-in-asp.net core理论实战-主从配置、哨兵模式","path":"2019/07/06/re-start/csredis-in-asp-net-core-master-slaver/","eyeCatchImage":null,"excerpt":"<h1 id=\"csredis\"><a href=\"#csredis\" class=\"headerlink\" title=\"csredis\"></a>csredis</h1><ul>\n<li>GitHub  <a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n</ul>\n<p>看了github上的开源项目,上面真的只是单纯的使用文档，可能对于我这种人（菜鸟）就不太友好，</p>\n<p>我知道他对标的是ServiceStack.Redis， 一开始csredis只支持. net 版本，但原作者没有继续维护，作者使用 . net core重写后，逐渐演化的一个. net core 版本的redis 驱动，</p>\n<p>使用这个类库可以方便的地在 c#中访问redis数据库，官方介绍 </p>\n<h2 id=\"低门槛、高性能，和分区高级玩法的redis-cli-SDK；\"><a href=\"#低门槛、高性能，和分区高级玩法的redis-cli-SDK；\" class=\"headerlink\" title=\"低门槛、高性能，和分区高级玩法的redis-cli SDK；\"></a>低门槛、高性能，和分区高级玩法的redis-cli SDK；</h2><p>我呢，就照着官方文档写一些示例，大佬就别看了，只是集成方案与学习笔记。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnet-core-redis/</a></li>\n</ul>","date":"2019-07-06T13:09:07.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["Redis","ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"3.FreeSql在ASP.NTE Core WebApi中如何使用的教程","date":"2019-06-29T17:52:22.000Z","updated":"2019-07-01T14:22:22.000Z","_content":"\n## 文章概述\n主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。\n\n## FreeSql 简介\n国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。\n\n### 参考\n- FreeSql github [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql) \n\n- [关于.net core cli中如何使用dotnet new](https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22)\n- [使用 ASP.NET Core 创建 Web API](https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2)\n- [Swagger/OpenAPI 生成接口文档](https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2)\n- [Swagger GitHub (Swashbuckle.AspNetCore)](https://github.com/domaindrivendev/Swashbuckle.AspNetCore)\n- 项目源码 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql)\n- 项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。\n### 项目准备\n- Mysql 5.6\n- Visual Studio 2019或2017、Visual Studio code\n- .NET Core 2.2+\n- PowerShell\n- 懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful\n\n<!-- more -->\n\n创建一个webapi 的项目，起名为RESTful.FreeSql\n\n```PowerShell\nPS dotnetcore-examples\\asp.net-core-freesql> dotnet new webapi -n RESTful.FreeSql\nThe template \"ASP.NET Core Web API\" was created successfully.\nPS dotnetcore-examples\\asp.net-core-freesql> cd .\\RESTful.FreeSql\\\nPS dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql> dotnet run\n\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: https://localhost:5001\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: D:\\code\\github\\dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql\n```\n\n打开浏览器 https://localhost:5001 会出现404\n\n请打开这个地址 https://localhost:5001/api/values ，可看到如下内容。\n~~~\n[\"value1\",\"value2\"]\n~~~\n\n接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容\n\n- 官网文档 [http://freesql.net/doc](http://freesql.net/doc)\n## Install\n要先cd到RESTful.FreeSql目录中。\n~~~PowerShell\nPS \\asp.net-core-freesql\\RESTful.FreeSql> dotnet add package FreeSql\nPS \\asp.net-core-freesql\\RESTful.FreeSql> dotnet add package FreeSql.Provider.MySql\n~~~\n\n\n## code first\n- [关于CodeFirst，官方文档的介绍](https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md)\n\n代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。\n\n\n## db first \n数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。\n\n## 开始\n### 分析需求\n\n我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)\n\n#### Blog 表\n\n|字段名 | 字段类型| 说明|\n|---|---|---|\n|BlogId |int|博客id|\n|Title  |varchar(50)|博客标题|\n|Content  |varchar(500)|博客内容|\n|CreateTime  |DateTime|发布时间|\n\n#### Post 表\n\n|字段名 | 字段类型| 说明|\n|---|---|---|\n|PostId |int|评论id|\n|ReplyContent   |varchar(50)|标题|\n|BlogId    |int|博客id|\n|ReplyTime    |DateTime|回复时间|\n\n建一个Domain文件夹,用于存放数据库表中对应的实体类。\n### 关于\n\n#### 1. Column属性介绍，大家可以看[源码，解析](https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs)\n\n1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。\n```c#\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string Title { get; set; }\n    }\n```\n2). Column的命名空间在\n```c#\nusing FreeSql.DataAnnotations;\n```\n更多属性介绍\n|字段 | 备注|\n|---|---|\n|Name|数据库列名|\n|OldName|指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】|\n|DbType|数据库类型，如： varchar(255)|\n|IsPrimary|主键|\n|IsIdentity|自增标识|\n|IsNullable|是否可DBNull|\n|IsIgnore|忽略此列，不迁移、不插入|\n|IsVersion|设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）|\n|DbDefautValue|数据库默认值|\n|MapType|类型映射，比如：可将 enum 属性映射成 typeof(string)|\n|Uniques| 唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。|\n\n#### 2. Table 的使用：用于在类的上面指定这个表的属性\n\n```csharp\n[Table(Name = \"t_blog\")]\npublic class Blog {\n  //...\n}\n```\n更多属性介绍\n|字段 | 备注|\n|---|---|\n|Name|数据库表名|\n|OldName |指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】|\n|SelectFilter |查询过滤SQL，实现类似 a.IsDeleted = 1 功能|\n|DisableSyncStructure|禁用 CodeFirst 同步结构迁移|\n\n#### 3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\n\n#### Blog.cs\n~~~c#\nusing FreeSql.DataAnnotations;\nusing System;\n\nnamespace RESTful.FreeSql.Domain\n{\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string Title { get; set; }\n        [Column(DbType = \"varchar(500)\")]\n        public string Content { get; set; }\n        public DateTime CreateTime { get; set; }\n    }\n}\n~~~\n\n#### Post.cs\n~~~C#\n\nusing FreeSql.DataAnnotations;\nusing System;\n\nnamespace RESTful.FreeSql.Domain\n{\n    public class Post\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int PostId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string ReplyContent { get; set; }\n        public int BlogId { get; set; }\n        public DateTime ReplyTime { get; set; }\n        public Blog Blog { get; set; }\n    }\n}\n~~~\n\n\n\n#### Startup.cs\n非全部代码，这里注意点：要先在mysql中创建数据库**FreeSql_Blog**，否则一直提示**主库xxxxx**,官网未找到相关描述。\n\n这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。\n~~~c#\nnamespace RESTful.FreeSql\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Fsql = new FreeSqlBuilder()\n                        .UseConnectionString(DataType.MySql, @\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10\")\n                        .UseAutoSyncStructure(true)\n                        .Build();\n        }\n\n        public IFreeSql Fsql { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddSingleton<IFreeSql>(Fsql);\n\n        }\n    }\n}\n~~~\n\n#### BlogController\n在controllers文件夹新建一个控制器BlogController\n\n~~~c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing FreeSql;\nusing Microsoft.AspNetCore.Mvc;\nusing RESTful.FreeSql.Domain;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class BlogController : ControllerBase\n    {\n        // GET api/Blog\n\n        IFreeSql _fsql;\n        public BlogController(IFreeSql fsql)\n        {\n            _fsql = fsql;\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<Blog>> Get()\n        {\n            List<Blog> blogs = _fsql.Select<Blog>().OrderByDescending(r => r.CreateTime).ToList();\n\n            return blogs;\n        }\n\n        // GET api/blog/5\n        [HttpGet(\"{id}\")]\n        public ActionResult<Blog> Get(int id)\n        {\n            return _fsql.Select<Blog>(id).ToOne();\n        }\n\n\n        // DELETE api/blog/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n            _fsql.Delete<Blog>(new { BlogId = id }).ExecuteAffrows();\n        }\n    }\n}\n~~~\n\n重新运行，打开地址 http://localhost:5001/api/blog 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。\n\n手动向blog表中加一些数据，然后再次请求 \n- http://localhost:5001/api/blog， 可看到相应的数据。\n- http://localhost:5001/api/blog/1  可得到单个数据。\n\n\n#### 自动同步实体结构【开发环境必备】\n此功能默认为开启状态，发布正式环境后，请修改此设置\n~~~\nFsql = new FreeSqlBuilder()\n          .UseConnectionString(DataType.MySql, @\"连接字符串\")\n          .UseAutoSyncStructure(true)\n          .Build();\n                      \n//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改\n\n// 也可使用此方法指定是否自动同步结构。                  \nFsql.CodeFirst.IsAutoSyncStructure = true;\n~~~\n\n","source":"_posts/re-start/FreeSql-asp.net-core-how-to-use.md","raw":"---\ntitle: 3.FreeSql在ASP.NTE Core WebApi中如何使用的教程\ndate: 2019-6-30 01:52:22\nupdated: 2019-7-1 22:22:22\n# top: 近期更新\ntags:\n- FreeSql\ncategory:\n- .NET Core\n---\n\n## 文章概述\n主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。\n\n## FreeSql 简介\n国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。\n\n### 参考\n- FreeSql github [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql) \n\n- [关于.net core cli中如何使用dotnet new](https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22)\n- [使用 ASP.NET Core 创建 Web API](https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2)\n- [Swagger/OpenAPI 生成接口文档](https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2)\n- [Swagger GitHub (Swashbuckle.AspNetCore)](https://github.com/domaindrivendev/Swashbuckle.AspNetCore)\n- 项目源码 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql)\n- 项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。\n### 项目准备\n- Mysql 5.6\n- Visual Studio 2019或2017、Visual Studio code\n- .NET Core 2.2+\n- PowerShell\n- 懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful\n\n<!-- more -->\n\n创建一个webapi 的项目，起名为RESTful.FreeSql\n\n```PowerShell\nPS dotnetcore-examples\\asp.net-core-freesql> dotnet new webapi -n RESTful.FreeSql\nThe template \"ASP.NET Core Web API\" was created successfully.\nPS dotnetcore-examples\\asp.net-core-freesql> cd .\\RESTful.FreeSql\\\nPS dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql> dotnet run\n\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: https://localhost:5001\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: D:\\code\\github\\dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql\n```\n\n打开浏览器 https://localhost:5001 会出现404\n\n请打开这个地址 https://localhost:5001/api/values ，可看到如下内容。\n~~~\n[\"value1\",\"value2\"]\n~~~\n\n接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容\n\n- 官网文档 [http://freesql.net/doc](http://freesql.net/doc)\n## Install\n要先cd到RESTful.FreeSql目录中。\n~~~PowerShell\nPS \\asp.net-core-freesql\\RESTful.FreeSql> dotnet add package FreeSql\nPS \\asp.net-core-freesql\\RESTful.FreeSql> dotnet add package FreeSql.Provider.MySql\n~~~\n\n\n## code first\n- [关于CodeFirst，官方文档的介绍](https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md)\n\n代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。\n\n\n## db first \n数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。\n\n## 开始\n### 分析需求\n\n我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)\n\n#### Blog 表\n\n|字段名 | 字段类型| 说明|\n|---|---|---|\n|BlogId |int|博客id|\n|Title  |varchar(50)|博客标题|\n|Content  |varchar(500)|博客内容|\n|CreateTime  |DateTime|发布时间|\n\n#### Post 表\n\n|字段名 | 字段类型| 说明|\n|---|---|---|\n|PostId |int|评论id|\n|ReplyContent   |varchar(50)|标题|\n|BlogId    |int|博客id|\n|ReplyTime    |DateTime|回复时间|\n\n建一个Domain文件夹,用于存放数据库表中对应的实体类。\n### 关于\n\n#### 1. Column属性介绍，大家可以看[源码，解析](https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs)\n\n1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。\n```c#\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string Title { get; set; }\n    }\n```\n2). Column的命名空间在\n```c#\nusing FreeSql.DataAnnotations;\n```\n更多属性介绍\n|字段 | 备注|\n|---|---|\n|Name|数据库列名|\n|OldName|指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】|\n|DbType|数据库类型，如： varchar(255)|\n|IsPrimary|主键|\n|IsIdentity|自增标识|\n|IsNullable|是否可DBNull|\n|IsIgnore|忽略此列，不迁移、不插入|\n|IsVersion|设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）|\n|DbDefautValue|数据库默认值|\n|MapType|类型映射，比如：可将 enum 属性映射成 typeof(string)|\n|Uniques| 唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。|\n\n#### 2. Table 的使用：用于在类的上面指定这个表的属性\n\n```csharp\n[Table(Name = \"t_blog\")]\npublic class Blog {\n  //...\n}\n```\n更多属性介绍\n|字段 | 备注|\n|---|---|\n|Name|数据库表名|\n|OldName |指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】|\n|SelectFilter |查询过滤SQL，实现类似 a.IsDeleted = 1 功能|\n|DisableSyncStructure|禁用 CodeFirst 同步结构迁移|\n\n#### 3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\n\n#### Blog.cs\n~~~c#\nusing FreeSql.DataAnnotations;\nusing System;\n\nnamespace RESTful.FreeSql.Domain\n{\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string Title { get; set; }\n        [Column(DbType = \"varchar(500)\")]\n        public string Content { get; set; }\n        public DateTime CreateTime { get; set; }\n    }\n}\n~~~\n\n#### Post.cs\n~~~C#\n\nusing FreeSql.DataAnnotations;\nusing System;\n\nnamespace RESTful.FreeSql.Domain\n{\n    public class Post\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int PostId { get; set; }\n        [Column(DbType = \"varchar(50)\")]\n        public string ReplyContent { get; set; }\n        public int BlogId { get; set; }\n        public DateTime ReplyTime { get; set; }\n        public Blog Blog { get; set; }\n    }\n}\n~~~\n\n\n\n#### Startup.cs\n非全部代码，这里注意点：要先在mysql中创建数据库**FreeSql_Blog**，否则一直提示**主库xxxxx**,官网未找到相关描述。\n\n这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。\n~~~c#\nnamespace RESTful.FreeSql\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Fsql = new FreeSqlBuilder()\n                        .UseConnectionString(DataType.MySql, @\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10\")\n                        .UseAutoSyncStructure(true)\n                        .Build();\n        }\n\n        public IFreeSql Fsql { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddSingleton<IFreeSql>(Fsql);\n\n        }\n    }\n}\n~~~\n\n#### BlogController\n在controllers文件夹新建一个控制器BlogController\n\n~~~c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing FreeSql;\nusing Microsoft.AspNetCore.Mvc;\nusing RESTful.FreeSql.Domain;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class BlogController : ControllerBase\n    {\n        // GET api/Blog\n\n        IFreeSql _fsql;\n        public BlogController(IFreeSql fsql)\n        {\n            _fsql = fsql;\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<Blog>> Get()\n        {\n            List<Blog> blogs = _fsql.Select<Blog>().OrderByDescending(r => r.CreateTime).ToList();\n\n            return blogs;\n        }\n\n        // GET api/blog/5\n        [HttpGet(\"{id}\")]\n        public ActionResult<Blog> Get(int id)\n        {\n            return _fsql.Select<Blog>(id).ToOne();\n        }\n\n\n        // DELETE api/blog/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n            _fsql.Delete<Blog>(new { BlogId = id }).ExecuteAffrows();\n        }\n    }\n}\n~~~\n\n重新运行，打开地址 http://localhost:5001/api/blog 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。\n\n手动向blog表中加一些数据，然后再次请求 \n- http://localhost:5001/api/blog， 可看到相应的数据。\n- http://localhost:5001/api/blog/1  可得到单个数据。\n\n\n#### 自动同步实体结构【开发环境必备】\n此功能默认为开启状态，发布正式环境后，请修改此设置\n~~~\nFsql = new FreeSqlBuilder()\n          .UseConnectionString(DataType.MySql, @\"连接字符串\")\n          .UseAutoSyncStructure(true)\n          .Build();\n                      \n//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改\n\n// 也可使用此方法指定是否自动同步结构。                  \nFsql.CodeFirst.IsAutoSyncStructure = true;\n~~~\n\n","slug":"re-start/FreeSql-asp.net-core-how-to-use","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yq1005km0twe6w948pf","content":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。</p>\n<h2 id=\"FreeSql-简介\"><a href=\"#FreeSql-简介\" class=\"headerlink\" title=\"FreeSql 简介\"></a>FreeSql 简介</h2><p>国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p>FreeSql github <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a> </p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22\" target=\"_blank\" rel=\"noopener\">关于.net core cli中如何使用dotnet new</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">使用 ASP.NET Core 创建 Web API</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">Swagger/OpenAPI 生成接口文档</a></p>\n</li>\n<li><p><a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener\">Swagger GitHub (Swashbuckle.AspNetCore)</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3></li>\n<li><p>Mysql 5.6</p>\n</li>\n<li><p>Visual Studio 2019或2017、Visual Studio code</p>\n</li>\n<li><p>.NET Core 2.2+</p>\n</li>\n<li><p>PowerShell</p>\n</li>\n<li><p>懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>创建一个webapi 的项目，起名为RESTful.FreeSql</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql&gt; dotnet new webapi -n RESTful.FreeSql</span><br><span class=\"line\">The template <span class=\"string\">\"ASP.NET Core Web API\"</span> was created successfully.</span><br><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql&gt; cd .\\RESTful.FreeSql\\</span><br><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet run</span><br><span class=\"line\"></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Now listening on: https://localhost:<span class=\"number\">5001</span></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Now listening on: http://localhost:<span class=\"number\">5000</span></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Hosting environment: Development</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Content root path: D:\\code\\github\\dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器 <a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a> 会出现404</p>\n<p>请打开这个地址 <a href=\"https://localhost:5001/api/values\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/api/values</a> ，可看到如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&quot;value1&quot;,&quot;value2&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容</p>\n<ul>\n<li>官网文档 <a href=\"http://freesql.net/doc\" target=\"_blank\" rel=\"noopener\">http://freesql.net/doc</a><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2>要先cd到RESTful.FreeSql目录中。<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS \\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet add package FreeSql</span><br><span class=\"line\">PS \\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet add package FreeSql.Provider.MySql</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"code-first\"><a href=\"#code-first\" class=\"headerlink\" title=\"code first\"></a>code first</h2><ul>\n<li><a href=\"https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\" target=\"_blank\" rel=\"noopener\">关于CodeFirst，官方文档的介绍</a></li>\n</ul>\n<p>代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。</p>\n<h2 id=\"db-first\"><a href=\"#db-first\" class=\"headerlink\" title=\"db first\"></a>db first</h2><p>数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><p>我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)</p>\n<h4 id=\"Blog-表\"><a href=\"#Blog-表\" class=\"headerlink\" title=\"Blog 表\"></a>Blog 表</h4><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>varchar(50)</td>\n<td>博客标题</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>varchar(500)</td>\n<td>博客内容</td>\n</tr>\n<tr>\n<td>CreateTime</td>\n<td>DateTime</td>\n<td>发布时间</td>\n</tr>\n</tbody></table>\n<h4 id=\"Post-表\"><a href=\"#Post-表\" class=\"headerlink\" title=\"Post 表\"></a>Post 表</h4><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PostId</td>\n<td>int</td>\n<td>评论id</td>\n</tr>\n<tr>\n<td>ReplyContent</td>\n<td>varchar(50)</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>ReplyTime</td>\n<td>DateTime</td>\n<td>回复时间</td>\n</tr>\n</tbody></table>\n<p>建一个Domain文件夹,用于存放数据库表中对应的实体类。</p>\n<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><h4 id=\"1-Column属性介绍，大家可以看源码，解析\"><a href=\"#1-Column属性介绍，大家可以看源码，解析\" class=\"headerlink\" title=\"1. Column属性介绍，大家可以看源码，解析\"></a>1. Column属性介绍，大家可以看<a href=\"https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs\" target=\"_blank\" rel=\"noopener\">源码，解析</a></h4><p>1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2). Column的命名空间在</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br></pre></td></tr></table></figure>\n\n<p>更多属性介绍<br>|字段 | 备注|<br>|—|—|<br>|Name|数据库列名|<br>|OldName|指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】|<br>|DbType|数据库类型，如： varchar(255)|<br>|IsPrimary|主键|<br>|IsIdentity|自增标识|<br>|IsNullable|是否可DBNull|<br>|IsIgnore|忽略此列，不迁移、不插入|<br>|IsVersion|设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）|<br>|DbDefautValue|数据库默认值|<br>|MapType|类型映射，比如：可将 enum 属性映射成 typeof(string)|<br>|Uniques| 唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。|</p>\n<h4 id=\"2-Table-的使用：用于在类的上面指定这个表的属性\"><a href=\"#2-Table-的使用：用于在类的上面指定这个表的属性\" class=\"headerlink\" title=\"2. Table 的使用：用于在类的上面指定这个表的属性\"></a>2. Table 的使用：用于在类的上面指定这个表的属性</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Table(Name = <span class=\"meta-string\">\"t_blog\"</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多属性介绍<br>|字段 | 备注|<br>|—|—|<br>|Name|数据库表名|<br>|OldName |指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】|<br>|SelectFilter |查询过滤SQL，实现类似 a.IsDeleted = 1 功能|<br>|DisableSyncStructure|禁用 CodeFirst 同步结构迁移|</p>\n<h4 id=\"3-其他的还是看-https-github-com-2881099-FreeSql-blob-master-Docs-codefirst-md\"><a href=\"#3-其他的还是看-https-github-com-2881099-FreeSql-blob-master-Docs-codefirst-md\" class=\"headerlink\" title=\"3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\"></a>3. 其他的还是看 <a href=\"https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md</a></h4><h4 id=\"Blog-cs\"><a href=\"#Blog-cs\" class=\"headerlink\" title=\"Blog.cs\"></a>Blog.cs</h4><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Domain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(500)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Post-cs\"><a href=\"#Post-cs\" class=\"headerlink\" title=\"Post.cs\"></a>Post.cs</h4><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Domain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Post</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> PostId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ReplyContent &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime ReplyTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Blog Blog &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h4><p>非全部代码，这里注意点：要先在mysql中创建数据库<strong>FreeSql_Blog</strong>，否则一直提示<strong>主库xxxxx</strong>,官网未找到相关描述。</p>\n<p>这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Fsql = <span class=\"keyword\">new</span> FreeSqlBuilder()</span><br><span class=\"line\">                        .UseConnectionString(DataType.MySql, <span class=\"string\">@\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10\"</span>)</span><br><span class=\"line\">                        .UseAutoSyncStructure(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                        .Build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IFreeSql Fsql &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            services.AddSingleton&lt;IFreeSql&gt;(Fsql);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BlogController\"><a href=\"#BlogController\" class=\"headerlink\" title=\"BlogController\"></a>BlogController</h4><p>在controllers文件夹新建一个控制器BlogController</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> FreeSql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET api/Blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">        IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogController</span>(<span class=\"params\">IFreeSql fsql</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;Blog&gt;&gt; Get()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;Blog&gt; blogs = _fsql.Select&lt;Blog&gt;().OrderByDescending(r =&gt; r.CreateTime).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> blogs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;Blog&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Blog&gt;(id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql.Delete&lt;Blog&gt;(<span class=\"keyword\">new</span> &#123; BlogId = id &#125;).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新运行，打开地址 <a href=\"http://localhost:5001/api/blog\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog</a> 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。</p>\n<p>手动向blog表中加一些数据，然后再次请求 </p>\n<ul>\n<li><a href=\"http://localhost:5001/api/blog，\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog，</a> 可看到相应的数据。</li>\n<li><a href=\"http://localhost:5001/api/blog/1\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog/1</a>  可得到单个数据。</li>\n</ul>\n<h4 id=\"自动同步实体结构【开发环境必备】\"><a href=\"#自动同步实体结构【开发环境必备】\" class=\"headerlink\" title=\"自动同步实体结构【开发环境必备】\"></a>自动同步实体结构【开发环境必备】</h4><p>此功能默认为开启状态，发布正式环境后，请修改此设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Fsql = new FreeSqlBuilder()</span><br><span class=\"line\">          .UseConnectionString(DataType.MySql, @&quot;连接字符串&quot;)</span><br><span class=\"line\">          .UseAutoSyncStructure(true)</span><br><span class=\"line\">          .Build();</span><br><span class=\"line\">                      </span><br><span class=\"line\">//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可使用此方法指定是否自动同步结构。                  </span><br><span class=\"line\">Fsql.CodeFirst.IsAutoSyncStructure = true;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。</p>\n<h2 id=\"FreeSql-简介\"><a href=\"#FreeSql-简介\" class=\"headerlink\" title=\"FreeSql 简介\"></a>FreeSql 简介</h2><p>国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p>FreeSql github <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a> </p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22\" target=\"_blank\" rel=\"noopener\">关于.net core cli中如何使用dotnet new</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">使用 ASP.NET Core 创建 Web API</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">Swagger/OpenAPI 生成接口文档</a></p>\n</li>\n<li><p><a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener\">Swagger GitHub (Swashbuckle.AspNetCore)</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3></li>\n<li><p>Mysql 5.6</p>\n</li>\n<li><p>Visual Studio 2019或2017、Visual Studio code</p>\n</li>\n<li><p>.NET Core 2.2+</p>\n</li>\n<li><p>PowerShell</p>\n</li>\n<li><p>懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful</p>\n</li>\n</ul>","more":"<p>创建一个webapi 的项目，起名为RESTful.FreeSql</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql&gt; dotnet new webapi -n RESTful.FreeSql</span><br><span class=\"line\">The template <span class=\"string\">\"ASP.NET Core Web API\"</span> was created successfully.</span><br><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql&gt; cd .\\RESTful.FreeSql\\</span><br><span class=\"line\">PS dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet run</span><br><span class=\"line\"></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Now listening on: https://localhost:<span class=\"number\">5001</span></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Now listening on: http://localhost:<span class=\"number\">5000</span></span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Hosting environment: Development</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[<span class=\"number\">0</span>]</span><br><span class=\"line\">      Content root path: D:\\code\\github\\dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器 <a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a> 会出现404</p>\n<p>请打开这个地址 <a href=\"https://localhost:5001/api/values\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/api/values</a> ，可看到如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&quot;value1&quot;,&quot;value2&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容</p>\n<ul>\n<li>官网文档 <a href=\"http://freesql.net/doc\" target=\"_blank\" rel=\"noopener\">http://freesql.net/doc</a><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2>要先cd到RESTful.FreeSql目录中。<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS \\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet add package FreeSql</span><br><span class=\"line\">PS \\asp.net-core-freesql\\RESTful.FreeSql&gt; dotnet add package FreeSql.Provider.MySql</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"code-first\"><a href=\"#code-first\" class=\"headerlink\" title=\"code first\"></a>code first</h2><ul>\n<li><a href=\"https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\" target=\"_blank\" rel=\"noopener\">关于CodeFirst，官方文档的介绍</a></li>\n</ul>\n<p>代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。</p>\n<h2 id=\"db-first\"><a href=\"#db-first\" class=\"headerlink\" title=\"db first\"></a>db first</h2><p>数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><p>我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)</p>\n<h4 id=\"Blog-表\"><a href=\"#Blog-表\" class=\"headerlink\" title=\"Blog 表\"></a>Blog 表</h4><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>varchar(50)</td>\n<td>博客标题</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>varchar(500)</td>\n<td>博客内容</td>\n</tr>\n<tr>\n<td>CreateTime</td>\n<td>DateTime</td>\n<td>发布时间</td>\n</tr>\n</tbody></table>\n<h4 id=\"Post-表\"><a href=\"#Post-表\" class=\"headerlink\" title=\"Post 表\"></a>Post 表</h4><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PostId</td>\n<td>int</td>\n<td>评论id</td>\n</tr>\n<tr>\n<td>ReplyContent</td>\n<td>varchar(50)</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>ReplyTime</td>\n<td>DateTime</td>\n<td>回复时间</td>\n</tr>\n</tbody></table>\n<p>建一个Domain文件夹,用于存放数据库表中对应的实体类。</p>\n<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><h4 id=\"1-Column属性介绍，大家可以看源码，解析\"><a href=\"#1-Column属性介绍，大家可以看源码，解析\" class=\"headerlink\" title=\"1. Column属性介绍，大家可以看源码，解析\"></a>1. Column属性介绍，大家可以看<a href=\"https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs\" target=\"_blank\" rel=\"noopener\">源码，解析</a></h4><p>1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2). Column的命名空间在</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br></pre></td></tr></table></figure>\n\n<p>更多属性介绍<br>|字段 | 备注|<br>|—|—|<br>|Name|数据库列名|<br>|OldName|指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】|<br>|DbType|数据库类型，如： varchar(255)|<br>|IsPrimary|主键|<br>|IsIdentity|自增标识|<br>|IsNullable|是否可DBNull|<br>|IsIgnore|忽略此列，不迁移、不插入|<br>|IsVersion|设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）|<br>|DbDefautValue|数据库默认值|<br>|MapType|类型映射，比如：可将 enum 属性映射成 typeof(string)|<br>|Uniques| 唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。|</p>\n<h4 id=\"2-Table-的使用：用于在类的上面指定这个表的属性\"><a href=\"#2-Table-的使用：用于在类的上面指定这个表的属性\" class=\"headerlink\" title=\"2. Table 的使用：用于在类的上面指定这个表的属性\"></a>2. Table 的使用：用于在类的上面指定这个表的属性</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Table(Name = <span class=\"meta-string\">\"t_blog\"</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多属性介绍<br>|字段 | 备注|<br>|—|—|<br>|Name|数据库表名|<br>|OldName |指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】|<br>|SelectFilter |查询过滤SQL，实现类似 a.IsDeleted = 1 功能|<br>|DisableSyncStructure|禁用 CodeFirst 同步结构迁移|</p>\n<h4 id=\"3-其他的还是看-https-github-com-2881099-FreeSql-blob-master-Docs-codefirst-md\"><a href=\"#3-其他的还是看-https-github-com-2881099-FreeSql-blob-master-Docs-codefirst-md\" class=\"headerlink\" title=\"3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\"></a>3. 其他的还是看 <a href=\"https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md</a></h4><h4 id=\"Blog-cs\"><a href=\"#Blog-cs\" class=\"headerlink\" title=\"Blog.cs\"></a>Blog.cs</h4><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Domain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(500)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Post-cs\"><a href=\"#Post-cs\" class=\"headerlink\" title=\"Post.cs\"></a>Post.cs</h4><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> FreeSql.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Domain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Post</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> PostId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Column(DbType = <span class=\"meta-string\">\"varchar(50)\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ReplyContent &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime ReplyTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Blog Blog &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h4><p>非全部代码，这里注意点：要先在mysql中创建数据库<strong>FreeSql_Blog</strong>，否则一直提示<strong>主库xxxxx</strong>,官网未找到相关描述。</p>\n<p>这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Fsql = <span class=\"keyword\">new</span> FreeSqlBuilder()</span><br><span class=\"line\">                        .UseConnectionString(DataType.MySql, <span class=\"string\">@\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10\"</span>)</span><br><span class=\"line\">                        .UseAutoSyncStructure(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                        .Build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IFreeSql Fsql &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            services.AddSingleton&lt;IFreeSql&gt;(Fsql);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BlogController\"><a href=\"#BlogController\" class=\"headerlink\" title=\"BlogController\"></a>BlogController</h4><p>在controllers文件夹新建一个控制器BlogController</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> FreeSql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET api/Blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">        IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogController</span>(<span class=\"params\">IFreeSql fsql</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;Blog&gt;&gt; Get()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;Blog&gt; blogs = _fsql.Select&lt;Blog&gt;().OrderByDescending(r =&gt; r.CreateTime).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> blogs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;Blog&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Blog&gt;(id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql.Delete&lt;Blog&gt;(<span class=\"keyword\">new</span> &#123; BlogId = id &#125;).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新运行，打开地址 <a href=\"http://localhost:5001/api/blog\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog</a> 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。</p>\n<p>手动向blog表中加一些数据，然后再次请求 </p>\n<ul>\n<li><a href=\"http://localhost:5001/api/blog，\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog，</a> 可看到相应的数据。</li>\n<li><a href=\"http://localhost:5001/api/blog/1\" target=\"_blank\" rel=\"noopener\">http://localhost:5001/api/blog/1</a>  可得到单个数据。</li>\n</ul>\n<h4 id=\"自动同步实体结构【开发环境必备】\"><a href=\"#自动同步实体结构【开发环境必备】\" class=\"headerlink\" title=\"自动同步实体结构【开发环境必备】\"></a>自动同步实体结构【开发环境必备】</h4><p>此功能默认为开启状态，发布正式环境后，请修改此设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Fsql = new FreeSqlBuilder()</span><br><span class=\"line\">          .UseConnectionString(DataType.MySql, @&quot;连接字符串&quot;)</span><br><span class=\"line\">          .UseAutoSyncStructure(true)</span><br><span class=\"line\">          .Build();</span><br><span class=\"line\">                      </span><br><span class=\"line\">//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可使用此方法指定是否自动同步结构。                  </span><br><span class=\"line\">Fsql.CodeFirst.IsAutoSyncStructure = true;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Jul 01 2019 22:22:22 GMT+0800 (GMT+08:00)","title":"3.FreeSql在ASP.NTE Core WebApi中如何使用的教程","path":"2019/06/30/re-start/FreeSql-asp.net-core-how-to-use/","eyeCatchImage":null,"excerpt":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。</p>\n<h2 id=\"FreeSql-简介\"><a href=\"#FreeSql-简介\" class=\"headerlink\" title=\"FreeSql 简介\"></a>FreeSql 简介</h2><p>国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p>FreeSql github <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a> </p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22\" target=\"_blank\" rel=\"noopener\">关于.net core cli中如何使用dotnet new</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">使用 ASP.NET Core 创建 Web API</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener\">Swagger/OpenAPI 生成接口文档</a></p>\n</li>\n<li><p><a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener\">Swagger GitHub (Swashbuckle.AspNetCore)</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3></li>\n<li><p>Mysql 5.6</p>\n</li>\n<li><p>Visual Studio 2019或2017、Visual Studio code</p>\n</li>\n<li><p>.NET Core 2.2+</p>\n</li>\n<li><p>PowerShell</p>\n</li>\n<li><p>懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful</p>\n</li>\n</ul>","date":"2019-06-29T17:52:22.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["FreeSql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"使用RESTful、FreeSql构建简单的博客系统-集成AutoMapper","date":"2019-06-30T07:39:22.000Z","updated":"2019-07-01T14:22:22.000Z","_content":"\n## 文章概述\n本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。\n\n接上一篇 \n- [FreeSql在ASP.NTE Core WebApi中如何使用的教程](http://blog.igeekfan.cn/2019/06/30/Re-start/FreeSql-asp.net-core-how-to-use/)\n\n- 项目源码 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql)\n- 项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。\n\n<!-- more -->\n\n## Dto作用\n\n当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是\n\n创建一个博客\n~~~json\nPOST /api/blog\ndata:\n{\n  \"title\": \"string\",\n  \"content\": \"string\"\n}\n~~~\n修改一个博客内容\n~~~json\nPUT /api/blog\ndata:\n{\n  \"blogId\":\"int\",\n  \"title\": \"string\",\n  \"content\": \"string\"\n}\n~~~\n但一个blog 实体如下\n\n~~~c#\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public DateTime CreateTime { get; set; }\n        public virtual List<Post> Posts { get; set; }\n    }\n~~~\n\n如果我们以Blog作为controllers中的参数时\n\n~~~c#\n       // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] Blog blog)\n        {\n            blog.CreateTime=DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n~~~\n这时修改swagger显示的默认参数是\n~~~json\n{\n  \"blogId\": 0,\n  \"title\": \"string\",\n  \"content\": \"string\",\n  \"createTime\": \"2019-06-30T07:33:05.524Z\",\n  \"posts\": [\n    {\n      \"postId\": 0,\n      \"replyContent\": \"string\",\n      \"blogId\": 0,\n      \"replyTime\": \"2019-06-30T07:33:05.524Z\"\n    }\n  ]\n}\n~~~\n\n如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。\n\n所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。\n\n在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建\n\n### CreateBlogDto.cs\n\n```c#\nnamespace RESTful.FreeSql.Models.Blogs\n{\n    public class CreateBlogDto\n    {\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n    }\n}\n\n```\n### UpdateBlogDto.cs\n\n```c#\nnamespace RESTful.FreeSql.Models.Blogs\n{\n    public class UpdateBlogDto\n    {\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n    }\n}\n\n\n```\n有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。\n如\n```c#\n    CreateBlogDto createBlogDto = new CreateBlogDto()\n    {\n        Title = \"我是title\",\n        Content = \"我是content\"\n    };\n\n    Blog newBlog=new Blog()\n    {\n        Title = createBlogDto.Title,\n        Content = createBlogDto.Content\n    };\n```\n现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。\n\n## AutoMapper\n> 作用：A convention-based object-object mapper.\n\n我们是在ASP .NET Core下使用AutoMapper [官网介绍，如何依赖注入中使用](https://automapper.readthedocs.io/en/latest/Dependency-injection.html)\n\n### Setup\n先cd到dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql目录\n```PowerShell\nPS > dotnet add package AutoMapper\nPS > dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1\n```\n在StartUp.cs中的ConfigureServices配置如下\n```\n   public void ConfigureServices(IServiceCollection services)\n    {\n        // .... Ignore code before this\n        \n        //AddAutoMapper会去找继承Profile的类，这个只适用于继承Profile类在当前项目。\n        //services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n        //RESTful.Web.Core 字符串为项目名\n        //services.AddAutoMapper(Assembly.Load(\"RESTful.Web.Core\"));\n        //或某一个类所在程序集\n        services.AddAutoMapper(typeof(Blog).Assembly);\n\n        // .... Ignore code after this\n    }\n```\n\n### Adding Profiles\n\nAutoMapper/BlogProfile.cs\n```c#\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class BlogProfile : Profile\n    {\n        public BlogProfile() \n        {\n            CreateMap<CreateBlogDto, Blog>();\n            CreateMap<UpdateBlogDto, Blog>();\n        }\n    }\n}\n```\n\nAutoMapper/BlogProfile.cs\n```c#\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class PostProfile : Profile\n    {\n        public PostProfile()\n        {\n            CreateMap<CreatePostDto,Post>();\n        }\n    }\n}\n```\n\nModels/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类\n```c#\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Models.Posts\n{\n    public class SearchPostDto:PageDto\n    {\n        public int BlogId { get; set; }\n    }\n}\n\n```\n\nControlers/BlogController.cs文件中，注入IMapper,\n```c#\nusing AutoMapper;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class BlogController : ControllerBase\n    {\n        // GET api/Blog\n\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public BlogController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 博客列表页 \n        /// </summary>\n        /// <param name=\"pageDto\">分页参数</param>\n        /// <returns></returns>\n        [HttpGet]\n        public ActionResult<PagedResultDto<Blog>> Get([FromQuery]PageDto pageDto)\n        {\n            List<Blog> blogs = _fsql.Select<Blog>().OrderByDescending(r => r.CreateTime).Page(pageDto.PageNumber, pageDto.PageSize).ToList();\n            long count = _fsql.Select<Blog>().Count();\n            return new PagedResultDto<Blog>(count, blogs);\n        }\n\n        // GET api/blog/5\n        [HttpGet(\"{id}\")]\n        public ActionResult<Blog> Get(int id)\n        {\n            // eg.1 return _fsql.Select<Blog>().Where(a => a.Id == id).ToOne();\n            // eg.2\n            return _fsql.Select<Blog>(id).ToOne();\n        }\n\n        // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] CreateBlogDto createBlogDto)\n        {\n            Blog blog = _mapper.Map<Blog>(createBlogDto);\n            blog.CreateTime = DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n\n        // PUT api/blog\n        [HttpPut]\n        public void Put([FromBody] UpdateBlogDto updateBlogDto)\n        {\n\n            //eg.1 更新指定列\n            //_fsql.Update<Blog>(updateBlogDto.BlogId).Set(a => new Blog()\n            //{\n            //    Title = updateBlogDto.Title,\n            //    Content = updateBlogDto.Content\n            //}).ExecuteAffrows();\n\n            //eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。\n            //使用IgnoreColumns可忽略某一些列。\n\n            Blog blog = _mapper.Map<Blog>(updateBlogDto);\n            _fsql.Update<Blog>().SetSource(blog).IgnoreColumns(r => r.CreateTime).ExecuteAffrows();\n        }\n\n        // DELETE api/blog/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n            _fsql.Delete<Blog>(new { BlogId = id }).ExecuteAffrows();\n        }\n    }\n}\n```\n\nControlers/BlogController.cs文件中，注入IMapper,\n```c#\nusing FreeSql;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Posts;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PostController : ControllerBase\n    {\n        // GET: api/Post\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public PostController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 根据博客id、分页条件查询评论信息\n        /// </summary>\n        /// <param name=\"searchPostDto\"></param>\n        /// <returns></returns>\n        [HttpGet]\n        public PagedResultDto<Post> Get(SearchPostDto searchPostDto)\n        {\n            ISelect<Post> selectPost = _fsql\n                .Select<Post>()\n                .Where(r => r.BlogId == searchPostDto.BlogId);\n\n            List<Post> posts = selectPost.OrderByDescending(r => r.ReplyTime)\n                .Page(searchPostDto.PageNumber, searchPostDto.PageSize)\n                .ToList();\n\n            long total = selectPost.Count();\n\n            return new PagedResultDto<Post>(total, posts);\n        }\n\n        // GET: api/Post/5\n        [HttpGet(\"{id}\", Name = \"Get\")]\n        public Post Get(int id)\n        {\n            return _fsql.Select<Post>().Where(a => a.PostId == id).ToOne();\n        }\n\n        // POST: api/Post\n        [HttpPost]\n        public void Post([FromBody] CreatePostDto createPostDto)\n        {\n            Post post = _mapper.Map<Post>(createPostDto);\n            post.ReplyTime = DateTime.Now;\n            _fsql.Insert(post).ExecuteAffrows();\n        }\n\n\n        // DELETE: api/Post/\n        [HttpDelete(\"{id}\")]\n        public async Task DeleteAsync(int id)\n        {\n            await _fsql.Delete<Post>(new Post { PostId = id }).ExecuteAffrowsAsync();\n        }\n    }\n}\n\n```\n\n### 参考\n- 建议大家先看官网 [http://automapper.org/](http://automapper.org/)\n- 开源地址 [https://github.com/AutoMapper/AutoMapper](https://github.com/AutoMapper/AutoMapper)\n- Getting-started 文档 [https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper](https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper)\n","source":"_posts/re-start/FreeSql-sample-blog-RESTful.md","raw":"---\ntitle: 使用RESTful、FreeSql构建简单的博客系统-集成AutoMapper\ndate: 2019-6-30 15:39:22\nupdated: 2019-7-1 22:22:22\n# top: 近期更新\ntags:\n- FreeSql\ncategory:\n- .NET Core\n---\n\n## 文章概述\n本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。\n\n接上一篇 \n- [FreeSql在ASP.NTE Core WebApi中如何使用的教程](http://blog.igeekfan.cn/2019/06/30/Re-start/FreeSql-asp.net-core-how-to-use/)\n\n- 项目源码 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql)\n- 项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。\n\n<!-- more -->\n\n## Dto作用\n\n当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是\n\n创建一个博客\n~~~json\nPOST /api/blog\ndata:\n{\n  \"title\": \"string\",\n  \"content\": \"string\"\n}\n~~~\n修改一个博客内容\n~~~json\nPUT /api/blog\ndata:\n{\n  \"blogId\":\"int\",\n  \"title\": \"string\",\n  \"content\": \"string\"\n}\n~~~\n但一个blog 实体如下\n\n~~~c#\n    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public DateTime CreateTime { get; set; }\n        public virtual List<Post> Posts { get; set; }\n    }\n~~~\n\n如果我们以Blog作为controllers中的参数时\n\n~~~c#\n       // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] Blog blog)\n        {\n            blog.CreateTime=DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n~~~\n这时修改swagger显示的默认参数是\n~~~json\n{\n  \"blogId\": 0,\n  \"title\": \"string\",\n  \"content\": \"string\",\n  \"createTime\": \"2019-06-30T07:33:05.524Z\",\n  \"posts\": [\n    {\n      \"postId\": 0,\n      \"replyContent\": \"string\",\n      \"blogId\": 0,\n      \"replyTime\": \"2019-06-30T07:33:05.524Z\"\n    }\n  ]\n}\n~~~\n\n如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。\n\n所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。\n\n在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建\n\n### CreateBlogDto.cs\n\n```c#\nnamespace RESTful.FreeSql.Models.Blogs\n{\n    public class CreateBlogDto\n    {\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n    }\n}\n\n```\n### UpdateBlogDto.cs\n\n```c#\nnamespace RESTful.FreeSql.Models.Blogs\n{\n    public class UpdateBlogDto\n    {\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n    }\n}\n\n\n```\n有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。\n如\n```c#\n    CreateBlogDto createBlogDto = new CreateBlogDto()\n    {\n        Title = \"我是title\",\n        Content = \"我是content\"\n    };\n\n    Blog newBlog=new Blog()\n    {\n        Title = createBlogDto.Title,\n        Content = createBlogDto.Content\n    };\n```\n现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。\n\n## AutoMapper\n> 作用：A convention-based object-object mapper.\n\n我们是在ASP .NET Core下使用AutoMapper [官网介绍，如何依赖注入中使用](https://automapper.readthedocs.io/en/latest/Dependency-injection.html)\n\n### Setup\n先cd到dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql目录\n```PowerShell\nPS > dotnet add package AutoMapper\nPS > dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1\n```\n在StartUp.cs中的ConfigureServices配置如下\n```\n   public void ConfigureServices(IServiceCollection services)\n    {\n        // .... Ignore code before this\n        \n        //AddAutoMapper会去找继承Profile的类，这个只适用于继承Profile类在当前项目。\n        //services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n        //RESTful.Web.Core 字符串为项目名\n        //services.AddAutoMapper(Assembly.Load(\"RESTful.Web.Core\"));\n        //或某一个类所在程序集\n        services.AddAutoMapper(typeof(Blog).Assembly);\n\n        // .... Ignore code after this\n    }\n```\n\n### Adding Profiles\n\nAutoMapper/BlogProfile.cs\n```c#\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class BlogProfile : Profile\n    {\n        public BlogProfile() \n        {\n            CreateMap<CreateBlogDto, Blog>();\n            CreateMap<UpdateBlogDto, Blog>();\n        }\n    }\n}\n```\n\nAutoMapper/BlogProfile.cs\n```c#\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class PostProfile : Profile\n    {\n        public PostProfile()\n        {\n            CreateMap<CreatePostDto,Post>();\n        }\n    }\n}\n```\n\nModels/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类\n```c#\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Models.Posts\n{\n    public class SearchPostDto:PageDto\n    {\n        public int BlogId { get; set; }\n    }\n}\n\n```\n\nControlers/BlogController.cs文件中，注入IMapper,\n```c#\nusing AutoMapper;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class BlogController : ControllerBase\n    {\n        // GET api/Blog\n\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public BlogController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 博客列表页 \n        /// </summary>\n        /// <param name=\"pageDto\">分页参数</param>\n        /// <returns></returns>\n        [HttpGet]\n        public ActionResult<PagedResultDto<Blog>> Get([FromQuery]PageDto pageDto)\n        {\n            List<Blog> blogs = _fsql.Select<Blog>().OrderByDescending(r => r.CreateTime).Page(pageDto.PageNumber, pageDto.PageSize).ToList();\n            long count = _fsql.Select<Blog>().Count();\n            return new PagedResultDto<Blog>(count, blogs);\n        }\n\n        // GET api/blog/5\n        [HttpGet(\"{id}\")]\n        public ActionResult<Blog> Get(int id)\n        {\n            // eg.1 return _fsql.Select<Blog>().Where(a => a.Id == id).ToOne();\n            // eg.2\n            return _fsql.Select<Blog>(id).ToOne();\n        }\n\n        // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] CreateBlogDto createBlogDto)\n        {\n            Blog blog = _mapper.Map<Blog>(createBlogDto);\n            blog.CreateTime = DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n\n        // PUT api/blog\n        [HttpPut]\n        public void Put([FromBody] UpdateBlogDto updateBlogDto)\n        {\n\n            //eg.1 更新指定列\n            //_fsql.Update<Blog>(updateBlogDto.BlogId).Set(a => new Blog()\n            //{\n            //    Title = updateBlogDto.Title,\n            //    Content = updateBlogDto.Content\n            //}).ExecuteAffrows();\n\n            //eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。\n            //使用IgnoreColumns可忽略某一些列。\n\n            Blog blog = _mapper.Map<Blog>(updateBlogDto);\n            _fsql.Update<Blog>().SetSource(blog).IgnoreColumns(r => r.CreateTime).ExecuteAffrows();\n        }\n\n        // DELETE api/blog/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n            _fsql.Delete<Blog>(new { BlogId = id }).ExecuteAffrows();\n        }\n    }\n}\n```\n\nControlers/BlogController.cs文件中，注入IMapper,\n```c#\nusing FreeSql;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Posts;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PostController : ControllerBase\n    {\n        // GET: api/Post\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public PostController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 根据博客id、分页条件查询评论信息\n        /// </summary>\n        /// <param name=\"searchPostDto\"></param>\n        /// <returns></returns>\n        [HttpGet]\n        public PagedResultDto<Post> Get(SearchPostDto searchPostDto)\n        {\n            ISelect<Post> selectPost = _fsql\n                .Select<Post>()\n                .Where(r => r.BlogId == searchPostDto.BlogId);\n\n            List<Post> posts = selectPost.OrderByDescending(r => r.ReplyTime)\n                .Page(searchPostDto.PageNumber, searchPostDto.PageSize)\n                .ToList();\n\n            long total = selectPost.Count();\n\n            return new PagedResultDto<Post>(total, posts);\n        }\n\n        // GET: api/Post/5\n        [HttpGet(\"{id}\", Name = \"Get\")]\n        public Post Get(int id)\n        {\n            return _fsql.Select<Post>().Where(a => a.PostId == id).ToOne();\n        }\n\n        // POST: api/Post\n        [HttpPost]\n        public void Post([FromBody] CreatePostDto createPostDto)\n        {\n            Post post = _mapper.Map<Post>(createPostDto);\n            post.ReplyTime = DateTime.Now;\n            _fsql.Insert(post).ExecuteAffrows();\n        }\n\n\n        // DELETE: api/Post/\n        [HttpDelete(\"{id}\")]\n        public async Task DeleteAsync(int id)\n        {\n            await _fsql.Delete<Post>(new Post { PostId = id }).ExecuteAffrowsAsync();\n        }\n    }\n}\n\n```\n\n### 参考\n- 建议大家先看官网 [http://automapper.org/](http://automapper.org/)\n- 开源地址 [https://github.com/AutoMapper/AutoMapper](https://github.com/AutoMapper/AutoMapper)\n- Getting-started 文档 [https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper](https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper)\n","slug":"re-start/FreeSql-sample-blog-RESTful","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yqv005xm0twzza9946s","content":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>\n<p>接上一篇 </p>\n<ul>\n<li><p><a href=\"http://blog.igeekfan.cn/2019/06/30/Re-start/FreeSql-asp.net-core-how-to-use/\">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"Dto作用\"><a href=\"#Dto作用\" class=\"headerlink\" title=\"Dto作用\"></a>Dto作用</h2><p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>\n<p>创建一个博客</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /api/blog</span><br><span class=\"line\">data:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一个博客内容</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /api/blog</span><br><span class=\"line\">data:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"blogId\"</span>:<span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但一个blog 实体如下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;Post&gt; Posts &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们以Blog作为controllers中的参数时</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/blog</span></span><br><span class=\"line\"> [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] Blog blog</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     blog.CreateTime=DateTime.Now;</span><br><span class=\"line\">     _fsql.Insert&lt;Blog&gt;(blog).ExecuteAffrows();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时修改swagger显示的默认参数是</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"blogId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"createTime\"</span>: <span class=\"string\">\"2019-06-30T07:33:05.524Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"postId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"replyContent\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"blogId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"replyTime\"</span>: <span class=\"string\">\"2019-06-30T07:33:05.524Z\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>\n<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>\n<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>\n<h3 id=\"CreateBlogDto-cs\"><a href=\"#CreateBlogDto-cs\" class=\"headerlink\" title=\"CreateBlogDto.cs\"></a>CreateBlogDto.cs</h3><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Blogs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateBlogDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UpdateBlogDto-cs\"><a href=\"#UpdateBlogDto-cs\" class=\"headerlink\" title=\"UpdateBlogDto.cs\"></a>UpdateBlogDto.cs</h3><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Blogs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UpdateBlogDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。<br>如</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\">CreateBlogDto createBlogDto = <span class=\"keyword\">new</span> CreateBlogDto()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Title = <span class=\"string\">\"我是title\"</span>,</span><br><span class=\"line\">    Content = <span class=\"string\">\"我是content\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Blog newBlog=<span class=\"keyword\">new</span> Blog()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Title = createBlogDto.Title,</span><br><span class=\"line\">    Content = createBlogDto.Content</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>\n<h2 id=\"AutoMapper\"><a href=\"#AutoMapper\" class=\"headerlink\" title=\"AutoMapper\"></a>AutoMapper</h2><blockquote>\n<p>作用：A convention-based object-object mapper.</p>\n</blockquote>\n<p>我们是在ASP .NET Core下使用AutoMapper <a href=\"https://automapper.readthedocs.io/en/latest/Dependency-injection.html\" target=\"_blank\" rel=\"noopener\">官网介绍，如何依赖注入中使用</a></p>\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h3><p>先cd到dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql目录</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; dotnet add package AutoMapper</span><br><span class=\"line\">PS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version <span class=\"number\">6.1</span>.<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>在StartUp.cs中的ConfigureServices配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     // .... Ignore code before this</span><br><span class=\"line\">     </span><br><span class=\"line\">     //AddAutoMapper会去找继承Profile的类，这个只适用于继承Profile类在当前项目。</span><br><span class=\"line\">     //services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());</span><br><span class=\"line\"></span><br><span class=\"line\">     //RESTful.Web.Core 字符串为项目名</span><br><span class=\"line\">     //services.AddAutoMapper(Assembly.Load(&quot;RESTful.Web.Core&quot;));</span><br><span class=\"line\">     //或某一个类所在程序集</span><br><span class=\"line\">     services.AddAutoMapper(typeof(Blog).Assembly);</span><br><span class=\"line\"></span><br><span class=\"line\">     // .... Ignore code after this</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-Profiles\"><a href=\"#Adding-Profiles\" class=\"headerlink\" title=\"Adding Profiles\"></a>Adding Profiles</h3><p>AutoMapper/BlogProfile.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.AutoMapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogProfile</span> : <span class=\"title\">Profile</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogProfile</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            CreateMap&lt;CreateBlogDto, Blog&gt;();</span><br><span class=\"line\">            CreateMap&lt;UpdateBlogDto, Blog&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AutoMapper/BlogProfile.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.AutoMapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PostProfile</span> : <span class=\"title\">Profile</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostProfile</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            CreateMap&lt;CreatePostDto,Post&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Posts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchPostDto</span>:<span class=\"title\">PageDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET api/Blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMapper _mapper;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogController</span>(<span class=\"params\">IFreeSql fsql, IMapper mapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">            _mapper = mapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 博客列表页 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageDto\"&gt;</span>分页参数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ActionResult&lt;PagedResultDto&lt;Blog&gt;&gt; Get([FromQuery]PageDto pageDto)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;Blog&gt; blogs = _fsql.Select&lt;Blog&gt;().OrderByDescending(r =&gt; r.CreateTime).Page(pageDto.PageNumber, pageDto.PageSize).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> count = _fsql.Select&lt;Blog&gt;().Count();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PagedResultDto&lt;Blog&gt;(count, blogs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;Blog&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eg.1 return _fsql.Select&lt;Blog&gt;().Where(a =&gt; a.Id == id).ToOne();</span></span><br><span class=\"line\">            <span class=\"comment\">// eg.2</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Blog&gt;(id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// POST api/blog</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CreateBlogDto createBlogDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Blog blog = _mapper.Map&lt;Blog&gt;(createBlogDto);</span><br><span class=\"line\">            blog.CreateTime = DateTime.Now;</span><br><span class=\"line\">            _fsql.Insert&lt;Blog&gt;(blog).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/blog</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\">[FromBody] UpdateBlogDto updateBlogDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//eg.1 更新指定列</span></span><br><span class=\"line\">            <span class=\"comment\">//_fsql.Update&lt;Blog&gt;(updateBlogDto.BlogId).Set(a =&gt; new Blog()</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    Title = updateBlogDto.Title,</span></span><br><span class=\"line\">            <span class=\"comment\">//    Content = updateBlogDto.Content</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;).ExecuteAffrows();</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span></span><br><span class=\"line\">            <span class=\"comment\">//使用IgnoreColumns可忽略某一些列。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Blog blog = _mapper.Map&lt;Blog&gt;(updateBlogDto);</span><br><span class=\"line\">            _fsql.Update&lt;Blog&gt;().SetSource(blog).IgnoreColumns(r =&gt; r.CreateTime).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql.Delete&lt;Blog&gt;(<span class=\"keyword\">new</span> &#123; BlogId = id &#125;).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Posts;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PostController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET: api/Post</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMapper _mapper;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostController</span>(<span class=\"params\">IFreeSql fsql, IMapper mapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">            _mapper = mapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据博客id、分页条件查询评论信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"searchPostDto\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PagedResultDto&lt;Post&gt; <span class=\"title\">Get</span>(<span class=\"params\">SearchPostDto searchPostDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ISelect&lt;Post&gt; selectPost = _fsql</span><br><span class=\"line\">                .Select&lt;Post&gt;()</span><br><span class=\"line\">                .Where(r =&gt; r.BlogId == searchPostDto.BlogId);</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;Post&gt; posts = selectPost.OrderByDescending(r =&gt; r.ReplyTime)</span><br><span class=\"line\">                .Page(searchPostDto.PageNumber, searchPostDto.PageSize)</span><br><span class=\"line\">                .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> total = selectPost.Count();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PagedResultDto&lt;Post&gt;(total, posts);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET: api/Post/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>, Name = <span class=\"meta-string\">\"Get\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Post <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Post&gt;().Where(a =&gt; a.PostId == id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// POST: api/Post</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CreatePostDto createPostDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Post post = _mapper.Map&lt;Post&gt;(createPostDto);</span><br><span class=\"line\">            post.ReplyTime = DateTime.Now;</span><br><span class=\"line\">            _fsql.Insert(post).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE: api/Post/</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _fsql.Delete&lt;Post&gt;(<span class=\"keyword\">new</span> Post &#123; PostId = id &#125;).ExecuteAffrowsAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>建议大家先看官网 <a href=\"http://automapper.org/\" target=\"_blank\" rel=\"noopener\">http://automapper.org/</a></li>\n<li>开源地址 <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"noopener\">https://github.com/AutoMapper/AutoMapper</a></li>\n<li>Getting-started 文档 <a href=\"https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper\" target=\"_blank\" rel=\"noopener\">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>\n<p>接上一篇 </p>\n<ul>\n<li><p><a href=\"http://blog.igeekfan.cn/2019/06/30/Re-start/FreeSql-asp.net-core-how-to-use/\">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n</li>\n</ul>","more":"<h2 id=\"Dto作用\"><a href=\"#Dto作用\" class=\"headerlink\" title=\"Dto作用\"></a>Dto作用</h2><p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>\n<p>创建一个博客</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /api/blog</span><br><span class=\"line\">data:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一个博客内容</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /api/blog</span><br><span class=\"line\">data:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"blogId\"</span>:<span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但一个blog 实体如下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Blog</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Column(IsIdentity = true, IsPrimary = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;Post&gt; Posts &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们以Blog作为controllers中的参数时</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST api/blog</span></span><br><span class=\"line\"> [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] Blog blog</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     blog.CreateTime=DateTime.Now;</span><br><span class=\"line\">     _fsql.Insert&lt;Blog&gt;(blog).ExecuteAffrows();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时修改swagger显示的默认参数是</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"blogId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"createTime\"</span>: <span class=\"string\">\"2019-06-30T07:33:05.524Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"postId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"replyContent\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"blogId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"replyTime\"</span>: <span class=\"string\">\"2019-06-30T07:33:05.524Z\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>\n<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>\n<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>\n<h3 id=\"CreateBlogDto-cs\"><a href=\"#CreateBlogDto-cs\" class=\"headerlink\" title=\"CreateBlogDto.cs\"></a>CreateBlogDto.cs</h3><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Blogs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateBlogDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UpdateBlogDto-cs\"><a href=\"#UpdateBlogDto-cs\" class=\"headerlink\" title=\"UpdateBlogDto.cs\"></a>UpdateBlogDto.cs</h3><figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Blogs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UpdateBlogDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。<br>如</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\">CreateBlogDto createBlogDto = <span class=\"keyword\">new</span> CreateBlogDto()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Title = <span class=\"string\">\"我是title\"</span>,</span><br><span class=\"line\">    Content = <span class=\"string\">\"我是content\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Blog newBlog=<span class=\"keyword\">new</span> Blog()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Title = createBlogDto.Title,</span><br><span class=\"line\">    Content = createBlogDto.Content</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>\n<h2 id=\"AutoMapper\"><a href=\"#AutoMapper\" class=\"headerlink\" title=\"AutoMapper\"></a>AutoMapper</h2><blockquote>\n<p>作用：A convention-based object-object mapper.</p>\n</blockquote>\n<p>我们是在ASP .NET Core下使用AutoMapper <a href=\"https://automapper.readthedocs.io/en/latest/Dependency-injection.html\" target=\"_blank\" rel=\"noopener\">官网介绍，如何依赖注入中使用</a></p>\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h3><p>先cd到dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql目录</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; dotnet add package AutoMapper</span><br><span class=\"line\">PS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version <span class=\"number\">6.1</span>.<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>在StartUp.cs中的ConfigureServices配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     // .... Ignore code before this</span><br><span class=\"line\">     </span><br><span class=\"line\">     //AddAutoMapper会去找继承Profile的类，这个只适用于继承Profile类在当前项目。</span><br><span class=\"line\">     //services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());</span><br><span class=\"line\"></span><br><span class=\"line\">     //RESTful.Web.Core 字符串为项目名</span><br><span class=\"line\">     //services.AddAutoMapper(Assembly.Load(&quot;RESTful.Web.Core&quot;));</span><br><span class=\"line\">     //或某一个类所在程序集</span><br><span class=\"line\">     services.AddAutoMapper(typeof(Blog).Assembly);</span><br><span class=\"line\"></span><br><span class=\"line\">     // .... Ignore code after this</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-Profiles\"><a href=\"#Adding-Profiles\" class=\"headerlink\" title=\"Adding Profiles\"></a>Adding Profiles</h3><p>AutoMapper/BlogProfile.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.AutoMapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogProfile</span> : <span class=\"title\">Profile</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogProfile</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            CreateMap&lt;CreateBlogDto, Blog&gt;();</span><br><span class=\"line\">            CreateMap&lt;UpdateBlogDto, Blog&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AutoMapper/BlogProfile.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.AutoMapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PostProfile</span> : <span class=\"title\">Profile</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostProfile</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            CreateMap&lt;CreatePostDto,Post&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Models.Posts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchPostDto</span>:<span class=\"title\">PageDto</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BlogId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Blogs;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET api/Blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMapper _mapper;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BlogController</span>(<span class=\"params\">IFreeSql fsql, IMapper mapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">            _mapper = mapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 博客列表页 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageDto\"&gt;</span>分页参数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ActionResult&lt;PagedResultDto&lt;Blog&gt;&gt; Get([FromQuery]PageDto pageDto)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;Blog&gt; blogs = _fsql.Select&lt;Blog&gt;().OrderByDescending(r =&gt; r.CreateTime).Page(pageDto.PageNumber, pageDto.PageSize).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> count = _fsql.Select&lt;Blog&gt;().Count();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PagedResultDto&lt;Blog&gt;(count, blogs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;Blog&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// eg.1 return _fsql.Select&lt;Blog&gt;().Where(a =&gt; a.Id == id).ToOne();</span></span><br><span class=\"line\">            <span class=\"comment\">// eg.2</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Blog&gt;(id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// POST api/blog</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CreateBlogDto createBlogDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Blog blog = _mapper.Map&lt;Blog&gt;(createBlogDto);</span><br><span class=\"line\">            blog.CreateTime = DateTime.Now;</span><br><span class=\"line\">            _fsql.Insert&lt;Blog&gt;(blog).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/blog</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\">[FromBody] UpdateBlogDto updateBlogDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//eg.1 更新指定列</span></span><br><span class=\"line\">            <span class=\"comment\">//_fsql.Update&lt;Blog&gt;(updateBlogDto.BlogId).Set(a =&gt; new Blog()</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    Title = updateBlogDto.Title,</span></span><br><span class=\"line\">            <span class=\"comment\">//    Content = updateBlogDto.Content</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;).ExecuteAffrows();</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span></span><br><span class=\"line\">            <span class=\"comment\">//使用IgnoreColumns可忽略某一些列。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Blog blog = _mapper.Map&lt;Blog&gt;(updateBlogDto);</span><br><span class=\"line\">            _fsql.Update&lt;Blog&gt;().SetSource(blog).IgnoreColumns(r =&gt; r.CreateTime).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/blog/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql.Delete&lt;Blog&gt;(<span class=\"keyword\">new</span> &#123; BlogId = id &#125;).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FreeSql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AutoMapper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Domain;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Models.Posts;</span><br><span class=\"line\"><span class=\"keyword\">using</span> RESTful.FreeSql.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">RESTful.FreeSql.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PostController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET: api/Post</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IFreeSql _fsql;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMapper _mapper;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostController</span>(<span class=\"params\">IFreeSql fsql, IMapper mapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _fsql = fsql;</span><br><span class=\"line\">            _mapper = mapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据博客id、分页条件查询评论信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"searchPostDto\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PagedResultDto&lt;Post&gt; <span class=\"title\">Get</span>(<span class=\"params\">SearchPostDto searchPostDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ISelect&lt;Post&gt; selectPost = _fsql</span><br><span class=\"line\">                .Select&lt;Post&gt;()</span><br><span class=\"line\">                .Where(r =&gt; r.BlogId == searchPostDto.BlogId);</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;Post&gt; posts = selectPost.OrderByDescending(r =&gt; r.ReplyTime)</span><br><span class=\"line\">                .Page(searchPostDto.PageNumber, searchPostDto.PageSize)</span><br><span class=\"line\">                .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> total = selectPost.Count();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PagedResultDto&lt;Post&gt;(total, posts);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// GET: api/Post/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>, Name = <span class=\"meta-string\">\"Get\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Post <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _fsql.Select&lt;Post&gt;().Where(a =&gt; a.PostId == id).ToOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// POST: api/Post</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CreatePostDto createPostDto</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Post post = _mapper.Map&lt;Post&gt;(createPostDto);</span><br><span class=\"line\">            post.ReplyTime = DateTime.Now;</span><br><span class=\"line\">            _fsql.Insert(post).ExecuteAffrows();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// DELETE: api/Post/</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _fsql.Delete&lt;Post&gt;(<span class=\"keyword\">new</span> Post &#123; PostId = id &#125;).ExecuteAffrowsAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>建议大家先看官网 <a href=\"http://automapper.org/\" target=\"_blank\" rel=\"noopener\">http://automapper.org/</a></li>\n<li>开源地址 <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"noopener\">https://github.com/AutoMapper/AutoMapper</a></li>\n<li>Getting-started 文档 <a href=\"https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper\" target=\"_blank\" rel=\"noopener\">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Jul 01 2019 22:22:22 GMT+0800 (GMT+08:00)","title":"使用RESTful、FreeSql构建简单的博客系统-集成AutoMapper","path":"2019/06/30/re-start/FreeSql-sample-blog-RESTful/","eyeCatchImage":null,"excerpt":"<h2 id=\"文章概述\"><a href=\"#文章概述\" class=\"headerlink\" title=\"文章概述\"></a>文章概述</h2><p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>\n<p>接上一篇 </p>\n<ul>\n<li><p><a href=\"http://blog.igeekfan.cn/2019/06/30/Re-start/FreeSql-asp.net-core-how-to-use/\">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>\n</li>\n<li><p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql</a></p>\n</li>\n<li><p>项目源码稍微有所重构，命名空间会有变化，但整体类与结构无大的变化。</p>\n</li>\n</ul>","date":"2019-06-30T07:39:22.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["FreeSql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP使用文档","date":"2019-03-12T06:40:26.000Z","description":"旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。","_content":"## 具体入门与开发原理可参考此地址\nhttps://blog.csdn.net/wulex/article/category/7256369/3\n\n## abp入门系列\nhttps://www.jianshu.com/p/a6e9ace79345\n\n我们以通知公告为示例\n1. 首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，\n\n```\n public class NoticeItem : FullAuditedEntity\n    {\n        /// <summary>\n        /// 公告类别ID\n        /// </summary>\n        [StringLength(50)]\n        public string BaseItemId { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [StringLength(100)]\n        public string Title { get; set; }\n        /// <summary>\n        /// 内容 \n        /// </summary>\n        public string Content { get; set; }\n        /// <summary>\n        ///  打开次数\n        /// </summary>\n        public int Times { get; set; }\n        /// <summary>\n        /// 新增人姓名\n        /// </summary>\n\n        [StringLength(50)]\n        public string CreationUserName { get; set; }\n        /// <summary>\n        /// 部门\n        /// </summary>\n        [StringLength(50)]\n        public string DepName { get; set; }\n        /// <summary>\n        /// 是否置顶\n        /// </summary>\n\n        public bool IsTop { get; set; }\n\n        /// <summary>\n        /// 置顶时间\n        /// </summary>\n        public DateTime? TopTime { get; set; }\n        /// <summary>\n        /// 发布时间\n        /// </summary>\n        public DateTime? DeployTime { get; set; }\n        public bool IsImg { get; set; }\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public string Status { get; set; }\n        /// <summary>\n        /// 图片地址\n        /// </summary>\n        public string ImgUrl { get; set; }\n        /// <summary>\n        /// 附件地址\n        /// </summary>\n        public string FileUrl { get; set; }\n\n        /// <summary>\n        /// 阅读量+1\n        /// </summary>\n        public void NewlyTimes()\n        {\n            this.Times++;\n        }\n\n    }\n```\n\n在此文件夹下把相关权限配置好\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体配置如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。\n\n```\nnew SysMenu {  DisplayName = \"公告信息管理\", Icon = \"icon-standard-date-add\", EnCode = \"Plat.NoticeItem\", LinkUrl = \"/Plat/NoticeItem/Index\", TypeCode = menu, SortCode = 20 ,\nChildrens = new List<SysMenu>()\n{\nnew SysMenu { DisplayName = \"新增公告\", EnCode = \"Plat.NoticeItem.Add\", TypeCode = permission, SortCode = 1 },\n    new SysMenu { DisplayName = \"编辑公告\", EnCode = \"Plat.NoticeItem.Edit\", TypeCode = permission, SortCode = 2},\n    new SysMenu { DisplayName = \"删除公告\", EnCode = \"Plat.NoticeItem.Delete\", TypeCode = permission, SortCode = 3 },\n    new SysMenu { DisplayName = \"公告列表\", EnCode = \"Plat.NoticeItem.GetGrid\", TypeCode = permission, SortCode = 4 }\n}\n}\n```\n然后在EntityFramework的TelSCodeDbContext中增加一行 \n```\n        public virtual IDbSet<NoticeItem> NoticeItem { get; set; }\n```\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可\n```\n   [AutoMap(typeof(NoticeItem))]\n    public class NoticeItemInput : EntityDto\n    {\n        public string BaseItemId { get; set; }\n        [StringLength(100,ErrorMessage = \"标题仅限100个字符\")]\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        public string CreationUserName { get; set; }\n        public string DepName { get; set; }\n        public bool IsTop { get; set; }\n        public bool IsImg { get; set; }\n        public string Status { get; set; }\n        public string ImgUrl { get; set; }\n        public string FileUrl { get; set; }\n        public DateTime? TopTime { get; set; }\n        public DateTime? DeployTime { get; set; }\n    }\n```\nNoticeItemListDto 为列表上展示的数据字段\n```\n    [AutoMapFrom(typeof(NoticeItem))]\n    public class NoticeItemListDto : EntityDto, IHasCreationTime\n    {\n        public string BaseItemId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        /// <summary>\n        /// 回复次数\n        /// </summary>\n        public int CommentTimes { get; set; }\n        public string CreationUserName { get; set; }\n        public DateTime CreationTime { get; set; }\n\n        public DateTime? DeployTime { get; set; }\n\n        public bool IsTop { get; set; }\n        public string StatusCode { get; set; }\n    }\n```\nNoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。\n```\n    public class NoticeItemSearchDto : PageDto\n    {\n        public string BaseItemEnCode { get; set; }\n        public string Title { get; set; }\n    }\n```\nINoticeItemAppService .cs文件 夹\n~~~\n    public interface INoticeItemAppService : IUsualCrudAppService<NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>\n    {\n\n    }\n~~~\nNoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：\n```\nbase.DeletePermissionName=\"Plat.NoticeItem.Delete\";\n base.CreatePermissionName = \"Plat.NoticeItem.Add\";\nbase.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n```\n在方法名上使用此权限属性配置该方法对应的权限信息。\n```\n     [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n```\n调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限\n```\n  public class NoticeItemAppService : UsualCrudAppService<NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>, INoticeItemAppService\n    {\n\n        #region 构造函数\n        private readonly IRepository<NoticeItem> _noticeItemRepository;\n        private RoleManager RoleManager;\n        private readonly ISqlExecuter _iSqlExecuter;\n        public NoticeItemAppService(IRepository<NoticeItem> noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)\n        {\n            this._noticeItemRepository = noticeItemRepository;\n            _iSqlExecuter = iSqlExecuter;\n            RoleManager = roleManager;\n            base.DeletePermissionName = \"Plat.NoticeItem.Delete\";\n            base.CreatePermissionName = \"Plat.NoticeItem.Add\";\n            base.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n        }\n        #endregion\n\n        public override async Task CreateOrUpdate(NoticeItemInput input)\n        {\n            if (input.IsTop)\n            {\n                input.TopTime = DateTime.Now;\n            }\n            else\n            {\n                input.TopTime = null;\n            }\n\n            if (input.Status == StatusCode.Submit.ToString())\n            {\n                input.DeployTime = DateTime.Now;\n            }\n            await base.CreateOrUpdate(input);\n        }\n\n        protected override IQueryable<NoticeItem> CreateFilteredQuery(NoticeItemSearchDto input)\n        {\n            return base.CreateFilteredQuery(input)\n                .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m => m.Title.Contains(input.Title));\n        }\n\n        [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public override EasyUiListResultDto<NoticeItemInput> GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var rows = this.CreateFilteredQuery(input).OrderBy(r => r.IsTop).PageEasyUiBy(input).OrderByDescending(r => r.TopTime).MapTo<List<NoticeItemInput>>();\n\n            return new EasyUiListResultDto<NoticeItemInput>(input.Total, rows);\n        }\n```\nNoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。\n```\n\n    public class NoticeItemController : TelSCodeControllerBase\n    {\n        #region 构造函数\n        private readonly INoticeItemAppService _noticeitemAppService;\n        private readonly IAbpFileManager _abpFileManager;\n        public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)\n        {\n            this._abpFileManager = abpFileManager;\n            this._noticeitemAppService = noticeitemAppService;\n        }\n        #endregion\n\n        #region 视图\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.Add\", \"Plat.NoticeItem.Edit\")]\n        public ActionResult CreateOrUpdateModal()\n        {\n            return View();\n        }\n   \n        #region 数据\n        public async Task<JsonResult> GetInfoForEdit(int id)\n        {\n            var output = await _noticeitemAppService.GetInfoForEdit(id);\n\n            if (id == 0)\n            {\n                output.CreationUserName = AbpSession.GetLoginName();\n            }\n\n            NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(\n                  _abpFileManager.GetFileOutput(output.FileUrl),\n                  _abpFileManager.GetFileOutput(output.ImgUrl),\n                  output\n                );\n\n            return Json(noticeItemViewModel);\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public JsonResult GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var gridData = _noticeitemAppService.GetGridByCondition(input);\n            return Json(gridData);\n        }\n\n        #endregion\n    }\n```\n公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类\n在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n   [AutoMapFrom(typeof(NoticeItemInput))]\n    public class NoticeItemViewModel : NoticeItemInput\n    {\n        public List<AbpFileOutput> AbpFileOutput { get; set; }\n        public List<AbpFileOutput> AbpImgFileOutput { get; set; }\n        public NoticeItemViewModel(List<AbpFileOutput> fileUrlOutputs, List<AbpFileOutput> imgFileUrlOutputs, NoticeItemInput noticeItemInput)\n        {\n            AbpFileOutput = fileUrlOutputs;\n            AbpImgFileOutput = imgFileUrlOutputs;\n\n            noticeItemInput.MapTo(this);\n        }\n    }\n\n```\n\n接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nIndex.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    ViewBag.Title = \"通知公告\";\n}\n\n@section scripts{\n    @Html.IncludeScript(\"~/bower_components/webuploader/webuploader.min.js\")\n    @Html.IncludeScript(\"~/bower_components/staticfile/libs/abp.webuploader.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor.min.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor-plugin.js\")\n\n\n    <script>\n        var gridUI = gridUI ||\n            {\n                BaseItemEnCode: $.util.request['name'] == undefined ? \"\" : $.util.request['name']\n            };\n    </script>\n\n    @Html.IncludeScript(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n\n}\n\n@section styles{\n    <link href=\"~/bower_components/webuploader/webuploader.css\" rel=\"stylesheet\" />\n    <link href=\"~/bower_components/wangEditor/wangEditor-plugin.css\" rel=\"stylesheet\" />\n    @Html.IncludeStyle(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n}\n\n<div class=\"easyui-layout\" data-options=\"fit:true\">\n    <div data-options=\"region:'north',border:false\" style=\"height: 54px; overflow: hidden;\">\n        <form id=\"searchForm\">\n            <table class=\"kv-table no-border\">\n                <tr>\n                    <th class=\"kv-label\" style=\"text-align:center\">标题</th>\n                    <td class=\"kv-content\">\n                        <input name=\"Title\" id=\"Title\" class=\"easyui-textbox\" />\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-search'\" onclick=\"com.filter('#searchForm', '#dgGrid');\">查询</a>\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-undo'\" onclick=\"com.clear('#searchForm', '#dgGrid')\">清空</a>\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div data-options=\"region:'center',border:false\">\n        <table id=\"dgGrid\"></table>\n    </div>\n</div>\n```\n\n同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。\n```\nvar gridUI = gridUI || {};\n(function () {\n    var noticeService = abp.services.app.noticeItem;\n    var gridUrl = '/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=' + gridUI.BaseItemEnCode;\n    var editModalUrl = '/Plat/NoticeItem/CreateOrUpdateModal';\n    var readModalUrl = '/Plat/NoticeItem/ReadModal';\n    var dgGrid, dgGridId = \"#dgGrid\";\n\n    $.extend(gridUI,\n        {\n            loadGrid: function () {\n                var baseEnCode = 'Plat.NoticeItem.';\n\n                var toolbar = [{ text: \"刷新\", iconCls: \"icon-reload\", handler: function () { com.btnRefresh(dgGridId); } },\n                { text: \"新增\", EnCode: baseEnCode + 'Add', iconCls: \"icon-add\", handler: gridUI.btnAdd },\n                { text: \"编辑\", EnCode: baseEnCode + 'Edit', iconCls: \"icon-edit\", handler: gridUI.btnEdit },\n                { text: \"删除\", EnCode: baseEnCode + 'Delete', iconCls: \"icon-remove\", handler: gridUI.btnDelete }];\n                toolbar = com.authorizeButton(toolbar);\n                if (gridUI.BaseItemEnCode != \"\") {\n                    toolbar = [];\n                }\n\n                dgGrid = $(dgGridId).datagrid({\n                    url: gridUrl,\n                    toolbar: toolbar,\n                    columns: [[\n                        {\n                            field: 'Id', title: '查看', width: 20, align: 'center', formatter: function (value, row) {\n                                return String.format('<button class=\"btn btn-default btn-xs\" type=\"button\" onclick=\"gridUI.showDetails(\\'{0}\\')\"><i class=\"fa fa-search\"></i></button>', value);\n                            }\n                        },\n                        { field: 'Title', title: '标题', width: 80 },\n                        {\n                            field: 'BaseItemId', title: '类别', width: 80, formatter: function (value) {\n                                if (top.clients.dataItems['NoticeItem']) {\n                                    return top.clients.dataItems['NoticeItem'][value];\n                                } else {\n                                    return '';\n                                }\n                            }\n                        },\n                        { field: 'CreationUserName', title: '发布人姓名', width: 160 },\n                        { field: 'IsTop', title: '是否置顶', width: 50, formatter: com.formatYes },\n                        {\n                            field: 'Status', title: '状态', width: 50, formatter: function (value) {\n                                var objMsg = {\n                                    \"primary\": {\n                                        text: \"发布\",\n                                        'case': ['Submit']\n                                    },\n                                    \"info\": {\n                                        text: \"暂存\",\n                                        'case': ['TempSave']\n                                    }\n                                };\n                                return com.formatMsg(value, objMsg);\n                            }\n                        }\n                    ]]\n                });\n            },\n            editInfo: function (title, icon, id) {\n                var pDialog = com.dialog({\n                    title: title,\n                    width: '100%',\n                    height: '100%',\n                    href: editModalUrl,\n                    iconCls: icon,\n                    buttons: [\n                        {\n                            text: '发布',\n                            iconCls: 'icon-ok',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"Submit\");\n                            }\n                        }, {\n                            text: '暂存',\n                            iconCls: 'icon-save',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"TempSave\");\n                            }\n\n                        }\n                    ],\n                    onLoad: function () {\n                        editUI.setForm(id);\n                    }\n                });\n            },\n            showDetails: function (id) {\n                com.dialog({\n                    title: \"详情\",\n                    width: 1500,\n                    height: 800,\n                    href: readModalUrl,\n                    queryParams: {\n                        id: id\n                    }\n                });\n            },\n            btnAdd: function () {\n                gridUI.editInfo('新增公告', 'icon-add');\n            },\n            btnEdit: function () {\n                com.edit(dgGridId, function (id) {\n                    gridUI.editInfo(\"编辑公告\", 'icon-edit', id);\n                });\n            },\n            btnDelete: function () {\n                com.deleted(noticeService, dgGridId);\n            },\n            submit: function (pDialog, status) {\n                var f = $(\"#editForm\");\n                var isValid = f.form('validate');\n                if (!isValid) {\n                    return;\n                }\n\n                var objForm = f.formSerialize();\n                objForm.Content = editor.txt.html();\n                objForm.Status = status;\n\n                com.setBusy(pDialog, true);\n                noticeService.createOrUpdate(objForm, { showMsg: true })\n                    .done(function () {\n                        com.btnRefresh();\n                        pDialog.dialog('close');\n                    })\n                    .always(function () {\n                        com.setBusy(pDialog, false);\n                    });\n            }\n        });\n\n    $(function () {\n        gridUI.loadGrid();\n    });\n\n})();\n\n```\nCreateOrUpdate.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    Layout = null;\n    ViewBag.Title = \"通知公告管理\";\n}\n@Html.IncludeScript(\"/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js\")\n<div class=\"layui-layer-content\">\n    <form id=\"editForm\">\n        <table class=\"kv-table\">\n            <tr>\n                <th class=\"kv-label\"><span class=\"red\">*</span>标题</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <input id=\"Title\" name=\"Title\" type=\"text\" class=\"easyui-textbox\" data-options=\"required:true\" style=\"width:569px\" />\n                    <input id=\"Id\" name=\"Id\" type=\"hidden\" />\n                    <input type=\"hidden\" id=\"CreationUserName\" name=\"CreationUserName\" />\n                    <input type=\"hidden\" name=\"BaseItemCode\" value=\"\" />\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">置顶</th>\n                <td class=\"kv-content\" style=\"width:215px\">\n                    <input name=\"IsTop\" id=\"IsTop\" class=\"easyui-switchbutton\">\n                </td>\n                <th class=\"kv-label\">公告类别</th>\n                <td class=\"kv-content\">\n                    <input name=\"BaseItemId\" id=\"BaseItemId\" />\n                </td>\n            </tr>\n            <tr>\n                <th>附件</th>\n                <td colspan=\"3\">\n                    <div id=\"fileUrl\"></div>\n                </td>\n            </tr>\n            @*<tr>\n                    <th class=\"kv-label\">是否图片新闻</th>\n                    <td class=\"kv-content\" colspan=\"3\">\n                        <input name=\"IsImg\" id=\"IsImg\" class=\"easyui-switchbutton\">\n                    </td>\n                </tr>*@\n            <tr id=\"IsImgNews\">\n                <th>上传图片</th>\n                <td colspan=\"3\">\n                    <input name=\"IsImg\" id=\"IsImg\" type=\"hidden\" value=\"true\">\n                    <div id=\"imgUrl\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">内容</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <div id=\"Content\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n        </table>\n    </form>\n</div>\n```\nCreateOrUpdate.js\n```\nvar Img;\nvar editor;\nvar editUI = {\n    setForm: function (id) {\n\n        var E = window.wangEditor;\n        editor = new E('#Content');\n        editor.customConfig = com.editor.customConfig;\n        editor.create();\n        E.plugins.init({\n            elem: '#Content',\n            plugins: ['fullscreen']\n        });\n\n\n        //实例化文件上传\n        $(\"#imgUrl\").powerWebUpload({\n            uploadType: 'img'\n        });\n        $(\"#fileUrl\").powerWebUpload();\n\n        $('#BaseItemId').combobox({\n            url: com.baseUrl + '/baseItem/GetComBoJson?enCode=NoticeItem',\n            required: true,\n            validType: \"comboxValidate['请选择公告类别']\"\n        });\n\n        //function changeIsImg(checked) {\n        //    if (checked) {\n        //        $('#IsImgNews').css('display', '');\n        //    } else {\n        //        $('#IsImgNews').css('display', 'none');\n        //    }\n        //}\n\n        //$('#IsImg').switchbutton({\n        //    onChange: function (checked) {\n        //        changeIsImg(checked);\n        //    }\n        //});\n\n        com.setForm(id, function (data) {\n            var f = $(\"#editForm\");\n            if (id) {\n                setTimeout(function () {\n                    editor.txt.html(data.Content);\n                }, 666);\n            }\n\n\n\n            webuploader.loadFile({\n                elem: '#imgUrl',\n                rows: data.AbpImgFileOutput\n            });\n\n            webuploader.loadFile({\n                elem: '#fileUrl',\n                rows: data.AbpFileOutput\n            });\n            com.loadSwithButton($('.layui-layer-content'), data);\n            //changeIsImg(data.IsImg);\n        });\n    }\n}\n```\n\n","source":"_posts/abp/ABP-How-To-Use.md","raw":"---\ntitle: ABP使用文档\ndate: 2019-03-12 14:40:26\ntags: ABP\ndescription: 旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。\ncategory:\n- ABP\n---\n## 具体入门与开发原理可参考此地址\nhttps://blog.csdn.net/wulex/article/category/7256369/3\n\n## abp入门系列\nhttps://www.jianshu.com/p/a6e9ace79345\n\n我们以通知公告为示例\n1. 首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，\n\n```\n public class NoticeItem : FullAuditedEntity\n    {\n        /// <summary>\n        /// 公告类别ID\n        /// </summary>\n        [StringLength(50)]\n        public string BaseItemId { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [StringLength(100)]\n        public string Title { get; set; }\n        /// <summary>\n        /// 内容 \n        /// </summary>\n        public string Content { get; set; }\n        /// <summary>\n        ///  打开次数\n        /// </summary>\n        public int Times { get; set; }\n        /// <summary>\n        /// 新增人姓名\n        /// </summary>\n\n        [StringLength(50)]\n        public string CreationUserName { get; set; }\n        /// <summary>\n        /// 部门\n        /// </summary>\n        [StringLength(50)]\n        public string DepName { get; set; }\n        /// <summary>\n        /// 是否置顶\n        /// </summary>\n\n        public bool IsTop { get; set; }\n\n        /// <summary>\n        /// 置顶时间\n        /// </summary>\n        public DateTime? TopTime { get; set; }\n        /// <summary>\n        /// 发布时间\n        /// </summary>\n        public DateTime? DeployTime { get; set; }\n        public bool IsImg { get; set; }\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public string Status { get; set; }\n        /// <summary>\n        /// 图片地址\n        /// </summary>\n        public string ImgUrl { get; set; }\n        /// <summary>\n        /// 附件地址\n        /// </summary>\n        public string FileUrl { get; set; }\n\n        /// <summary>\n        /// 阅读量+1\n        /// </summary>\n        public void NewlyTimes()\n        {\n            this.Times++;\n        }\n\n    }\n```\n\n在此文件夹下把相关权限配置好\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体配置如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。\n\n```\nnew SysMenu {  DisplayName = \"公告信息管理\", Icon = \"icon-standard-date-add\", EnCode = \"Plat.NoticeItem\", LinkUrl = \"/Plat/NoticeItem/Index\", TypeCode = menu, SortCode = 20 ,\nChildrens = new List<SysMenu>()\n{\nnew SysMenu { DisplayName = \"新增公告\", EnCode = \"Plat.NoticeItem.Add\", TypeCode = permission, SortCode = 1 },\n    new SysMenu { DisplayName = \"编辑公告\", EnCode = \"Plat.NoticeItem.Edit\", TypeCode = permission, SortCode = 2},\n    new SysMenu { DisplayName = \"删除公告\", EnCode = \"Plat.NoticeItem.Delete\", TypeCode = permission, SortCode = 3 },\n    new SysMenu { DisplayName = \"公告列表\", EnCode = \"Plat.NoticeItem.GetGrid\", TypeCode = permission, SortCode = 4 }\n}\n}\n```\n然后在EntityFramework的TelSCodeDbContext中增加一行 \n```\n        public virtual IDbSet<NoticeItem> NoticeItem { get; set; }\n```\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可\n```\n   [AutoMap(typeof(NoticeItem))]\n    public class NoticeItemInput : EntityDto\n    {\n        public string BaseItemId { get; set; }\n        [StringLength(100,ErrorMessage = \"标题仅限100个字符\")]\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        public string CreationUserName { get; set; }\n        public string DepName { get; set; }\n        public bool IsTop { get; set; }\n        public bool IsImg { get; set; }\n        public string Status { get; set; }\n        public string ImgUrl { get; set; }\n        public string FileUrl { get; set; }\n        public DateTime? TopTime { get; set; }\n        public DateTime? DeployTime { get; set; }\n    }\n```\nNoticeItemListDto 为列表上展示的数据字段\n```\n    [AutoMapFrom(typeof(NoticeItem))]\n    public class NoticeItemListDto : EntityDto, IHasCreationTime\n    {\n        public string BaseItemId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        /// <summary>\n        /// 回复次数\n        /// </summary>\n        public int CommentTimes { get; set; }\n        public string CreationUserName { get; set; }\n        public DateTime CreationTime { get; set; }\n\n        public DateTime? DeployTime { get; set; }\n\n        public bool IsTop { get; set; }\n        public string StatusCode { get; set; }\n    }\n```\nNoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。\n```\n    public class NoticeItemSearchDto : PageDto\n    {\n        public string BaseItemEnCode { get; set; }\n        public string Title { get; set; }\n    }\n```\nINoticeItemAppService .cs文件 夹\n~~~\n    public interface INoticeItemAppService : IUsualCrudAppService<NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>\n    {\n\n    }\n~~~\nNoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：\n```\nbase.DeletePermissionName=\"Plat.NoticeItem.Delete\";\n base.CreatePermissionName = \"Plat.NoticeItem.Add\";\nbase.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n```\n在方法名上使用此权限属性配置该方法对应的权限信息。\n```\n     [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n```\n调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限\n```\n  public class NoticeItemAppService : UsualCrudAppService<NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>, INoticeItemAppService\n    {\n\n        #region 构造函数\n        private readonly IRepository<NoticeItem> _noticeItemRepository;\n        private RoleManager RoleManager;\n        private readonly ISqlExecuter _iSqlExecuter;\n        public NoticeItemAppService(IRepository<NoticeItem> noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)\n        {\n            this._noticeItemRepository = noticeItemRepository;\n            _iSqlExecuter = iSqlExecuter;\n            RoleManager = roleManager;\n            base.DeletePermissionName = \"Plat.NoticeItem.Delete\";\n            base.CreatePermissionName = \"Plat.NoticeItem.Add\";\n            base.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n        }\n        #endregion\n\n        public override async Task CreateOrUpdate(NoticeItemInput input)\n        {\n            if (input.IsTop)\n            {\n                input.TopTime = DateTime.Now;\n            }\n            else\n            {\n                input.TopTime = null;\n            }\n\n            if (input.Status == StatusCode.Submit.ToString())\n            {\n                input.DeployTime = DateTime.Now;\n            }\n            await base.CreateOrUpdate(input);\n        }\n\n        protected override IQueryable<NoticeItem> CreateFilteredQuery(NoticeItemSearchDto input)\n        {\n            return base.CreateFilteredQuery(input)\n                .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m => m.Title.Contains(input.Title));\n        }\n\n        [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public override EasyUiListResultDto<NoticeItemInput> GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var rows = this.CreateFilteredQuery(input).OrderBy(r => r.IsTop).PageEasyUiBy(input).OrderByDescending(r => r.TopTime).MapTo<List<NoticeItemInput>>();\n\n            return new EasyUiListResultDto<NoticeItemInput>(input.Total, rows);\n        }\n```\nNoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。\n```\n\n    public class NoticeItemController : TelSCodeControllerBase\n    {\n        #region 构造函数\n        private readonly INoticeItemAppService _noticeitemAppService;\n        private readonly IAbpFileManager _abpFileManager;\n        public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)\n        {\n            this._abpFileManager = abpFileManager;\n            this._noticeitemAppService = noticeitemAppService;\n        }\n        #endregion\n\n        #region 视图\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.Add\", \"Plat.NoticeItem.Edit\")]\n        public ActionResult CreateOrUpdateModal()\n        {\n            return View();\n        }\n   \n        #region 数据\n        public async Task<JsonResult> GetInfoForEdit(int id)\n        {\n            var output = await _noticeitemAppService.GetInfoForEdit(id);\n\n            if (id == 0)\n            {\n                output.CreationUserName = AbpSession.GetLoginName();\n            }\n\n            NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(\n                  _abpFileManager.GetFileOutput(output.FileUrl),\n                  _abpFileManager.GetFileOutput(output.ImgUrl),\n                  output\n                );\n\n            return Json(noticeItemViewModel);\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public JsonResult GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var gridData = _noticeitemAppService.GetGridByCondition(input);\n            return Json(gridData);\n        }\n\n        #endregion\n    }\n```\n公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类\n在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n   [AutoMapFrom(typeof(NoticeItemInput))]\n    public class NoticeItemViewModel : NoticeItemInput\n    {\n        public List<AbpFileOutput> AbpFileOutput { get; set; }\n        public List<AbpFileOutput> AbpImgFileOutput { get; set; }\n        public NoticeItemViewModel(List<AbpFileOutput> fileUrlOutputs, List<AbpFileOutput> imgFileUrlOutputs, NoticeItemInput noticeItemInput)\n        {\n            AbpFileOutput = fileUrlOutputs;\n            AbpImgFileOutput = imgFileUrlOutputs;\n\n            noticeItemInput.MapTo(this);\n        }\n    }\n\n```\n\n接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nIndex.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    ViewBag.Title = \"通知公告\";\n}\n\n@section scripts{\n    @Html.IncludeScript(\"~/bower_components/webuploader/webuploader.min.js\")\n    @Html.IncludeScript(\"~/bower_components/staticfile/libs/abp.webuploader.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor.min.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor-plugin.js\")\n\n\n    <script>\n        var gridUI = gridUI ||\n            {\n                BaseItemEnCode: $.util.request['name'] == undefined ? \"\" : $.util.request['name']\n            };\n    </script>\n\n    @Html.IncludeScript(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n\n}\n\n@section styles{\n    <link href=\"~/bower_components/webuploader/webuploader.css\" rel=\"stylesheet\" />\n    <link href=\"~/bower_components/wangEditor/wangEditor-plugin.css\" rel=\"stylesheet\" />\n    @Html.IncludeStyle(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n}\n\n<div class=\"easyui-layout\" data-options=\"fit:true\">\n    <div data-options=\"region:'north',border:false\" style=\"height: 54px; overflow: hidden;\">\n        <form id=\"searchForm\">\n            <table class=\"kv-table no-border\">\n                <tr>\n                    <th class=\"kv-label\" style=\"text-align:center\">标题</th>\n                    <td class=\"kv-content\">\n                        <input name=\"Title\" id=\"Title\" class=\"easyui-textbox\" />\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-search'\" onclick=\"com.filter('#searchForm', '#dgGrid');\">查询</a>\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-undo'\" onclick=\"com.clear('#searchForm', '#dgGrid')\">清空</a>\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div data-options=\"region:'center',border:false\">\n        <table id=\"dgGrid\"></table>\n    </div>\n</div>\n```\n\n同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。\n```\nvar gridUI = gridUI || {};\n(function () {\n    var noticeService = abp.services.app.noticeItem;\n    var gridUrl = '/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=' + gridUI.BaseItemEnCode;\n    var editModalUrl = '/Plat/NoticeItem/CreateOrUpdateModal';\n    var readModalUrl = '/Plat/NoticeItem/ReadModal';\n    var dgGrid, dgGridId = \"#dgGrid\";\n\n    $.extend(gridUI,\n        {\n            loadGrid: function () {\n                var baseEnCode = 'Plat.NoticeItem.';\n\n                var toolbar = [{ text: \"刷新\", iconCls: \"icon-reload\", handler: function () { com.btnRefresh(dgGridId); } },\n                { text: \"新增\", EnCode: baseEnCode + 'Add', iconCls: \"icon-add\", handler: gridUI.btnAdd },\n                { text: \"编辑\", EnCode: baseEnCode + 'Edit', iconCls: \"icon-edit\", handler: gridUI.btnEdit },\n                { text: \"删除\", EnCode: baseEnCode + 'Delete', iconCls: \"icon-remove\", handler: gridUI.btnDelete }];\n                toolbar = com.authorizeButton(toolbar);\n                if (gridUI.BaseItemEnCode != \"\") {\n                    toolbar = [];\n                }\n\n                dgGrid = $(dgGridId).datagrid({\n                    url: gridUrl,\n                    toolbar: toolbar,\n                    columns: [[\n                        {\n                            field: 'Id', title: '查看', width: 20, align: 'center', formatter: function (value, row) {\n                                return String.format('<button class=\"btn btn-default btn-xs\" type=\"button\" onclick=\"gridUI.showDetails(\\'{0}\\')\"><i class=\"fa fa-search\"></i></button>', value);\n                            }\n                        },\n                        { field: 'Title', title: '标题', width: 80 },\n                        {\n                            field: 'BaseItemId', title: '类别', width: 80, formatter: function (value) {\n                                if (top.clients.dataItems['NoticeItem']) {\n                                    return top.clients.dataItems['NoticeItem'][value];\n                                } else {\n                                    return '';\n                                }\n                            }\n                        },\n                        { field: 'CreationUserName', title: '发布人姓名', width: 160 },\n                        { field: 'IsTop', title: '是否置顶', width: 50, formatter: com.formatYes },\n                        {\n                            field: 'Status', title: '状态', width: 50, formatter: function (value) {\n                                var objMsg = {\n                                    \"primary\": {\n                                        text: \"发布\",\n                                        'case': ['Submit']\n                                    },\n                                    \"info\": {\n                                        text: \"暂存\",\n                                        'case': ['TempSave']\n                                    }\n                                };\n                                return com.formatMsg(value, objMsg);\n                            }\n                        }\n                    ]]\n                });\n            },\n            editInfo: function (title, icon, id) {\n                var pDialog = com.dialog({\n                    title: title,\n                    width: '100%',\n                    height: '100%',\n                    href: editModalUrl,\n                    iconCls: icon,\n                    buttons: [\n                        {\n                            text: '发布',\n                            iconCls: 'icon-ok',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"Submit\");\n                            }\n                        }, {\n                            text: '暂存',\n                            iconCls: 'icon-save',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"TempSave\");\n                            }\n\n                        }\n                    ],\n                    onLoad: function () {\n                        editUI.setForm(id);\n                    }\n                });\n            },\n            showDetails: function (id) {\n                com.dialog({\n                    title: \"详情\",\n                    width: 1500,\n                    height: 800,\n                    href: readModalUrl,\n                    queryParams: {\n                        id: id\n                    }\n                });\n            },\n            btnAdd: function () {\n                gridUI.editInfo('新增公告', 'icon-add');\n            },\n            btnEdit: function () {\n                com.edit(dgGridId, function (id) {\n                    gridUI.editInfo(\"编辑公告\", 'icon-edit', id);\n                });\n            },\n            btnDelete: function () {\n                com.deleted(noticeService, dgGridId);\n            },\n            submit: function (pDialog, status) {\n                var f = $(\"#editForm\");\n                var isValid = f.form('validate');\n                if (!isValid) {\n                    return;\n                }\n\n                var objForm = f.formSerialize();\n                objForm.Content = editor.txt.html();\n                objForm.Status = status;\n\n                com.setBusy(pDialog, true);\n                noticeService.createOrUpdate(objForm, { showMsg: true })\n                    .done(function () {\n                        com.btnRefresh();\n                        pDialog.dialog('close');\n                    })\n                    .always(function () {\n                        com.setBusy(pDialog, false);\n                    });\n            }\n        });\n\n    $(function () {\n        gridUI.loadGrid();\n    });\n\n})();\n\n```\nCreateOrUpdate.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    Layout = null;\n    ViewBag.Title = \"通知公告管理\";\n}\n@Html.IncludeScript(\"/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js\")\n<div class=\"layui-layer-content\">\n    <form id=\"editForm\">\n        <table class=\"kv-table\">\n            <tr>\n                <th class=\"kv-label\"><span class=\"red\">*</span>标题</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <input id=\"Title\" name=\"Title\" type=\"text\" class=\"easyui-textbox\" data-options=\"required:true\" style=\"width:569px\" />\n                    <input id=\"Id\" name=\"Id\" type=\"hidden\" />\n                    <input type=\"hidden\" id=\"CreationUserName\" name=\"CreationUserName\" />\n                    <input type=\"hidden\" name=\"BaseItemCode\" value=\"\" />\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">置顶</th>\n                <td class=\"kv-content\" style=\"width:215px\">\n                    <input name=\"IsTop\" id=\"IsTop\" class=\"easyui-switchbutton\">\n                </td>\n                <th class=\"kv-label\">公告类别</th>\n                <td class=\"kv-content\">\n                    <input name=\"BaseItemId\" id=\"BaseItemId\" />\n                </td>\n            </tr>\n            <tr>\n                <th>附件</th>\n                <td colspan=\"3\">\n                    <div id=\"fileUrl\"></div>\n                </td>\n            </tr>\n            @*<tr>\n                    <th class=\"kv-label\">是否图片新闻</th>\n                    <td class=\"kv-content\" colspan=\"3\">\n                        <input name=\"IsImg\" id=\"IsImg\" class=\"easyui-switchbutton\">\n                    </td>\n                </tr>*@\n            <tr id=\"IsImgNews\">\n                <th>上传图片</th>\n                <td colspan=\"3\">\n                    <input name=\"IsImg\" id=\"IsImg\" type=\"hidden\" value=\"true\">\n                    <div id=\"imgUrl\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">内容</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <div id=\"Content\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n        </table>\n    </form>\n</div>\n```\nCreateOrUpdate.js\n```\nvar Img;\nvar editor;\nvar editUI = {\n    setForm: function (id) {\n\n        var E = window.wangEditor;\n        editor = new E('#Content');\n        editor.customConfig = com.editor.customConfig;\n        editor.create();\n        E.plugins.init({\n            elem: '#Content',\n            plugins: ['fullscreen']\n        });\n\n\n        //实例化文件上传\n        $(\"#imgUrl\").powerWebUpload({\n            uploadType: 'img'\n        });\n        $(\"#fileUrl\").powerWebUpload();\n\n        $('#BaseItemId').combobox({\n            url: com.baseUrl + '/baseItem/GetComBoJson?enCode=NoticeItem',\n            required: true,\n            validType: \"comboxValidate['请选择公告类别']\"\n        });\n\n        //function changeIsImg(checked) {\n        //    if (checked) {\n        //        $('#IsImgNews').css('display', '');\n        //    } else {\n        //        $('#IsImgNews').css('display', 'none');\n        //    }\n        //}\n\n        //$('#IsImg').switchbutton({\n        //    onChange: function (checked) {\n        //        changeIsImg(checked);\n        //    }\n        //});\n\n        com.setForm(id, function (data) {\n            var f = $(\"#editForm\");\n            if (id) {\n                setTimeout(function () {\n                    editor.txt.html(data.Content);\n                }, 666);\n            }\n\n\n\n            webuploader.loadFile({\n                elem: '#imgUrl',\n                rows: data.AbpImgFileOutput\n            });\n\n            webuploader.loadFile({\n                elem: '#fileUrl',\n                rows: data.AbpFileOutput\n            });\n            com.loadSwithButton($('.layui-layer-content'), data);\n            //changeIsImg(data.IsImg);\n        });\n    }\n}\n```\n\n","slug":"abp/ABP-How-To-Use","published":1,"updated":"2019-10-08T04:21:13.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2362yqy005ym0twocuk6nuu","content":"<h2 id=\"具体入门与开发原理可参考此地址\"><a href=\"#具体入门与开发原理可参考此地址\" class=\"headerlink\" title=\"具体入门与开发原理可参考此地址\"></a>具体入门与开发原理可参考此地址</h2><p><a href=\"https://blog.csdn.net/wulex/article/category/7256369/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wulex/article/category/7256369/3</a></p>\n<h2 id=\"abp入门系列\"><a href=\"#abp入门系列\" class=\"headerlink\" title=\"abp入门系列\"></a>abp入门系列</h2><p><a href=\"https://www.jianshu.com/p/a6e9ace79345\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6e9ace79345</a></p>\n<p>我们以通知公告为示例</p>\n<ol>\n<li>首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>TelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItem : FullAuditedEntity</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 公告类别ID</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 标题</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(100)]</span><br><span class=\"line\">       public string Title &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 内容 </span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Content &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       ///  打开次数</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public int Times &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 新增人姓名</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 部门</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 是否置顶</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 置顶时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 发布时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\">       public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 状态</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Status &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 图片地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 附件地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 阅读量+1</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public void NewlyTimes()</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           this.Times++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在此文件夹下把相关权限配置好</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>具体配置如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new SysMenu &#123;  DisplayName = &quot;公告信息管理&quot;, Icon = &quot;icon-standard-date-add&quot;, EnCode = &quot;Plat.NoticeItem&quot;, LinkUrl = &quot;/Plat/NoticeItem/Index&quot;, TypeCode = menu, SortCode = 20 ,</span><br><span class=\"line\">Childrens = new List&lt;SysMenu&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">new SysMenu &#123; DisplayName = &quot;新增公告&quot;, EnCode = &quot;Plat.NoticeItem.Add&quot;, TypeCode = permission, SortCode = 1 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;编辑公告&quot;, EnCode = &quot;Plat.NoticeItem.Edit&quot;, TypeCode = permission, SortCode = 2&#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;删除公告&quot;, EnCode = &quot;Plat.NoticeItem.Delete&quot;, TypeCode = permission, SortCode = 3 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;公告列表&quot;, EnCode = &quot;Plat.NoticeItem.GetGrid&quot;, TypeCode = permission, SortCode = 4 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在EntityFramework的TelSCodeDbContext中增加一行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public virtual IDbSet&lt;NoticeItem&gt; NoticeItem &#123; get; set; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>NoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMap(typeof(NoticeItem))]</span><br><span class=\"line\"> public class NoticeItemInput : EntityDto</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">     [StringLength(100,ErrorMessage = &quot;标题仅限100个字符&quot;)]</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public int Times &#123; get; set; &#125;</span><br><span class=\"line\">     public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">     public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">     public string Status &#123; get; set; &#125;</span><br><span class=\"line\">     public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemListDto 为列表上展示的数据字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItem))]</span><br><span class=\"line\">public class NoticeItemListDto : EntityDto, IHasCreationTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">    public string Content &#123; get; set; &#125;</span><br><span class=\"line\">    public int Times &#123; get; set; &#125;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 回复次数</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public int CommentTimes &#123; get; set; &#125;</span><br><span class=\"line\">    public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">    public DateTime CreationTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">    public string StatusCode &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItemSearchDto : PageDto</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemEnCode &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INoticeItemAppService .cs文件 夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public interface INoticeItemAppService : IUsualCrudAppService&lt;NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">base.DeletePermissionName=&quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\"> base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>在方法名上使用此权限属性配置该方法对应的权限信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br></pre></td></tr></table></figure>\n\n<p>调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItemAppService : UsualCrudAppService&lt;NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;, INoticeItemAppService</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      #region 构造函数</span><br><span class=\"line\">      private readonly IRepository&lt;NoticeItem&gt; _noticeItemRepository;</span><br><span class=\"line\">      private RoleManager RoleManager;</span><br><span class=\"line\">      private readonly ISqlExecuter _iSqlExecuter;</span><br><span class=\"line\">      public NoticeItemAppService(IRepository&lt;NoticeItem&gt; noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          this._noticeItemRepository = noticeItemRepository;</span><br><span class=\"line\">          _iSqlExecuter = iSqlExecuter;</span><br><span class=\"line\">          RoleManager = roleManager;</span><br><span class=\"line\">          base.DeletePermissionName = &quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\">          base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">          base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">      public override async Task CreateOrUpdate(NoticeItemInput input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          if (input.IsTop)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = null;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          if (input.Status == StatusCode.Submit.ToString())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.DeployTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          await base.CreateOrUpdate(input);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected override IQueryable&lt;NoticeItem&gt; CreateFilteredQuery(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          return base.CreateFilteredQuery(input)</span><br><span class=\"line\">              .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m =&gt; m.Title.Contains(input.Title));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      [AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">      public override EasyUiListResultDto&lt;NoticeItemInput&gt; GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          var rows = this.CreateFilteredQuery(input).OrderBy(r =&gt; r.IsTop).PageEasyUiBy(input).OrderByDescending(r =&gt; r.TopTime).MapTo&lt;List&lt;NoticeItemInput&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          return new EasyUiListResultDto&lt;NoticeItemInput&gt;(input.Total, rows);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class NoticeItemController : TelSCodeControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #region 构造函数</span><br><span class=\"line\">    private readonly INoticeItemAppService _noticeitemAppService;</span><br><span class=\"line\">    private readonly IAbpFileManager _abpFileManager;</span><br><span class=\"line\">    public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._abpFileManager = abpFileManager;</span><br><span class=\"line\">        this._noticeitemAppService = noticeitemAppService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">    #region 视图</span><br><span class=\"line\">    public ActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.Add&quot;, &quot;Plat.NoticeItem.Edit&quot;)]</span><br><span class=\"line\">    public ActionResult CreateOrUpdateModal()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #region 数据</span><br><span class=\"line\">    public async Task&lt;JsonResult&gt; GetInfoForEdit(int id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var output = await _noticeitemAppService.GetInfoForEdit(id);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (id == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            output.CreationUserName = AbpSession.GetLoginName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.FileUrl),</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.ImgUrl),</span><br><span class=\"line\">              output</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">        return Json(noticeItemViewModel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">    public JsonResult GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var gridData = _noticeitemAppService.GetGridByCondition(input);</span><br><span class=\"line\">        return Json(gridData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类<br>在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItemInput))]</span><br><span class=\"line\"> public class NoticeItemViewModel : NoticeItemInput</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpImgFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public NoticeItemViewModel(List&lt;AbpFileOutput&gt; fileUrlOutputs, List&lt;AbpFileOutput&gt; imgFileUrlOutputs, NoticeItemInput noticeItemInput)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         AbpFileOutput = fileUrlOutputs;</span><br><span class=\"line\">         AbpImgFileOutput = imgFileUrlOutputs;</span><br><span class=\"line\"></span><br><span class=\"line\">         noticeItemInput.MapTo(this);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/webuploader/webuploader.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/staticfile/libs/abp.webuploader.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor-plugin.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var gridUI = gridUI ||</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                BaseItemEnCode: $.util.request[&apos;name&apos;] == undefined ? &quot;&quot; : $.util.request[&apos;name&apos;]</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section styles&#123;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/webuploader/webuploader.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/wangEditor/wangEditor-plugin.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    @Html.IncludeStyle(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;easyui-layout&quot; data-options=&quot;fit:true&quot;&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;north&apos;,border:false&quot; style=&quot;height: 54px; overflow: hidden;&quot;&gt;</span><br><span class=\"line\">        &lt;form id=&quot;searchForm&quot;&gt;</span><br><span class=\"line\">            &lt;table class=&quot;kv-table no-border&quot;&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot; style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;Title&quot; id=&quot;Title&quot; class=&quot;easyui-textbox&quot; /&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-search&apos;&quot; onclick=&quot;com.filter(&apos;#searchForm&apos;, &apos;#dgGrid&apos;);&quot;&gt;查询&lt;/a&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-undo&apos;&quot; onclick=&quot;com.clear(&apos;#searchForm&apos;, &apos;#dgGrid&apos;)&quot;&gt;清空&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;center&apos;,border:false&quot;&gt;</span><br><span class=\"line\">        &lt;table id=&quot;dgGrid&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var gridUI = gridUI || &#123;&#125;;</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    var noticeService = abp.services.app.noticeItem;</span><br><span class=\"line\">    var gridUrl = &apos;/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=&apos; + gridUI.BaseItemEnCode;</span><br><span class=\"line\">    var editModalUrl = &apos;/Plat/NoticeItem/CreateOrUpdateModal&apos;;</span><br><span class=\"line\">    var readModalUrl = &apos;/Plat/NoticeItem/ReadModal&apos;;</span><br><span class=\"line\">    var dgGrid, dgGridId = &quot;#dgGrid&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.extend(gridUI,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loadGrid: function () &#123;</span><br><span class=\"line\">                var baseEnCode = &apos;Plat.NoticeItem.&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">                var toolbar = [&#123; text: &quot;刷新&quot;, iconCls: &quot;icon-reload&quot;, handler: function () &#123; com.btnRefresh(dgGridId); &#125; &#125;,</span><br><span class=\"line\">                &#123; text: &quot;新增&quot;, EnCode: baseEnCode + &apos;Add&apos;, iconCls: &quot;icon-add&quot;, handler: gridUI.btnAdd &#125;,</span><br><span class=\"line\">                &#123; text: &quot;编辑&quot;, EnCode: baseEnCode + &apos;Edit&apos;, iconCls: &quot;icon-edit&quot;, handler: gridUI.btnEdit &#125;,</span><br><span class=\"line\">                &#123; text: &quot;删除&quot;, EnCode: baseEnCode + &apos;Delete&apos;, iconCls: &quot;icon-remove&quot;, handler: gridUI.btnDelete &#125;];</span><br><span class=\"line\">                toolbar = com.authorizeButton(toolbar);</span><br><span class=\"line\">                if (gridUI.BaseItemEnCode != &quot;&quot;) &#123;</span><br><span class=\"line\">                    toolbar = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                dgGrid = $(dgGridId).datagrid(&#123;</span><br><span class=\"line\">                    url: gridUrl,</span><br><span class=\"line\">                    toolbar: toolbar,</span><br><span class=\"line\">                    columns: [[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Id&apos;, title: &apos;查看&apos;, width: 20, align: &apos;center&apos;, formatter: function (value, row) &#123;</span><br><span class=\"line\">                                return String.format(&apos;&lt;button class=&quot;btn btn-default btn-xs&quot; type=&quot;button&quot; onclick=&quot;gridUI.showDetails(\\&apos;&#123;0&#125;\\&apos;)&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&apos;, value);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;Title&apos;, title: &apos;标题&apos;, width: 80 &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;BaseItemId&apos;, title: &apos;类别&apos;, width: 80, formatter: function (value) &#123;</span><br><span class=\"line\">                                if (top.clients.dataItems[&apos;NoticeItem&apos;]) &#123;</span><br><span class=\"line\">                                    return top.clients.dataItems[&apos;NoticeItem&apos;][value];</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    return &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;CreationUserName&apos;, title: &apos;发布人姓名&apos;, width: 160 &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;IsTop&apos;, title: &apos;是否置顶&apos;, width: 50, formatter: com.formatYes &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Status&apos;, title: &apos;状态&apos;, width: 50, formatter: function (value) &#123;</span><br><span class=\"line\">                                var objMsg = &#123;</span><br><span class=\"line\">                                    &quot;primary&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;发布&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;Submit&apos;]</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    &quot;info&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;暂存&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;TempSave&apos;]</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                                return com.formatMsg(value, objMsg);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            editInfo: function (title, icon, id) &#123;</span><br><span class=\"line\">                var pDialog = com.dialog(&#123;</span><br><span class=\"line\">                    title: title,</span><br><span class=\"line\">                    width: &apos;100%&apos;,</span><br><span class=\"line\">                    height: &apos;100%&apos;,</span><br><span class=\"line\">                    href: editModalUrl,</span><br><span class=\"line\">                    iconCls: icon,</span><br><span class=\"line\">                    buttons: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            text: &apos;发布&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-ok&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;Submit&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            text: &apos;暂存&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-save&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;TempSave&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    onLoad: function () &#123;</span><br><span class=\"line\">                        editUI.setForm(id);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            showDetails: function (id) &#123;</span><br><span class=\"line\">                com.dialog(&#123;</span><br><span class=\"line\">                    title: &quot;详情&quot;,</span><br><span class=\"line\">                    width: 1500,</span><br><span class=\"line\">                    height: 800,</span><br><span class=\"line\">                    href: readModalUrl,</span><br><span class=\"line\">                    queryParams: &#123;</span><br><span class=\"line\">                        id: id</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnAdd: function () &#123;</span><br><span class=\"line\">                gridUI.editInfo(&apos;新增公告&apos;, &apos;icon-add&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnEdit: function () &#123;</span><br><span class=\"line\">                com.edit(dgGridId, function (id) &#123;</span><br><span class=\"line\">                    gridUI.editInfo(&quot;编辑公告&quot;, &apos;icon-edit&apos;, id);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnDelete: function () &#123;</span><br><span class=\"line\">                com.deleted(noticeService, dgGridId);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            submit: function (pDialog, status) &#123;</span><br><span class=\"line\">                var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">                var isValid = f.form(&apos;validate&apos;);</span><br><span class=\"line\">                if (!isValid) &#123;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var objForm = f.formSerialize();</span><br><span class=\"line\">                objForm.Content = editor.txt.html();</span><br><span class=\"line\">                objForm.Status = status;</span><br><span class=\"line\"></span><br><span class=\"line\">                com.setBusy(pDialog, true);</span><br><span class=\"line\">                noticeService.createOrUpdate(objForm, &#123; showMsg: true &#125;)</span><br><span class=\"line\">                    .done(function () &#123;</span><br><span class=\"line\">                        com.btnRefresh();</span><br><span class=\"line\">                        pDialog.dialog(&apos;close&apos;);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .always(function () &#123;</span><br><span class=\"line\">                        com.setBusy(pDialog, false);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(function () &#123;</span><br><span class=\"line\">        gridUI.loadGrid();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    Layout = null;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告管理&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Html.IncludeScript(&quot;/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js&quot;)</span><br><span class=\"line\">&lt;div class=&quot;layui-layer-content&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;editForm&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;kv-table&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;&lt;span class=&quot;red&quot;&gt;*&lt;/span&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Title&quot; name=&quot;Title&quot; type=&quot;text&quot; class=&quot;easyui-textbox&quot; data-options=&quot;required:true&quot; style=&quot;width:569px&quot; /&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Id&quot; name=&quot;Id&quot; type=&quot;hidden&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; id=&quot;CreationUserName&quot; name=&quot;CreationUserName&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;BaseItemCode&quot; value=&quot;&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;置顶&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; style=&quot;width:215px&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsTop&quot; id=&quot;IsTop&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;公告类别&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;BaseItemId&quot; id=&quot;BaseItemId&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;附件&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;fileUrl&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            @*&lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot;&gt;是否图片新闻&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;*@</span><br><span class=\"line\">            &lt;tr id=&quot;IsImgNews&quot;&gt;</span><br><span class=\"line\">                &lt;th&gt;上传图片&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;imgUrl&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;内容&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;Content&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var Img;</span><br><span class=\"line\">var editor;</span><br><span class=\"line\">var editUI = &#123;</span><br><span class=\"line\">    setForm: function (id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var E = window.wangEditor;</span><br><span class=\"line\">        editor = new E(&apos;#Content&apos;);</span><br><span class=\"line\">        editor.customConfig = com.editor.customConfig;</span><br><span class=\"line\">        editor.create();</span><br><span class=\"line\">        E.plugins.init(&#123;</span><br><span class=\"line\">            elem: &apos;#Content&apos;,</span><br><span class=\"line\">            plugins: [&apos;fullscreen&apos;]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例化文件上传</span><br><span class=\"line\">        $(&quot;#imgUrl&quot;).powerWebUpload(&#123;</span><br><span class=\"line\">            uploadType: &apos;img&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(&quot;#fileUrl&quot;).powerWebUpload();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(&apos;#BaseItemId&apos;).combobox(&#123;</span><br><span class=\"line\">            url: com.baseUrl + &apos;/baseItem/GetComBoJson?enCode=NoticeItem&apos;,</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            validType: &quot;comboxValidate[&apos;请选择公告类别&apos;]&quot;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //function changeIsImg(checked) &#123;</span><br><span class=\"line\">        //    if (checked) &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;&apos;);</span><br><span class=\"line\">        //    &#125; else &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;none&apos;);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //$(&apos;#IsImg&apos;).switchbutton(&#123;</span><br><span class=\"line\">        //    onChange: function (checked) &#123;</span><br><span class=\"line\">        //        changeIsImg(checked);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        com.setForm(id, function (data) &#123;</span><br><span class=\"line\">            var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">            if (id) &#123;</span><br><span class=\"line\">                setTimeout(function () &#123;</span><br><span class=\"line\">                    editor.txt.html(data.Content);</span><br><span class=\"line\">                &#125;, 666);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#imgUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpImgFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#fileUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            com.loadSwithButton($(&apos;.layui-layer-content&apos;), data);</span><br><span class=\"line\">            //changeIsImg(data.IsImg);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"具体入门与开发原理可参考此地址\"><a href=\"#具体入门与开发原理可参考此地址\" class=\"headerlink\" title=\"具体入门与开发原理可参考此地址\"></a>具体入门与开发原理可参考此地址</h2><p><a href=\"https://blog.csdn.net/wulex/article/category/7256369/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wulex/article/category/7256369/3</a></p>\n<h2 id=\"abp入门系列\"><a href=\"#abp入门系列\" class=\"headerlink\" title=\"abp入门系列\"></a>abp入门系列</h2><p><a href=\"https://www.jianshu.com/p/a6e9ace79345\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6e9ace79345</a></p>\n<p>我们以通知公告为示例</p>\n<ol>\n<li>首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>TelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItem : FullAuditedEntity</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 公告类别ID</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 标题</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(100)]</span><br><span class=\"line\">       public string Title &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 内容 </span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Content &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       ///  打开次数</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public int Times &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 新增人姓名</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 部门</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 是否置顶</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 置顶时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 发布时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\">       public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 状态</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Status &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 图片地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 附件地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 阅读量+1</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public void NewlyTimes()</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           this.Times++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在此文件夹下把相关权限配置好</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>具体配置如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new SysMenu &#123;  DisplayName = &quot;公告信息管理&quot;, Icon = &quot;icon-standard-date-add&quot;, EnCode = &quot;Plat.NoticeItem&quot;, LinkUrl = &quot;/Plat/NoticeItem/Index&quot;, TypeCode = menu, SortCode = 20 ,</span><br><span class=\"line\">Childrens = new List&lt;SysMenu&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">new SysMenu &#123; DisplayName = &quot;新增公告&quot;, EnCode = &quot;Plat.NoticeItem.Add&quot;, TypeCode = permission, SortCode = 1 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;编辑公告&quot;, EnCode = &quot;Plat.NoticeItem.Edit&quot;, TypeCode = permission, SortCode = 2&#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;删除公告&quot;, EnCode = &quot;Plat.NoticeItem.Delete&quot;, TypeCode = permission, SortCode = 3 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;公告列表&quot;, EnCode = &quot;Plat.NoticeItem.GetGrid&quot;, TypeCode = permission, SortCode = 4 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在EntityFramework的TelSCodeDbContext中增加一行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public virtual IDbSet&lt;NoticeItem&gt; NoticeItem &#123; get; set; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>NoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMap(typeof(NoticeItem))]</span><br><span class=\"line\"> public class NoticeItemInput : EntityDto</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">     [StringLength(100,ErrorMessage = &quot;标题仅限100个字符&quot;)]</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public int Times &#123; get; set; &#125;</span><br><span class=\"line\">     public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">     public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">     public string Status &#123; get; set; &#125;</span><br><span class=\"line\">     public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemListDto 为列表上展示的数据字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItem))]</span><br><span class=\"line\">public class NoticeItemListDto : EntityDto, IHasCreationTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">    public string Content &#123; get; set; &#125;</span><br><span class=\"line\">    public int Times &#123; get; set; &#125;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 回复次数</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public int CommentTimes &#123; get; set; &#125;</span><br><span class=\"line\">    public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">    public DateTime CreationTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">    public string StatusCode &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItemSearchDto : PageDto</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemEnCode &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INoticeItemAppService .cs文件 夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public interface INoticeItemAppService : IUsualCrudAppService&lt;NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">base.DeletePermissionName=&quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\"> base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>在方法名上使用此权限属性配置该方法对应的权限信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br></pre></td></tr></table></figure>\n\n<p>调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NoticeItemAppService : UsualCrudAppService&lt;NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;, INoticeItemAppService</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      #region 构造函数</span><br><span class=\"line\">      private readonly IRepository&lt;NoticeItem&gt; _noticeItemRepository;</span><br><span class=\"line\">      private RoleManager RoleManager;</span><br><span class=\"line\">      private readonly ISqlExecuter _iSqlExecuter;</span><br><span class=\"line\">      public NoticeItemAppService(IRepository&lt;NoticeItem&gt; noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          this._noticeItemRepository = noticeItemRepository;</span><br><span class=\"line\">          _iSqlExecuter = iSqlExecuter;</span><br><span class=\"line\">          RoleManager = roleManager;</span><br><span class=\"line\">          base.DeletePermissionName = &quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\">          base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">          base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">      public override async Task CreateOrUpdate(NoticeItemInput input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          if (input.IsTop)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = null;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          if (input.Status == StatusCode.Submit.ToString())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.DeployTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          await base.CreateOrUpdate(input);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected override IQueryable&lt;NoticeItem&gt; CreateFilteredQuery(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          return base.CreateFilteredQuery(input)</span><br><span class=\"line\">              .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m =&gt; m.Title.Contains(input.Title));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      [AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">      public override EasyUiListResultDto&lt;NoticeItemInput&gt; GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          var rows = this.CreateFilteredQuery(input).OrderBy(r =&gt; r.IsTop).PageEasyUiBy(input).OrderByDescending(r =&gt; r.TopTime).MapTo&lt;List&lt;NoticeItemInput&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          return new EasyUiListResultDto&lt;NoticeItemInput&gt;(input.Total, rows);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class NoticeItemController : TelSCodeControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #region 构造函数</span><br><span class=\"line\">    private readonly INoticeItemAppService _noticeitemAppService;</span><br><span class=\"line\">    private readonly IAbpFileManager _abpFileManager;</span><br><span class=\"line\">    public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._abpFileManager = abpFileManager;</span><br><span class=\"line\">        this._noticeitemAppService = noticeitemAppService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">    #region 视图</span><br><span class=\"line\">    public ActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.Add&quot;, &quot;Plat.NoticeItem.Edit&quot;)]</span><br><span class=\"line\">    public ActionResult CreateOrUpdateModal()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #region 数据</span><br><span class=\"line\">    public async Task&lt;JsonResult&gt; GetInfoForEdit(int id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var output = await _noticeitemAppService.GetInfoForEdit(id);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (id == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            output.CreationUserName = AbpSession.GetLoginName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.FileUrl),</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.ImgUrl),</span><br><span class=\"line\">              output</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">        return Json(noticeItemViewModel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">    public JsonResult GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var gridData = _noticeitemAppService.GetGridByCondition(input);</span><br><span class=\"line\">        return Json(gridData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类<br>在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItemInput))]</span><br><span class=\"line\"> public class NoticeItemViewModel : NoticeItemInput</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpImgFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public NoticeItemViewModel(List&lt;AbpFileOutput&gt; fileUrlOutputs, List&lt;AbpFileOutput&gt; imgFileUrlOutputs, NoticeItemInput noticeItemInput)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         AbpFileOutput = fileUrlOutputs;</span><br><span class=\"line\">         AbpImgFileOutput = imgFileUrlOutputs;</span><br><span class=\"line\"></span><br><span class=\"line\">         noticeItemInput.MapTo(this);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/webuploader/webuploader.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/staticfile/libs/abp.webuploader.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor-plugin.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var gridUI = gridUI ||</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                BaseItemEnCode: $.util.request[&apos;name&apos;] == undefined ? &quot;&quot; : $.util.request[&apos;name&apos;]</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section styles&#123;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/webuploader/webuploader.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/wangEditor/wangEditor-plugin.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    @Html.IncludeStyle(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;easyui-layout&quot; data-options=&quot;fit:true&quot;&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;north&apos;,border:false&quot; style=&quot;height: 54px; overflow: hidden;&quot;&gt;</span><br><span class=\"line\">        &lt;form id=&quot;searchForm&quot;&gt;</span><br><span class=\"line\">            &lt;table class=&quot;kv-table no-border&quot;&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot; style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;Title&quot; id=&quot;Title&quot; class=&quot;easyui-textbox&quot; /&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-search&apos;&quot; onclick=&quot;com.filter(&apos;#searchForm&apos;, &apos;#dgGrid&apos;);&quot;&gt;查询&lt;/a&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-undo&apos;&quot; onclick=&quot;com.clear(&apos;#searchForm&apos;, &apos;#dgGrid&apos;)&quot;&gt;清空&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;center&apos;,border:false&quot;&gt;</span><br><span class=\"line\">        &lt;table id=&quot;dgGrid&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var gridUI = gridUI || &#123;&#125;;</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    var noticeService = abp.services.app.noticeItem;</span><br><span class=\"line\">    var gridUrl = &apos;/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=&apos; + gridUI.BaseItemEnCode;</span><br><span class=\"line\">    var editModalUrl = &apos;/Plat/NoticeItem/CreateOrUpdateModal&apos;;</span><br><span class=\"line\">    var readModalUrl = &apos;/Plat/NoticeItem/ReadModal&apos;;</span><br><span class=\"line\">    var dgGrid, dgGridId = &quot;#dgGrid&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.extend(gridUI,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loadGrid: function () &#123;</span><br><span class=\"line\">                var baseEnCode = &apos;Plat.NoticeItem.&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">                var toolbar = [&#123; text: &quot;刷新&quot;, iconCls: &quot;icon-reload&quot;, handler: function () &#123; com.btnRefresh(dgGridId); &#125; &#125;,</span><br><span class=\"line\">                &#123; text: &quot;新增&quot;, EnCode: baseEnCode + &apos;Add&apos;, iconCls: &quot;icon-add&quot;, handler: gridUI.btnAdd &#125;,</span><br><span class=\"line\">                &#123; text: &quot;编辑&quot;, EnCode: baseEnCode + &apos;Edit&apos;, iconCls: &quot;icon-edit&quot;, handler: gridUI.btnEdit &#125;,</span><br><span class=\"line\">                &#123; text: &quot;删除&quot;, EnCode: baseEnCode + &apos;Delete&apos;, iconCls: &quot;icon-remove&quot;, handler: gridUI.btnDelete &#125;];</span><br><span class=\"line\">                toolbar = com.authorizeButton(toolbar);</span><br><span class=\"line\">                if (gridUI.BaseItemEnCode != &quot;&quot;) &#123;</span><br><span class=\"line\">                    toolbar = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                dgGrid = $(dgGridId).datagrid(&#123;</span><br><span class=\"line\">                    url: gridUrl,</span><br><span class=\"line\">                    toolbar: toolbar,</span><br><span class=\"line\">                    columns: [[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Id&apos;, title: &apos;查看&apos;, width: 20, align: &apos;center&apos;, formatter: function (value, row) &#123;</span><br><span class=\"line\">                                return String.format(&apos;&lt;button class=&quot;btn btn-default btn-xs&quot; type=&quot;button&quot; onclick=&quot;gridUI.showDetails(\\&apos;&#123;0&#125;\\&apos;)&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&apos;, value);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;Title&apos;, title: &apos;标题&apos;, width: 80 &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;BaseItemId&apos;, title: &apos;类别&apos;, width: 80, formatter: function (value) &#123;</span><br><span class=\"line\">                                if (top.clients.dataItems[&apos;NoticeItem&apos;]) &#123;</span><br><span class=\"line\">                                    return top.clients.dataItems[&apos;NoticeItem&apos;][value];</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    return &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;CreationUserName&apos;, title: &apos;发布人姓名&apos;, width: 160 &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;IsTop&apos;, title: &apos;是否置顶&apos;, width: 50, formatter: com.formatYes &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Status&apos;, title: &apos;状态&apos;, width: 50, formatter: function (value) &#123;</span><br><span class=\"line\">                                var objMsg = &#123;</span><br><span class=\"line\">                                    &quot;primary&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;发布&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;Submit&apos;]</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    &quot;info&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;暂存&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;TempSave&apos;]</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                                return com.formatMsg(value, objMsg);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            editInfo: function (title, icon, id) &#123;</span><br><span class=\"line\">                var pDialog = com.dialog(&#123;</span><br><span class=\"line\">                    title: title,</span><br><span class=\"line\">                    width: &apos;100%&apos;,</span><br><span class=\"line\">                    height: &apos;100%&apos;,</span><br><span class=\"line\">                    href: editModalUrl,</span><br><span class=\"line\">                    iconCls: icon,</span><br><span class=\"line\">                    buttons: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            text: &apos;发布&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-ok&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;Submit&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            text: &apos;暂存&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-save&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;TempSave&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    onLoad: function () &#123;</span><br><span class=\"line\">                        editUI.setForm(id);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            showDetails: function (id) &#123;</span><br><span class=\"line\">                com.dialog(&#123;</span><br><span class=\"line\">                    title: &quot;详情&quot;,</span><br><span class=\"line\">                    width: 1500,</span><br><span class=\"line\">                    height: 800,</span><br><span class=\"line\">                    href: readModalUrl,</span><br><span class=\"line\">                    queryParams: &#123;</span><br><span class=\"line\">                        id: id</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnAdd: function () &#123;</span><br><span class=\"line\">                gridUI.editInfo(&apos;新增公告&apos;, &apos;icon-add&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnEdit: function () &#123;</span><br><span class=\"line\">                com.edit(dgGridId, function (id) &#123;</span><br><span class=\"line\">                    gridUI.editInfo(&quot;编辑公告&quot;, &apos;icon-edit&apos;, id);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnDelete: function () &#123;</span><br><span class=\"line\">                com.deleted(noticeService, dgGridId);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            submit: function (pDialog, status) &#123;</span><br><span class=\"line\">                var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">                var isValid = f.form(&apos;validate&apos;);</span><br><span class=\"line\">                if (!isValid) &#123;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var objForm = f.formSerialize();</span><br><span class=\"line\">                objForm.Content = editor.txt.html();</span><br><span class=\"line\">                objForm.Status = status;</span><br><span class=\"line\"></span><br><span class=\"line\">                com.setBusy(pDialog, true);</span><br><span class=\"line\">                noticeService.createOrUpdate(objForm, &#123; showMsg: true &#125;)</span><br><span class=\"line\">                    .done(function () &#123;</span><br><span class=\"line\">                        com.btnRefresh();</span><br><span class=\"line\">                        pDialog.dialog(&apos;close&apos;);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .always(function () &#123;</span><br><span class=\"line\">                        com.setBusy(pDialog, false);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(function () &#123;</span><br><span class=\"line\">        gridUI.loadGrid();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    Layout = null;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告管理&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Html.IncludeScript(&quot;/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js&quot;)</span><br><span class=\"line\">&lt;div class=&quot;layui-layer-content&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;editForm&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;kv-table&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;&lt;span class=&quot;red&quot;&gt;*&lt;/span&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Title&quot; name=&quot;Title&quot; type=&quot;text&quot; class=&quot;easyui-textbox&quot; data-options=&quot;required:true&quot; style=&quot;width:569px&quot; /&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Id&quot; name=&quot;Id&quot; type=&quot;hidden&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; id=&quot;CreationUserName&quot; name=&quot;CreationUserName&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;BaseItemCode&quot; value=&quot;&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;置顶&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; style=&quot;width:215px&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsTop&quot; id=&quot;IsTop&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;公告类别&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;BaseItemId&quot; id=&quot;BaseItemId&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;附件&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;fileUrl&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            @*&lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot;&gt;是否图片新闻&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;*@</span><br><span class=\"line\">            &lt;tr id=&quot;IsImgNews&quot;&gt;</span><br><span class=\"line\">                &lt;th&gt;上传图片&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;imgUrl&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;内容&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;Content&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var Img;</span><br><span class=\"line\">var editor;</span><br><span class=\"line\">var editUI = &#123;</span><br><span class=\"line\">    setForm: function (id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var E = window.wangEditor;</span><br><span class=\"line\">        editor = new E(&apos;#Content&apos;);</span><br><span class=\"line\">        editor.customConfig = com.editor.customConfig;</span><br><span class=\"line\">        editor.create();</span><br><span class=\"line\">        E.plugins.init(&#123;</span><br><span class=\"line\">            elem: &apos;#Content&apos;,</span><br><span class=\"line\">            plugins: [&apos;fullscreen&apos;]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例化文件上传</span><br><span class=\"line\">        $(&quot;#imgUrl&quot;).powerWebUpload(&#123;</span><br><span class=\"line\">            uploadType: &apos;img&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(&quot;#fileUrl&quot;).powerWebUpload();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(&apos;#BaseItemId&apos;).combobox(&#123;</span><br><span class=\"line\">            url: com.baseUrl + &apos;/baseItem/GetComBoJson?enCode=NoticeItem&apos;,</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            validType: &quot;comboxValidate[&apos;请选择公告类别&apos;]&quot;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //function changeIsImg(checked) &#123;</span><br><span class=\"line\">        //    if (checked) &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;&apos;);</span><br><span class=\"line\">        //    &#125; else &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;none&apos;);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //$(&apos;#IsImg&apos;).switchbutton(&#123;</span><br><span class=\"line\">        //    onChange: function (checked) &#123;</span><br><span class=\"line\">        //        changeIsImg(checked);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        com.setForm(id, function (data) &#123;</span><br><span class=\"line\">            var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">            if (id) &#123;</span><br><span class=\"line\">                setTimeout(function () &#123;</span><br><span class=\"line\">                    editor.txt.html(data.Content);</span><br><span class=\"line\">                &#125;, 666);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#imgUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpImgFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#fileUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            com.loadSwithButton($(&apos;.layui-layer-content&apos;), data);</span><br><span class=\"line\">            //changeIsImg(data.IsImg);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","popularPost_tmp_gaData":{"updated":"Tue Oct 08 2019 12:21:13 GMT+0800 (GMT+08:00)","title":"ABP使用文档","path":"2019/03/12/abp/ABP-How-To-Use/","eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","excerpt":"旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。","date":"2019-03-12T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"lin-cms-dotnet-core 全局敏感词处理","date":"2019-12-03T04:44:22.000Z","_content":"\n## 全局敏感词处理\n\n基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。\n- [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86)\n<!-- more -->\n一共二种方式\n\n## 1.ToolGood.Words\n类库配合敏感库\n-  [ToolGood.Words](https://github.com/toolgood/ToolGood.Words)\n\n简单用法\n\n```\n[Fact]\npublic void IssuesTest_17()\n{\n    var illegalWordsSearch = new IllegalWordsSearch();\n    string s = \"中国|zg人|abc\";\n    illegalWordsSearch.SetKeywords(s.Split('|'));\n    var str = illegalWordsSearch.Replace(\"我是中美国人厉害中国完美ａｂｃddb好的\", '*');\n\n    Assert.Equal(\"我是中美国人厉害**完美***ddb好的\", str);\n}\n```\n配合敏感库文本文件，写的工具类\n\n\n二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对\n- [https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt](https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt)\n- [https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt](https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt)\n\n```\npublic class ToolGoodUtils\n{\n    //敏感库只要这二个文件存在即可\n    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal\n    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n    private const string InfoPath = \"wwwroot/_Illegal/IllegalInfo.txt\";\n    private const string BitPath = \"wwwroot/_Illegal/IllegalBit.iws\";\n\n    private static IllegalWordsSearch _search;\n    /// <summary>\n    /// 本地敏感库,文件修改后，重新创建缓存Bit\n    /// </summary>\n    /// <returns></returns>\n    public static IllegalWordsSearch GetIllegalWordsSearch()\n    {\n        if (_search == null)\n        {\n            string ipath = Path.GetFullPath(InfoPath);\n            if (File.Exists(ipath) == false)\n            {\n                _search = CreateIllegalWordsSearch();\n            }\n            else\n            {\n                var texts = File.ReadAllText(ipath).Split('|');\n                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[0] ||\n                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[1]\n                )\n                {\n                    _search = CreateIllegalWordsSearch();\n                }\n                else\n                {\n                    var s = new IllegalWordsSearch();\n                    s.Load(Path.GetFullPath(BitPath));\n                    _search = s;\n                }\n            }\n        }\n        return _search;\n    }\n\n    private static IllegalWordsSearch CreateIllegalWordsSearch()\n    {\n        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        var words = new List<string>();\n        foreach (var item in words1)\n        {\n            words.Add(item.Trim());\n        }\n        foreach (var item in words2)\n        {\n            words.Add(item.Trim());\n        }\n\n        var search = new IllegalWordsSearch();\n        search.SetKeywords(words);\n\n        search.Save(Path.GetFullPath(BitPath));\n\n        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"|\"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        File.WriteAllText(Path.GetFullPath(InfoPath), text);\n\n        return search;\n    }\n}\n```\n## 2. 循环使用Replace\n方案：通过维护敏感库，循环replace \n大佬分享给我的，稍微改成了从文件中获取敏感字。\n\n\n```\npublic static class StopWords\n{\n\n    static readonly ConcurrentDictionary<string, bool> FunNlpDataSensitive = new ConcurrentDictionary<string, bool>();\n    static readonly ConcurrentDictionary<int, string> ReplaceNewValue = new ConcurrentDictionary<int, string>();\n\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n\n    static StopWords()\n    {\n        LoadDataFromFile();\n    }\n\n    public static void LoadDataFromFile()\n    {\n        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        LoadDataFromText(words1);\n        LoadDataFromText(words2);\n    }\n\n\n    public static void LoadDataFromText(string text)\n    {\n        int oldcount = FunNlpDataSensitive.Count;\n        foreach (string wd in text.Split('\\n'))\n        {\n            string keykey = wd.Trim().Trim('\\r', '\\n').Trim();\n            if (string.IsNullOrEmpty(keykey)) continue;\n            FunNlpDataSensitive.TryAdd(keykey, true);\n            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)\n                ReplaceNewValue.TryAdd(keykey.Length, \"\".PadRight(keykey.Length, '*'));\n        }\n        Console.WriteLine($\"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}\");\n    }\n\n\n    /// <summary>\n    /// 替换所有敏感词为 *\n    /// </summary>\n    /// <param name=\"that\"></param>\n    /// <returns></returns>\n    public static string ReplaceStopWords(this string that)\n    {\n        foreach (var wd in FunNlpDataSensitive.Keys)\n            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : \"\".PadRight(wd.Length, '*'));\n        return that;\n    }\n}\n```\n\n## FreeSql全局处理敏感词\n使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。\n```\n//敏感词处理\nIllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();\n\nFsql.Aop.AuditValue += (s, e) =>\n{\n    if (e.Column.CsType == typeof(string) && e.Value != null)\n    {\n        string oldVal = (string)e.Value;\n        string newVal = illegalWords.Replace(oldVal);\n        //第二种处理敏感词的方式\n        //string newVal = oldVal.ReplaceStopWords();\n        if (newVal != oldVal)\n        {\n            e.Value = newVal;\n        }\n    }\n};\n```\n\n","source":"_posts/lin-cms-dotnetcore/StopWords.md","raw":"---\ntitle: lin-cms-dotnet-core 全局敏感词处理\ndate: 2019-12-3 12:44:22\ntags:\n- 开源\n- .NET Core\n- lin-cms\ncategory:\n- lin-cms-dotnetcore\n---\n\n## 全局敏感词处理\n\n基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。\n- [https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86](https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86)\n<!-- more -->\n一共二种方式\n\n## 1.ToolGood.Words\n类库配合敏感库\n-  [ToolGood.Words](https://github.com/toolgood/ToolGood.Words)\n\n简单用法\n\n```\n[Fact]\npublic void IssuesTest_17()\n{\n    var illegalWordsSearch = new IllegalWordsSearch();\n    string s = \"中国|zg人|abc\";\n    illegalWordsSearch.SetKeywords(s.Split('|'));\n    var str = illegalWordsSearch.Replace(\"我是中美国人厉害中国完美ａｂｃddb好的\", '*');\n\n    Assert.Equal(\"我是中美国人厉害**完美***ddb好的\", str);\n}\n```\n配合敏感库文本文件，写的工具类\n\n\n二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对\n- [https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt](https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt)\n- [https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt](https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt)\n\n```\npublic class ToolGoodUtils\n{\n    //敏感库只要这二个文件存在即可\n    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal\n    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n    private const string InfoPath = \"wwwroot/_Illegal/IllegalInfo.txt\";\n    private const string BitPath = \"wwwroot/_Illegal/IllegalBit.iws\";\n\n    private static IllegalWordsSearch _search;\n    /// <summary>\n    /// 本地敏感库,文件修改后，重新创建缓存Bit\n    /// </summary>\n    /// <returns></returns>\n    public static IllegalWordsSearch GetIllegalWordsSearch()\n    {\n        if (_search == null)\n        {\n            string ipath = Path.GetFullPath(InfoPath);\n            if (File.Exists(ipath) == false)\n            {\n                _search = CreateIllegalWordsSearch();\n            }\n            else\n            {\n                var texts = File.ReadAllText(ipath).Split('|');\n                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[0] ||\n                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[1]\n                )\n                {\n                    _search = CreateIllegalWordsSearch();\n                }\n                else\n                {\n                    var s = new IllegalWordsSearch();\n                    s.Load(Path.GetFullPath(BitPath));\n                    _search = s;\n                }\n            }\n        }\n        return _search;\n    }\n\n    private static IllegalWordsSearch CreateIllegalWordsSearch()\n    {\n        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        var words = new List<string>();\n        foreach (var item in words1)\n        {\n            words.Add(item.Trim());\n        }\n        foreach (var item in words2)\n        {\n            words.Add(item.Trim());\n        }\n\n        var search = new IllegalWordsSearch();\n        search.SetKeywords(words);\n\n        search.Save(Path.GetFullPath(BitPath));\n\n        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"|\"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        File.WriteAllText(Path.GetFullPath(InfoPath), text);\n\n        return search;\n    }\n}\n```\n## 2. 循环使用Replace\n方案：通过维护敏感库，循环replace \n大佬分享给我的，稍微改成了从文件中获取敏感字。\n\n\n```\npublic static class StopWords\n{\n\n    static readonly ConcurrentDictionary<string, bool> FunNlpDataSensitive = new ConcurrentDictionary<string, bool>();\n    static readonly ConcurrentDictionary<int, string> ReplaceNewValue = new ConcurrentDictionary<int, string>();\n\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n\n    static StopWords()\n    {\n        LoadDataFromFile();\n    }\n\n    public static void LoadDataFromFile()\n    {\n        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        LoadDataFromText(words1);\n        LoadDataFromText(words2);\n    }\n\n\n    public static void LoadDataFromText(string text)\n    {\n        int oldcount = FunNlpDataSensitive.Count;\n        foreach (string wd in text.Split('\\n'))\n        {\n            string keykey = wd.Trim().Trim('\\r', '\\n').Trim();\n            if (string.IsNullOrEmpty(keykey)) continue;\n            FunNlpDataSensitive.TryAdd(keykey, true);\n            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)\n                ReplaceNewValue.TryAdd(keykey.Length, \"\".PadRight(keykey.Length, '*'));\n        }\n        Console.WriteLine($\"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}\");\n    }\n\n\n    /// <summary>\n    /// 替换所有敏感词为 *\n    /// </summary>\n    /// <param name=\"that\"></param>\n    /// <returns></returns>\n    public static string ReplaceStopWords(this string that)\n    {\n        foreach (var wd in FunNlpDataSensitive.Keys)\n            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : \"\".PadRight(wd.Length, '*'));\n        return that;\n    }\n}\n```\n\n## FreeSql全局处理敏感词\n使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。\n```\n//敏感词处理\nIllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();\n\nFsql.Aop.AuditValue += (s, e) =>\n{\n    if (e.Column.CsType == typeof(string) && e.Value != null)\n    {\n        string oldVal = (string)e.Value;\n        string newVal = illegalWords.Replace(oldVal);\n        //第二种处理敏感词的方式\n        //string newVal = oldVal.ReplaceStopWords();\n        if (newVal != oldVal)\n        {\n            e.Value = newVal;\n        }\n    }\n};\n```\n\n","slug":"lin-cms-dotnetcore/StopWords","published":1,"updated":"2019-12-09T11:19:22.542Z","_id":"ck3yccozv0000t4uxqfjrqix9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"全局敏感词处理\"><a href=\"#全局敏感词处理\" class=\"headerlink\" title=\"全局敏感词处理\"></a>全局敏感词处理</h2><p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86</a><a id=\"more\"></a>\n一共二种方式</li>\n</ul>\n<h2 id=\"1-ToolGood-Words\"><a href=\"#1-ToolGood-Words\" class=\"headerlink\" title=\"1.ToolGood.Words\"></a>1.ToolGood.Words</h2><p>类库配合敏感库</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words\" target=\"_blank\" rel=\"noopener\">ToolGood.Words</a></li>\n</ul>\n<p>简单用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Fact]</span><br><span class=\"line\">public void IssuesTest_17()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var illegalWordsSearch = new IllegalWordsSearch();</span><br><span class=\"line\">    string s = &quot;中国|zg人|abc&quot;;</span><br><span class=\"line\">    illegalWordsSearch.SetKeywords(s.Split(&apos;|&apos;));</span><br><span class=\"line\">    var str = illegalWordsSearch.Replace(&quot;我是中美国人厉害中国完美ａｂｃddb好的&quot;, &apos;*&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.Equal(&quot;我是中美国人厉害**完美***ddb好的&quot;, str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配合敏感库文本文件，写的工具类</p>\n<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ToolGoodUtils</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //敏感库只要这二个文件存在即可</span><br><span class=\"line\">    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal</span><br><span class=\"line\">    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制</span><br><span class=\"line\">    private const string KeywordsPath = &quot;wwwroot/_Illegal/IllegalKeywords.txt&quot;;</span><br><span class=\"line\">    private const string UrlsPath = &quot;wwwroot/_Illegal/IllegalUrls.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private const string InfoPath = &quot;wwwroot/_Illegal/IllegalInfo.txt&quot;;</span><br><span class=\"line\">    private const string BitPath = &quot;wwwroot/_Illegal/IllegalBit.iws&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static IllegalWordsSearch _search;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 本地敏感库,文件修改后，重新创建缓存Bit</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    public static IllegalWordsSearch GetIllegalWordsSearch()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (_search == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string ipath = Path.GetFullPath(InfoPath);</span><br><span class=\"line\">            if (File.Exists(ipath) == false)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _search = CreateIllegalWordsSearch();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                var texts = File.ReadAllText(ipath).Split(&apos;|&apos;);</span><br><span class=\"line\">                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) !=</span><br><span class=\"line\">                    texts[0] ||</span><br><span class=\"line\">                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) !=</span><br><span class=\"line\">                    texts[1]</span><br><span class=\"line\">                )</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _search = CreateIllegalWordsSearch();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    var s = new IllegalWordsSearch();</span><br><span class=\"line\">                    s.Load(Path.GetFullPath(BitPath));</span><br><span class=\"line\">                    _search = s;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return _search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static IllegalWordsSearch CreateIllegalWordsSearch()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);</span><br><span class=\"line\">        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);</span><br><span class=\"line\">        var words = new List&lt;string&gt;();</span><br><span class=\"line\">        foreach (var item in words1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            words.Add(item.Trim());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach (var item in words2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            words.Add(item.Trim());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var search = new IllegalWordsSearch();</span><br><span class=\"line\">        search.SetKeywords(words);</span><br><span class=\"line\"></span><br><span class=\"line\">        search.Save(Path.GetFullPath(BitPath));</span><br><span class=\"line\"></span><br><span class=\"line\">        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) + &quot;|&quot;+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">        File.WriteAllText(Path.GetFullPath(InfoPath), text);</span><br><span class=\"line\"></span><br><span class=\"line\">        return search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-循环使用Replace\"><a href=\"#2-循环使用Replace\" class=\"headerlink\" title=\"2. 循环使用Replace\"></a>2. 循环使用Replace</h2><p>方案：通过维护敏感库，循环replace<br>大佬分享给我的，稍微改成了从文件中获取敏感字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class StopWords</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static readonly ConcurrentDictionary&lt;string, bool&gt; FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool&gt;();</span><br><span class=\"line\">    static readonly ConcurrentDictionary&lt;int, string&gt; ReplaceNewValue = new ConcurrentDictionary&lt;int, string&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    private const string KeywordsPath = &quot;wwwroot/_Illegal/IllegalKeywords.txt&quot;;</span><br><span class=\"line\">    private const string UrlsPath = &quot;wwwroot/_Illegal/IllegalUrls.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    static StopWords()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LoadDataFromFile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void LoadDataFromFile()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);</span><br><span class=\"line\">        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);</span><br><span class=\"line\">        LoadDataFromText(words1);</span><br><span class=\"line\">        LoadDataFromText(words2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void LoadDataFromText(string text)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int oldcount = FunNlpDataSensitive.Count;</span><br><span class=\"line\">        foreach (string wd in text.Split(&apos;\\n&apos;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string keykey = wd.Trim().Trim(&apos;\\r&apos;, &apos;\\n&apos;).Trim();</span><br><span class=\"line\">            if (string.IsNullOrEmpty(keykey)) continue;</span><br><span class=\"line\">            FunNlpDataSensitive.TryAdd(keykey, true);</span><br><span class=\"line\">            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)</span><br><span class=\"line\">                ReplaceNewValue.TryAdd(keykey.Length, &quot;&quot;.PadRight(keykey.Length, &apos;*&apos;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine($&quot;敏感词加载完毕，增加数量：&#123;FunNlpDataSensitive.Count - oldcount&#125;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 替换所有敏感词为 *</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;that&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    public static string ReplaceStopWords(this string that)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (var wd in FunNlpDataSensitive.Keys)</span><br><span class=\"line\">            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : &quot;&quot;.PadRight(wd.Length, &apos;*&apos;));</span><br><span class=\"line\">        return that;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FreeSql全局处理敏感词\"><a href=\"#FreeSql全局处理敏感词\" class=\"headerlink\" title=\"FreeSql全局处理敏感词\"></a>FreeSql全局处理敏感词</h2><p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//敏感词处理</span><br><span class=\"line\">IllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();</span><br><span class=\"line\"></span><br><span class=\"line\">Fsql.Aop.AuditValue += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string oldVal = (string)e.Value;</span><br><span class=\"line\">        string newVal = illegalWords.Replace(oldVal);</span><br><span class=\"line\">        //第二种处理敏感词的方式</span><br><span class=\"line\">        //string newVal = oldVal.ReplaceStopWords();</span><br><span class=\"line\">        if (newVal != oldVal)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.Value = newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"全局敏感词处理\"><a href=\"#全局敏感词处理\" class=\"headerlink\" title=\"全局敏感词处理\"></a>全局敏感词处理</h2><p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86</a>","more":"一共二种方式</li>\n</ul>\n<h2 id=\"1-ToolGood-Words\"><a href=\"#1-ToolGood-Words\" class=\"headerlink\" title=\"1.ToolGood.Words\"></a>1.ToolGood.Words</h2><p>类库配合敏感库</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words\" target=\"_blank\" rel=\"noopener\">ToolGood.Words</a></li>\n</ul>\n<p>简单用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Fact]</span><br><span class=\"line\">public void IssuesTest_17()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var illegalWordsSearch = new IllegalWordsSearch();</span><br><span class=\"line\">    string s = &quot;中国|zg人|abc&quot;;</span><br><span class=\"line\">    illegalWordsSearch.SetKeywords(s.Split(&apos;|&apos;));</span><br><span class=\"line\">    var str = illegalWordsSearch.Replace(&quot;我是中美国人厉害中国完美ａｂｃddb好的&quot;, &apos;*&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.Equal(&quot;我是中美国人厉害**完美***ddb好的&quot;, str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配合敏感库文本文件，写的工具类</p>\n<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ToolGoodUtils</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //敏感库只要这二个文件存在即可</span><br><span class=\"line\">    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal</span><br><span class=\"line\">    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制</span><br><span class=\"line\">    private const string KeywordsPath = &quot;wwwroot/_Illegal/IllegalKeywords.txt&quot;;</span><br><span class=\"line\">    private const string UrlsPath = &quot;wwwroot/_Illegal/IllegalUrls.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private const string InfoPath = &quot;wwwroot/_Illegal/IllegalInfo.txt&quot;;</span><br><span class=\"line\">    private const string BitPath = &quot;wwwroot/_Illegal/IllegalBit.iws&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static IllegalWordsSearch _search;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 本地敏感库,文件修改后，重新创建缓存Bit</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    public static IllegalWordsSearch GetIllegalWordsSearch()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (_search == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string ipath = Path.GetFullPath(InfoPath);</span><br><span class=\"line\">            if (File.Exists(ipath) == false)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _search = CreateIllegalWordsSearch();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                var texts = File.ReadAllText(ipath).Split(&apos;|&apos;);</span><br><span class=\"line\">                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) !=</span><br><span class=\"line\">                    texts[0] ||</span><br><span class=\"line\">                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) !=</span><br><span class=\"line\">                    texts[1]</span><br><span class=\"line\">                )</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _search = CreateIllegalWordsSearch();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    var s = new IllegalWordsSearch();</span><br><span class=\"line\">                    s.Load(Path.GetFullPath(BitPath));</span><br><span class=\"line\">                    _search = s;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return _search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static IllegalWordsSearch CreateIllegalWordsSearch()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);</span><br><span class=\"line\">        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);</span><br><span class=\"line\">        var words = new List&lt;string&gt;();</span><br><span class=\"line\">        foreach (var item in words1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            words.Add(item.Trim());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach (var item in words2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            words.Add(item.Trim());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var search = new IllegalWordsSearch();</span><br><span class=\"line\">        search.SetKeywords(words);</span><br><span class=\"line\"></span><br><span class=\"line\">        search.Save(Path.GetFullPath(BitPath));</span><br><span class=\"line\"></span><br><span class=\"line\">        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;) + &quot;|&quot;+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">        File.WriteAllText(Path.GetFullPath(InfoPath), text);</span><br><span class=\"line\"></span><br><span class=\"line\">        return search;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-循环使用Replace\"><a href=\"#2-循环使用Replace\" class=\"headerlink\" title=\"2. 循环使用Replace\"></a>2. 循环使用Replace</h2><p>方案：通过维护敏感库，循环replace<br>大佬分享给我的，稍微改成了从文件中获取敏感字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class StopWords</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static readonly ConcurrentDictionary&lt;string, bool&gt; FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool&gt;();</span><br><span class=\"line\">    static readonly ConcurrentDictionary&lt;int, string&gt; ReplaceNewValue = new ConcurrentDictionary&lt;int, string&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    private const string KeywordsPath = &quot;wwwroot/_Illegal/IllegalKeywords.txt&quot;;</span><br><span class=\"line\">    private const string UrlsPath = &quot;wwwroot/_Illegal/IllegalUrls.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    static StopWords()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LoadDataFromFile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void LoadDataFromFile()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);</span><br><span class=\"line\">        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);</span><br><span class=\"line\">        LoadDataFromText(words1);</span><br><span class=\"line\">        LoadDataFromText(words2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void LoadDataFromText(string text)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int oldcount = FunNlpDataSensitive.Count;</span><br><span class=\"line\">        foreach (string wd in text.Split(&apos;\\n&apos;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string keykey = wd.Trim().Trim(&apos;\\r&apos;, &apos;\\n&apos;).Trim();</span><br><span class=\"line\">            if (string.IsNullOrEmpty(keykey)) continue;</span><br><span class=\"line\">            FunNlpDataSensitive.TryAdd(keykey, true);</span><br><span class=\"line\">            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)</span><br><span class=\"line\">                ReplaceNewValue.TryAdd(keykey.Length, &quot;&quot;.PadRight(keykey.Length, &apos;*&apos;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine($&quot;敏感词加载完毕，增加数量：&#123;FunNlpDataSensitive.Count - oldcount&#125;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 替换所有敏感词为 *</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;that&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">    public static string ReplaceStopWords(this string that)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foreach (var wd in FunNlpDataSensitive.Keys)</span><br><span class=\"line\">            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : &quot;&quot;.PadRight(wd.Length, &apos;*&apos;));</span><br><span class=\"line\">        return that;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FreeSql全局处理敏感词\"><a href=\"#FreeSql全局处理敏感词\" class=\"headerlink\" title=\"FreeSql全局处理敏感词\"></a>FreeSql全局处理敏感词</h2><p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//敏感词处理</span><br><span class=\"line\">IllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();</span><br><span class=\"line\"></span><br><span class=\"line\">Fsql.Aop.AuditValue += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string oldVal = (string)e.Value;</span><br><span class=\"line\">        string newVal = illegalWords.Replace(oldVal);</span><br><span class=\"line\">        //第二种处理敏感词的方式</span><br><span class=\"line\">        //string newVal = oldVal.ReplaceStopWords();</span><br><span class=\"line\">        if (newVal != oldVal)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.Value = newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Dec 09 2019 19:19:22 GMT+0800 (GMT+08:00)","title":"lin-cms-dotnet-core 全局敏感词处理","path":"2019/12/03/lin-cms-dotnetcore/StopWords/","eyeCatchImage":null,"excerpt":"<h2 id=\"全局敏感词处理\"><a href=\"#全局敏感词处理\" class=\"headerlink\" title=\"全局敏感词处理\"></a>全局敏感词处理</h2><p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-%E6%95%8F%E6%84%9F%E8%AF%8D%E5%A4%84%E7%90%86</a>","date":"2019-12-03T04:44:22.000Z","pv":0,"totalPV":0,"categories":"lin-cms-dotnetcore","tags":[".NET Core","开源","lin-cms"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"lin-cms-dotnetcore功能模块的设计","date":"2019-11-24T04:44:22.000Z","_content":"\n# 功能模块的设计\n\n## 基础权限模块\n- 用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名\n    - [x] 注册/登录\n    - [x] 上传头像\n    - [x] 修改密码\n    - [x] 用户基本信息修改\n    - [x] 用户增删改，配置分组\n- 绑定第三方账号\n    - [x] GitHub登录\n    - [ ] QQ 登录\n-  分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改\n    - [x] 分组增删改\n    - [x] 组别配置权限\n- 文件管理\n    - [x] 本地文件上传\n    - [x] 七牛云存储\n    - [ ] 文件去重，秒传\n- 系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息\n    - [x] 记录系统请求的日志\n    - [ ] 异常日志\n- 设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）\n    - [x] 设置新增修改删除\n    - [x] 所有设置\n    \n比如存某用户选择的是markdown还是富文本。\n```\nname=\"Article.Editor\",\nvalue=\"markdown\" 或 \"富文本\"，\nprovider_name为\"User\",\nprovider_key为用户Id\n```\n或存储七牛云的某一个配置\n```\nname=\"Qiniu.AK\",\nvalue=\"asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc\" ，\nprovider_name为\"Qiniu\"或自己定义的字符串\nprovider_key为空\n```\n \n\n## cms 管理员维护模块\n\n- 标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。\n    - [x] 标签增删改\n    - [x] 标签列表，禁用\n- 技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签\n    - [x] 技术频道增删改\n    - [x] 列表、禁用\n-  随笔管理：\n   - [x] 审核随笔/拉黑\n-  评论管理\n   - [x] 后台审核通过/拉黑\n   - [x] 管理员删除评论\n- 字典管理\n   - [x] 字典类别管理\n   - [x] 字典管理：如随笔类型（原创、转载、翻译）\n\n## cms 用户端模块 \n- 技术频道\n    - [x] 首页展示技术频道\n    - [x] 选择技术频道后，可再根据标签查询文章\n- 分类专栏管理:发布随笔时可选择单个分类。\n    - [x] 分类增删改(随笔数量、图片、名称、排序)\n    - [x] 分类列表，仅查看、编辑自己创建的分类专栏\n- 标签：统计每个标签下多少个文章、多少人关注\n    - [x] 标签列表\n    - [x] 无限加载\n    - [x] 最新/最热 根据标签名称模糊查询\n    - [x] 已关注的标签\n    - [x] 热门标签\n- 随笔\n   - [x] 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量\n   - [x] 列表无限加载，按标签查询随笔\n   - [x] 点赞随笔\n   - 随笔详情页\n        - [x] 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；\n        - [x] 作者介绍：头像，昵称，签名，随笔数；\n        - [x] 展示文章类型：原创、转载、翻译\n        - [ ]  相关文章\n        - [ ]  推荐文章\n- 评论\n   - [ ] 用户关闭评论时，无法对随笔进行评论\n   - [ ] 评论随笔(内容支持超链接、emoji)\n   - [x] 删除自己的评论\n   - [x] 点赞评论\n   - [x] 回复评论\n-  关注\n   - [x] 关注/取消关注用户\n   - [x] 关注/取消关注标签\n   \n- 个人主页\n    - 随笔\n        - [x] 用户专栏分类展示\n        - [x] 最新发布的随笔\n    - 关注\n        - [x] 关注的人\n        - [x] 粉丝\n        - [x] 关注的标签\n- 设置\n    - 个人主页设置\n        - [x] 个人资料更新\n    - 安全设置\n        - [x] 密码修改\n    - 博客设置\n        - [x] 默认编辑器设置(markdown/富文本)\n- 消息\n    - [x] 点赞随笔、点赞评论\n    - [x] 评论随笔、回复评论\n    - [x] 用户关注\n### 脑图分享\n\n[http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1](http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1)\n\n### 分组\n 分为三种\n \n ```\nid  name        info\n1\tAdmin\t    系统管理员\n2\tCmsAdmin\t内容管理员\n3\tUser\t    普通用户\n ```\n \n### 审计日志\n大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 **FullAduitEntity**  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity\\<Guid\\>,即可改变主键类型，默认LinUser表主键long，保持**create_user_id**,**delete_user_id**,**update_user_id**都与LinUser的主键相同\n```\n\nid\t                bigint\ncreate_user_id  \tbigint\ncreate_time\t        datetime\nis_deleted\t        bit\ndelete_user_id  \tbigint\ndelete_time\t        datetime\nupdate_user_id\t    bigint\nupdate_time\t        datetime\n\n\n```\n\n## 0.3.0版本权限功能升级\n为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：\n\n1. lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。\n2. lin_group_permission  分组权限表，用于分组与权限表的关联\n3. lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。\n4. lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录\n\n\n## lin-cms 开源地址分享\n\n- 后端接口 [https://github.com/luoyunchong/lin-cms-dotnetcore](https://github.com/luoyunchong/lin-cms-dotnetcore)\n- 管理后台UI [https://github.com/luoyunchong/lin-cms-vue](https://github.com/luoyunchong/lin-cms-vue)\n- 前端UI[https://github.com/luoyunchong/lin-cms-vvlog](https://github.com/luoyunchong/lin-cms-vvlog)\n\n\n","source":"_posts/lin-cms-dotnetcore/design.md","raw":"---\ntitle: lin-cms-dotnetcore功能模块的设计\ndate: 2019-11-24 12:44:22\ntags:\n- 开源\n- .NET Core\n- lin-cms\ncategory:\n- lin-cms-dotnetcore\n---\n\n# 功能模块的设计\n\n## 基础权限模块\n- 用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名\n    - [x] 注册/登录\n    - [x] 上传头像\n    - [x] 修改密码\n    - [x] 用户基本信息修改\n    - [x] 用户增删改，配置分组\n- 绑定第三方账号\n    - [x] GitHub登录\n    - [ ] QQ 登录\n-  分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改\n    - [x] 分组增删改\n    - [x] 组别配置权限\n- 文件管理\n    - [x] 本地文件上传\n    - [x] 七牛云存储\n    - [ ] 文件去重，秒传\n- 系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息\n    - [x] 记录系统请求的日志\n    - [ ] 异常日志\n- 设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）\n    - [x] 设置新增修改删除\n    - [x] 所有设置\n    \n比如存某用户选择的是markdown还是富文本。\n```\nname=\"Article.Editor\",\nvalue=\"markdown\" 或 \"富文本\"，\nprovider_name为\"User\",\nprovider_key为用户Id\n```\n或存储七牛云的某一个配置\n```\nname=\"Qiniu.AK\",\nvalue=\"asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc\" ，\nprovider_name为\"Qiniu\"或自己定义的字符串\nprovider_key为空\n```\n \n\n## cms 管理员维护模块\n\n- 标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。\n    - [x] 标签增删改\n    - [x] 标签列表，禁用\n- 技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签\n    - [x] 技术频道增删改\n    - [x] 列表、禁用\n-  随笔管理：\n   - [x] 审核随笔/拉黑\n-  评论管理\n   - [x] 后台审核通过/拉黑\n   - [x] 管理员删除评论\n- 字典管理\n   - [x] 字典类别管理\n   - [x] 字典管理：如随笔类型（原创、转载、翻译）\n\n## cms 用户端模块 \n- 技术频道\n    - [x] 首页展示技术频道\n    - [x] 选择技术频道后，可再根据标签查询文章\n- 分类专栏管理:发布随笔时可选择单个分类。\n    - [x] 分类增删改(随笔数量、图片、名称、排序)\n    - [x] 分类列表，仅查看、编辑自己创建的分类专栏\n- 标签：统计每个标签下多少个文章、多少人关注\n    - [x] 标签列表\n    - [x] 无限加载\n    - [x] 最新/最热 根据标签名称模糊查询\n    - [x] 已关注的标签\n    - [x] 热门标签\n- 随笔\n   - [x] 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量\n   - [x] 列表无限加载，按标签查询随笔\n   - [x] 点赞随笔\n   - 随笔详情页\n        - [x] 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；\n        - [x] 作者介绍：头像，昵称，签名，随笔数；\n        - [x] 展示文章类型：原创、转载、翻译\n        - [ ]  相关文章\n        - [ ]  推荐文章\n- 评论\n   - [ ] 用户关闭评论时，无法对随笔进行评论\n   - [ ] 评论随笔(内容支持超链接、emoji)\n   - [x] 删除自己的评论\n   - [x] 点赞评论\n   - [x] 回复评论\n-  关注\n   - [x] 关注/取消关注用户\n   - [x] 关注/取消关注标签\n   \n- 个人主页\n    - 随笔\n        - [x] 用户专栏分类展示\n        - [x] 最新发布的随笔\n    - 关注\n        - [x] 关注的人\n        - [x] 粉丝\n        - [x] 关注的标签\n- 设置\n    - 个人主页设置\n        - [x] 个人资料更新\n    - 安全设置\n        - [x] 密码修改\n    - 博客设置\n        - [x] 默认编辑器设置(markdown/富文本)\n- 消息\n    - [x] 点赞随笔、点赞评论\n    - [x] 评论随笔、回复评论\n    - [x] 用户关注\n### 脑图分享\n\n[http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1](http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1)\n\n### 分组\n 分为三种\n \n ```\nid  name        info\n1\tAdmin\t    系统管理员\n2\tCmsAdmin\t内容管理员\n3\tUser\t    普通用户\n ```\n \n### 审计日志\n大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 **FullAduitEntity**  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity\\<Guid\\>,即可改变主键类型，默认LinUser表主键long，保持**create_user_id**,**delete_user_id**,**update_user_id**都与LinUser的主键相同\n```\n\nid\t                bigint\ncreate_user_id  \tbigint\ncreate_time\t        datetime\nis_deleted\t        bit\ndelete_user_id  \tbigint\ndelete_time\t        datetime\nupdate_user_id\t    bigint\nupdate_time\t        datetime\n\n\n```\n\n## 0.3.0版本权限功能升级\n为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：\n\n1. lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。\n2. lin_group_permission  分组权限表，用于分组与权限表的关联\n3. lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。\n4. lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录\n\n\n## lin-cms 开源地址分享\n\n- 后端接口 [https://github.com/luoyunchong/lin-cms-dotnetcore](https://github.com/luoyunchong/lin-cms-dotnetcore)\n- 管理后台UI [https://github.com/luoyunchong/lin-cms-vue](https://github.com/luoyunchong/lin-cms-vue)\n- 前端UI[https://github.com/luoyunchong/lin-cms-vvlog](https://github.com/luoyunchong/lin-cms-vvlog)\n\n\n","slug":"lin-cms-dotnetcore/design","published":1,"updated":"2020-03-06T05:31:06.621Z","_id":"ck3yccp010001t4uxcgamj1eq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"功能模块的设计\"><a href=\"#功能模块的设计\" class=\"headerlink\" title=\"功能模块的设计\"></a>功能模块的设计</h1><h2 id=\"基础权限模块\"><a href=\"#基础权限模块\" class=\"headerlink\" title=\"基础权限模块\"></a>基础权限模块</h2><ul>\n<li>用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名<ul>\n<li><input checked disabled type=\"checkbox\"> 注册/登录</li>\n<li><input checked disabled type=\"checkbox\"> 上传头像</li>\n<li><input checked disabled type=\"checkbox\"> 修改密码</li>\n<li><input checked disabled type=\"checkbox\"> 用户基本信息修改</li>\n<li><input checked disabled type=\"checkbox\"> 用户增删改，配置分组</li>\n</ul>\n</li>\n<li>绑定第三方账号<ul>\n<li><input checked disabled type=\"checkbox\"> GitHub登录</li>\n<li><input disabled type=\"checkbox\"> QQ 登录</li>\n</ul>\n</li>\n<li>分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改<ul>\n<li><input checked disabled type=\"checkbox\"> 分组增删改</li>\n<li><input checked disabled type=\"checkbox\"> 组别配置权限</li>\n</ul>\n</li>\n<li>文件管理<ul>\n<li><input checked disabled type=\"checkbox\"> 本地文件上传</li>\n<li><input checked disabled type=\"checkbox\"> 七牛云存储</li>\n<li><input disabled type=\"checkbox\"> 文件去重，秒传</li>\n</ul>\n</li>\n<li>系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息<ul>\n<li><input checked disabled type=\"checkbox\"> 记录系统请求的日志</li>\n<li><input disabled type=\"checkbox\"> 异常日志</li>\n</ul>\n</li>\n<li>设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）<ul>\n<li><input checked disabled type=\"checkbox\"> 设置新增修改删除</li>\n<li><input checked disabled type=\"checkbox\"> 所有设置</li>\n</ul>\n</li>\n</ul>\n<p>比如存某用户选择的是markdown还是富文本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=&quot;Article.Editor&quot;,</span><br><span class=\"line\">value=&quot;markdown&quot; 或 &quot;富文本&quot;，</span><br><span class=\"line\">provider_name为&quot;User&quot;,</span><br><span class=\"line\">provider_key为用户Id</span><br></pre></td></tr></table></figure>\n\n<p>或存储七牛云的某一个配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=&quot;Qiniu.AK&quot;,</span><br><span class=\"line\">value=&quot;asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc&quot; ，</span><br><span class=\"line\">provider_name为&quot;Qiniu&quot;或自己定义的字符串</span><br><span class=\"line\">provider_key为空</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"cms-管理员维护模块\"><a href=\"#cms-管理员维护模块\" class=\"headerlink\" title=\"cms 管理员维护模块\"></a>cms 管理员维护模块</h2><ul>\n<li>标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。<ul>\n<li><input checked disabled type=\"checkbox\"> 标签增删改</li>\n<li><input checked disabled type=\"checkbox\"> 标签列表，禁用</li>\n</ul>\n</li>\n<li>技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签<ul>\n<li><input checked disabled type=\"checkbox\"> 技术频道增删改</li>\n<li><input checked disabled type=\"checkbox\"> 列表、禁用</li>\n</ul>\n</li>\n<li>随笔管理：<ul>\n<li><input checked disabled type=\"checkbox\"> 审核随笔/拉黑</li>\n</ul>\n</li>\n<li>评论管理<ul>\n<li><input checked disabled type=\"checkbox\"> 后台审核通过/拉黑</li>\n<li><input checked disabled type=\"checkbox\"> 管理员删除评论</li>\n</ul>\n</li>\n<li>字典管理<ul>\n<li><input checked disabled type=\"checkbox\"> 字典类别管理</li>\n<li><input checked disabled type=\"checkbox\"> 字典管理：如随笔类型（原创、转载、翻译）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cms-用户端模块\"><a href=\"#cms-用户端模块\" class=\"headerlink\" title=\"cms 用户端模块\"></a>cms 用户端模块</h2><ul>\n<li><p>技术频道</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 首页展示技术频道</li>\n<li><input checked disabled type=\"checkbox\"> 选择技术频道后，可再根据标签查询文章</li>\n</ul>\n</li>\n<li><p>分类专栏管理:发布随笔时可选择单个分类。</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 分类增删改(随笔数量、图片、名称、排序)</li>\n<li><input checked disabled type=\"checkbox\"> 分类列表，仅查看、编辑自己创建的分类专栏</li>\n</ul>\n</li>\n<li><p>标签：统计每个标签下多少个文章、多少人关注</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 标签列表</li>\n<li><input checked disabled type=\"checkbox\"> 无限加载</li>\n<li><input checked disabled type=\"checkbox\"> 最新/最热 根据标签名称模糊查询</li>\n<li><input checked disabled type=\"checkbox\"> 已关注的标签</li>\n<li><input checked disabled type=\"checkbox\"> 热门标签</li>\n</ul>\n</li>\n<li><p>随笔</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量</li>\n<li><input checked disabled type=\"checkbox\"> 列表无限加载，按标签查询随笔</li>\n<li><input checked disabled type=\"checkbox\"> 点赞随笔</li>\n<li>随笔详情页<ul>\n<li><input checked disabled type=\"checkbox\"> 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；</li>\n<li><input checked disabled type=\"checkbox\"> 作者介绍：头像，昵称，签名，随笔数；</li>\n<li><input checked disabled type=\"checkbox\"> 展示文章类型：原创、转载、翻译</li>\n<li><input disabled type=\"checkbox\"> 相关文章</li>\n<li><input disabled type=\"checkbox\"> 推荐文章</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>评论</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 用户关闭评论时，无法对随笔进行评论</li>\n<li><input disabled type=\"checkbox\"> 评论随笔(内容支持超链接、emoji)</li>\n<li><input checked disabled type=\"checkbox\"> 删除自己的评论</li>\n<li><input checked disabled type=\"checkbox\"> 点赞评论</li>\n<li><input checked disabled type=\"checkbox\"> 回复评论</li>\n</ul>\n</li>\n<li><p>关注</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 关注/取消关注用户</li>\n<li><input checked disabled type=\"checkbox\"> 关注/取消关注标签</li>\n</ul>\n</li>\n<li><p>个人主页</p>\n<ul>\n<li>随笔<ul>\n<li><input checked disabled type=\"checkbox\"> 用户专栏分类展示</li>\n<li><input checked disabled type=\"checkbox\"> 最新发布的随笔</li>\n</ul>\n</li>\n<li>关注<ul>\n<li><input checked disabled type=\"checkbox\"> 关注的人</li>\n<li><input checked disabled type=\"checkbox\"> 粉丝</li>\n<li><input checked disabled type=\"checkbox\"> 关注的标签</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设置</p>\n<ul>\n<li>个人主页设置<ul>\n<li><input checked disabled type=\"checkbox\"> 个人资料更新</li>\n</ul>\n</li>\n<li>安全设置<ul>\n<li><input checked disabled type=\"checkbox\"> 密码修改</li>\n</ul>\n</li>\n<li>博客设置<ul>\n<li><input checked disabled type=\"checkbox\"> 默认编辑器设置(markdown/富文本)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消息</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 点赞随笔、点赞评论</li>\n<li><input checked disabled type=\"checkbox\"> 评论随笔、回复评论</li>\n<li><input checked disabled type=\"checkbox\"> 用户关注<h3 id=\"脑图分享\"><a href=\"#脑图分享\" class=\"headerlink\" title=\"脑图分享\"></a>脑图分享</h3></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1\" target=\"_blank\" rel=\"noopener\">http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1</a></p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p> 分为三种</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id  name        info</span><br><span class=\"line\">1\tAdmin\t    系统管理员</span><br><span class=\"line\">2\tCmsAdmin\t内容管理员</span><br><span class=\"line\">3\tUser\t    普通用户</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"审计日志\"><a href=\"#审计日志\" class=\"headerlink\" title=\"审计日志\"></a>审计日志</h3><p>大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 <strong>FullAduitEntity</strong>  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity&lt;Guid&gt;,即可改变主键类型，默认LinUser表主键long，保持<strong>create_user_id</strong>,<strong>delete_user_id</strong>,<strong>update_user_id</strong>都与LinUser的主键相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">id\t                bigint</span><br><span class=\"line\">create_user_id  \tbigint</span><br><span class=\"line\">create_time\t        datetime</span><br><span class=\"line\">is_deleted\t        bit</span><br><span class=\"line\">delete_user_id  \tbigint</span><br><span class=\"line\">delete_time\t        datetime</span><br><span class=\"line\">update_user_id\t    bigint</span><br><span class=\"line\">update_time\t        datetime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0-3-0版本权限功能升级\"><a href=\"#0-3-0版本权限功能升级\" class=\"headerlink\" title=\"0.3.0版本权限功能升级\"></a>0.3.0版本权限功能升级</h2><p>为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：</p>\n<ol>\n<li>lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</li>\n<li>lin_group_permission  分组权限表，用于分组与权限表的关联</li>\n<li>lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</li>\n<li>lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</li>\n</ol>\n<h2 id=\"lin-cms-开源地址分享\"><a href=\"#lin-cms-开源地址分享\" class=\"headerlink\" title=\"lin-cms 开源地址分享\"></a>lin-cms 开源地址分享</h2><ul>\n<li>后端接口 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n<li>管理后台UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>前端UI<a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"功能模块的设计\"><a href=\"#功能模块的设计\" class=\"headerlink\" title=\"功能模块的设计\"></a>功能模块的设计</h1><h2 id=\"基础权限模块\"><a href=\"#基础权限模块\" class=\"headerlink\" title=\"基础权限模块\"></a>基础权限模块</h2><ul>\n<li>用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名<ul>\n<li><input checked disabled type=\"checkbox\"> 注册/登录</li>\n<li><input checked disabled type=\"checkbox\"> 上传头像</li>\n<li><input checked disabled type=\"checkbox\"> 修改密码</li>\n<li><input checked disabled type=\"checkbox\"> 用户基本信息修改</li>\n<li><input checked disabled type=\"checkbox\"> 用户增删改，配置分组</li>\n</ul>\n</li>\n<li>绑定第三方账号<ul>\n<li><input checked disabled type=\"checkbox\"> GitHub登录</li>\n<li><input disabled type=\"checkbox\"> QQ 登录</li>\n</ul>\n</li>\n<li>分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改<ul>\n<li><input checked disabled type=\"checkbox\"> 分组增删改</li>\n<li><input checked disabled type=\"checkbox\"> 组别配置权限</li>\n</ul>\n</li>\n<li>文件管理<ul>\n<li><input checked disabled type=\"checkbox\"> 本地文件上传</li>\n<li><input checked disabled type=\"checkbox\"> 七牛云存储</li>\n<li><input disabled type=\"checkbox\"> 文件去重，秒传</li>\n</ul>\n</li>\n<li>系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息<ul>\n<li><input checked disabled type=\"checkbox\"> 记录系统请求的日志</li>\n<li><input disabled type=\"checkbox\"> 异常日志</li>\n</ul>\n</li>\n<li>设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）<ul>\n<li><input checked disabled type=\"checkbox\"> 设置新增修改删除</li>\n<li><input checked disabled type=\"checkbox\"> 所有设置</li>\n</ul>\n</li>\n</ul>\n<p>比如存某用户选择的是markdown还是富文本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=&quot;Article.Editor&quot;,</span><br><span class=\"line\">value=&quot;markdown&quot; 或 &quot;富文本&quot;，</span><br><span class=\"line\">provider_name为&quot;User&quot;,</span><br><span class=\"line\">provider_key为用户Id</span><br></pre></td></tr></table></figure>\n\n<p>或存储七牛云的某一个配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=&quot;Qiniu.AK&quot;,</span><br><span class=\"line\">value=&quot;asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc&quot; ，</span><br><span class=\"line\">provider_name为&quot;Qiniu&quot;或自己定义的字符串</span><br><span class=\"line\">provider_key为空</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"cms-管理员维护模块\"><a href=\"#cms-管理员维护模块\" class=\"headerlink\" title=\"cms 管理员维护模块\"></a>cms 管理员维护模块</h2><ul>\n<li>标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。<ul>\n<li><input checked disabled type=\"checkbox\"> 标签增删改</li>\n<li><input checked disabled type=\"checkbox\"> 标签列表，禁用</li>\n</ul>\n</li>\n<li>技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签<ul>\n<li><input checked disabled type=\"checkbox\"> 技术频道增删改</li>\n<li><input checked disabled type=\"checkbox\"> 列表、禁用</li>\n</ul>\n</li>\n<li>随笔管理：<ul>\n<li><input checked disabled type=\"checkbox\"> 审核随笔/拉黑</li>\n</ul>\n</li>\n<li>评论管理<ul>\n<li><input checked disabled type=\"checkbox\"> 后台审核通过/拉黑</li>\n<li><input checked disabled type=\"checkbox\"> 管理员删除评论</li>\n</ul>\n</li>\n<li>字典管理<ul>\n<li><input checked disabled type=\"checkbox\"> 字典类别管理</li>\n<li><input checked disabled type=\"checkbox\"> 字典管理：如随笔类型（原创、转载、翻译）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cms-用户端模块\"><a href=\"#cms-用户端模块\" class=\"headerlink\" title=\"cms 用户端模块\"></a>cms 用户端模块</h2><ul>\n<li><p>技术频道</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 首页展示技术频道</li>\n<li><input checked disabled type=\"checkbox\"> 选择技术频道后，可再根据标签查询文章</li>\n</ul>\n</li>\n<li><p>分类专栏管理:发布随笔时可选择单个分类。</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 分类增删改(随笔数量、图片、名称、排序)</li>\n<li><input checked disabled type=\"checkbox\"> 分类列表，仅查看、编辑自己创建的分类专栏</li>\n</ul>\n</li>\n<li><p>标签：统计每个标签下多少个文章、多少人关注</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 标签列表</li>\n<li><input checked disabled type=\"checkbox\"> 无限加载</li>\n<li><input checked disabled type=\"checkbox\"> 最新/最热 根据标签名称模糊查询</li>\n<li><input checked disabled type=\"checkbox\"> 已关注的标签</li>\n<li><input checked disabled type=\"checkbox\"> 热门标签</li>\n</ul>\n</li>\n<li><p>随笔</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量</li>\n<li><input checked disabled type=\"checkbox\"> 列表无限加载，按标签查询随笔</li>\n<li><input checked disabled type=\"checkbox\"> 点赞随笔</li>\n<li>随笔详情页<ul>\n<li><input checked disabled type=\"checkbox\"> 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；</li>\n<li><input checked disabled type=\"checkbox\"> 作者介绍：头像，昵称，签名，随笔数；</li>\n<li><input checked disabled type=\"checkbox\"> 展示文章类型：原创、转载、翻译</li>\n<li><input disabled type=\"checkbox\"> 相关文章</li>\n<li><input disabled type=\"checkbox\"> 推荐文章</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>评论</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 用户关闭评论时，无法对随笔进行评论</li>\n<li><input disabled type=\"checkbox\"> 评论随笔(内容支持超链接、emoji)</li>\n<li><input checked disabled type=\"checkbox\"> 删除自己的评论</li>\n<li><input checked disabled type=\"checkbox\"> 点赞评论</li>\n<li><input checked disabled type=\"checkbox\"> 回复评论</li>\n</ul>\n</li>\n<li><p>关注</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 关注/取消关注用户</li>\n<li><input checked disabled type=\"checkbox\"> 关注/取消关注标签</li>\n</ul>\n</li>\n<li><p>个人主页</p>\n<ul>\n<li>随笔<ul>\n<li><input checked disabled type=\"checkbox\"> 用户专栏分类展示</li>\n<li><input checked disabled type=\"checkbox\"> 最新发布的随笔</li>\n</ul>\n</li>\n<li>关注<ul>\n<li><input checked disabled type=\"checkbox\"> 关注的人</li>\n<li><input checked disabled type=\"checkbox\"> 粉丝</li>\n<li><input checked disabled type=\"checkbox\"> 关注的标签</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设置</p>\n<ul>\n<li>个人主页设置<ul>\n<li><input checked disabled type=\"checkbox\"> 个人资料更新</li>\n</ul>\n</li>\n<li>安全设置<ul>\n<li><input checked disabled type=\"checkbox\"> 密码修改</li>\n</ul>\n</li>\n<li>博客设置<ul>\n<li><input checked disabled type=\"checkbox\"> 默认编辑器设置(markdown/富文本)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消息</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 点赞随笔、点赞评论</li>\n<li><input checked disabled type=\"checkbox\"> 评论随笔、回复评论</li>\n<li><input checked disabled type=\"checkbox\"> 用户关注<h3 id=\"脑图分享\"><a href=\"#脑图分享\" class=\"headerlink\" title=\"脑图分享\"></a>脑图分享</h3></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1\" target=\"_blank\" rel=\"noopener\">http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1</a></p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p> 分为三种</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id  name        info</span><br><span class=\"line\">1\tAdmin\t    系统管理员</span><br><span class=\"line\">2\tCmsAdmin\t内容管理员</span><br><span class=\"line\">3\tUser\t    普通用户</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"审计日志\"><a href=\"#审计日志\" class=\"headerlink\" title=\"审计日志\"></a>审计日志</h3><p>大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 <strong>FullAduitEntity</strong>  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity&lt;Guid&gt;,即可改变主键类型，默认LinUser表主键long，保持<strong>create_user_id</strong>,<strong>delete_user_id</strong>,<strong>update_user_id</strong>都与LinUser的主键相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">id\t                bigint</span><br><span class=\"line\">create_user_id  \tbigint</span><br><span class=\"line\">create_time\t        datetime</span><br><span class=\"line\">is_deleted\t        bit</span><br><span class=\"line\">delete_user_id  \tbigint</span><br><span class=\"line\">delete_time\t        datetime</span><br><span class=\"line\">update_user_id\t    bigint</span><br><span class=\"line\">update_time\t        datetime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0-3-0版本权限功能升级\"><a href=\"#0-3-0版本权限功能升级\" class=\"headerlink\" title=\"0.3.0版本权限功能升级\"></a>0.3.0版本权限功能升级</h2><p>为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：</p>\n<ol>\n<li>lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</li>\n<li>lin_group_permission  分组权限表，用于分组与权限表的关联</li>\n<li>lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</li>\n<li>lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</li>\n</ol>\n<h2 id=\"lin-cms-开源地址分享\"><a href=\"#lin-cms-开源地址分享\" class=\"headerlink\" title=\"lin-cms 开源地址分享\"></a>lin-cms 开源地址分享</h2><ul>\n<li>后端接口 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n<li>管理后台UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>前端UI<a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Mar 06 2020 13:31:06 GMT+0800 (GMT+08:00)","title":"lin-cms-dotnetcore功能模块的设计","path":"2019/11/24/lin-cms-dotnetcore/design/","eyeCatchImage":null,"excerpt":null,"date":"2019-11-24T04:44:22.000Z","pv":0,"totalPV":0,"categories":"lin-cms-dotnetcore","tags":[".NET Core","开源","lin-cms"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"FreeSql取多表数据","date":"2019-10-12T06:43:22.000Z","_content":"\n## FreeSql 取多表数据\n\n以文章随笔与分类为例。\n\n1. 表结构\n   部分字段如下，其他省略，为了展示一对多关联，一个分类下可以有多个文章。一个文章属于一个分类。\n   <!-- more -->\n\n#### blog_article （随笔表）\n\n| 字段        | 类型          | 备注    |\n| ----------- | ------------- | ------- |\n| id          | int           |\n| classify_id | int           | 分类 id |\n| title       | varchar(50)   | 标题    |\n| content     | varchar(4000) | 正文    |\n\n#### blog_classify （随笔分类专栏）\n\n| 字段         | 类型        | 备注   |\n| ------------ | ----------- | ------ |\n| id           | int         |\n| ClassifyName | varchar(50) | 分类名 |\n\n其中 FullAduitEntity，Entity，在[开源项目](https://github.com/luoyunchong/lin-cms-dotnetcore)中,可以自行搜索，其中就是 ABP 中的创建时间、是否删除等字段\n\n#### Article.cs\n\n```\n  [Table(Name = \"blog_article\")]\n    public class Article : FullAduitEntity\n    {\n        /// <summary>\n        /// 文章所在分类专栏Id\n        /// </summary>\n        public int? ClassifyId { get; set; }\n\n        public Classify Classify { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [Column(DbType = \"varchar(200)\")]\n        public string Title { get; set; }\n        /// <summary>\n        /// 正文\n        /// </summary>\n        [Column(DbType = \"text\")]\n        public string Content { get; set; }\n    }\n```\n\n#### Classify.cs\n\n```\n    [Table(Name = \"blog_classify\")]\n   public class Classify:FullAduitEntity\n    {\n        public string ClassifyName { get; set; }\n        public List<Article> Articles { get; set; }\n    }\n```\n\n## 使用现有的导航属性\n\n1. 属性 Classify 为 null\n\n```\nList<Article> articles1 = _articleRepository\n                        .Select\n                        .ToList();\n```\n\n2.属性 Classify 会有值\n我们在前台取数据，也可以直接循环取 Classify 中的属性\n\n```\nList<Article>articles2=  _articleRepository\n    .Select\n    .Include(r => r.Classify)\n    .ToList();\n```\n\n假如，后台有一些字段要想过滤掉，可使用 AutoMapper，传给前台使用 Dto,过滤创建时间，修改时间等审核日志\n\n创建 ArticleDto\n\n```\n   public class ArticleDto : Entity\n    {\n        /// <summary>\n        /// 类别Id\n        /// </summary>\n        public int? ClassifyId { get; set; }\n        /// <summary>\n        /// 类别名称\n        /// </summary>\n        public string ClassifyName { get; set; }\n        public string Content { get; set; }\n        public string Title { get; set; }\n    }\n```\n\n3、配合 IMapper，转换为 ArticleDto\n\n```\nList<ArticleDto> articles3 = _articleRepository\n            .Select\n            .ToList(r=>new\n            {\n                r.Classify,\n                Article=r\n            }).Select(r=>\n            {\n                ArticleDto articleDto=_mapper.Map<ArticleDto>(r.Article);\n                articleDto.ClassifyName = r.Classify.ClassifyName;\n                return articleDto;\n            }).ToList();\n```\n\n4. 同样是使用 IMapper 转换，但这里 Include 进去了，用法稍微有点区别。\n\n文档介绍 Include\"贪婪加载导航属性，如果查询中已经使用了 a.Parent.Parent 类似表达式，则可以无需此操作。。\n\n这里说的查询使用了 a.Parent.Parent,是指上面的 3 中，ToList 中的\n\n```\n  .ToList(r=>new\n        {\n            r.Classify,\n            Article=r\n        })\n```\n\nr.Classify，会生成 Join 功能。如果不想 ToList 去选择需要的数据，可直接使用 Include 把需要关联的数据取出。在后面再使用 Linq 的 Select 把数据转换下，后面要注意 r.Classify 可能为 null，需要?.取。因为 ClassifyId 非必填项。\n\n```\nList<ArticleDto> articles4 = _articleRepository\n    .Select\n    .Include(r => r.Classify)\n    .ToList().Select(r =>\n    {\n        ArticleDto articleDto = _mapper.Map<ArticleDto>(r);\n        articleDto.ClassifyName = r.Classify?.ClassifyName;\n        return articleDto;\n    }).ToList();\n\n```\n\n## 直接 Join\n\n5. 不使用关联属性获取文章专栏，这时候类 Article 中的 Classify 属性和 Classify 表中的 List\\<Article>可删除，\n\n```\nList<ArticleDto> articleDtos = _articleRepository\n            .Select\n            .From<Classify>((a, b) =>a.LeftJoin(r => r.ClassifyId == b.Id)\n            ).ToList((s, a) => new\n            {\n                Article = s,\n                a.ClassifyName\n            })\n            .Select(r =>\n            {\n                ArticleDto articleDto = _mapper.Map<ArticleDto>(r.Article);\n                articleDto.ClassifyName = r.ClassifyName;\n                return articleDto;\n            }).ToList();\n```\n\n### 使用 SQL 直接获取文章及其分类名称\n\n6.SQL 需要自己增加 is_deleted 判断。\n\n```\nList<ArticleDto> t9 = _freeSql.Ado.Query<ArticleDto>($@\"\n                SELECT a.*,b.item_name as classifyName\n                FROM blog_article a\n                LEFT JOIN base_item b\n                on a.classify_id=b.id where a.is_deleted=0\"\n);\n```\n\n### 总结\n\n以上取出的数据行数都是一样的。  \n一对多。\n\n1. 写 SQL，很简单。\n2. 使用 ORM 的 Join，再配合 Mapper 就变得复杂了。\n3. 使用导航属性，取关联数据，一个 InClude 就解决问题了\n4. 使用导航属性，取关联数据，然后再配合 Mapper，基本就要看你的 Linq、AutoMapper 的水平了。哈哈。\n\n比如上面把 Article 类中的 Classify 中的某一个值取出转换成 ArticleDto 中的 ClassifyName\n","source":"_posts/re-start/FreeSql-One-To-Many.md","raw":"---\ntitle: FreeSql取多表数据\ndate: 2019-10-12 14:43:22\ntags:\n  - FreeSql\ncategory:\n  - 重新出发\n---\n\n## FreeSql 取多表数据\n\n以文章随笔与分类为例。\n\n1. 表结构\n   部分字段如下，其他省略，为了展示一对多关联，一个分类下可以有多个文章。一个文章属于一个分类。\n   <!-- more -->\n\n#### blog_article （随笔表）\n\n| 字段        | 类型          | 备注    |\n| ----------- | ------------- | ------- |\n| id          | int           |\n| classify_id | int           | 分类 id |\n| title       | varchar(50)   | 标题    |\n| content     | varchar(4000) | 正文    |\n\n#### blog_classify （随笔分类专栏）\n\n| 字段         | 类型        | 备注   |\n| ------------ | ----------- | ------ |\n| id           | int         |\n| ClassifyName | varchar(50) | 分类名 |\n\n其中 FullAduitEntity，Entity，在[开源项目](https://github.com/luoyunchong/lin-cms-dotnetcore)中,可以自行搜索，其中就是 ABP 中的创建时间、是否删除等字段\n\n#### Article.cs\n\n```\n  [Table(Name = \"blog_article\")]\n    public class Article : FullAduitEntity\n    {\n        /// <summary>\n        /// 文章所在分类专栏Id\n        /// </summary>\n        public int? ClassifyId { get; set; }\n\n        public Classify Classify { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [Column(DbType = \"varchar(200)\")]\n        public string Title { get; set; }\n        /// <summary>\n        /// 正文\n        /// </summary>\n        [Column(DbType = \"text\")]\n        public string Content { get; set; }\n    }\n```\n\n#### Classify.cs\n\n```\n    [Table(Name = \"blog_classify\")]\n   public class Classify:FullAduitEntity\n    {\n        public string ClassifyName { get; set; }\n        public List<Article> Articles { get; set; }\n    }\n```\n\n## 使用现有的导航属性\n\n1. 属性 Classify 为 null\n\n```\nList<Article> articles1 = _articleRepository\n                        .Select\n                        .ToList();\n```\n\n2.属性 Classify 会有值\n我们在前台取数据，也可以直接循环取 Classify 中的属性\n\n```\nList<Article>articles2=  _articleRepository\n    .Select\n    .Include(r => r.Classify)\n    .ToList();\n```\n\n假如，后台有一些字段要想过滤掉，可使用 AutoMapper，传给前台使用 Dto,过滤创建时间，修改时间等审核日志\n\n创建 ArticleDto\n\n```\n   public class ArticleDto : Entity\n    {\n        /// <summary>\n        /// 类别Id\n        /// </summary>\n        public int? ClassifyId { get; set; }\n        /// <summary>\n        /// 类别名称\n        /// </summary>\n        public string ClassifyName { get; set; }\n        public string Content { get; set; }\n        public string Title { get; set; }\n    }\n```\n\n3、配合 IMapper，转换为 ArticleDto\n\n```\nList<ArticleDto> articles3 = _articleRepository\n            .Select\n            .ToList(r=>new\n            {\n                r.Classify,\n                Article=r\n            }).Select(r=>\n            {\n                ArticleDto articleDto=_mapper.Map<ArticleDto>(r.Article);\n                articleDto.ClassifyName = r.Classify.ClassifyName;\n                return articleDto;\n            }).ToList();\n```\n\n4. 同样是使用 IMapper 转换，但这里 Include 进去了，用法稍微有点区别。\n\n文档介绍 Include\"贪婪加载导航属性，如果查询中已经使用了 a.Parent.Parent 类似表达式，则可以无需此操作。。\n\n这里说的查询使用了 a.Parent.Parent,是指上面的 3 中，ToList 中的\n\n```\n  .ToList(r=>new\n        {\n            r.Classify,\n            Article=r\n        })\n```\n\nr.Classify，会生成 Join 功能。如果不想 ToList 去选择需要的数据，可直接使用 Include 把需要关联的数据取出。在后面再使用 Linq 的 Select 把数据转换下，后面要注意 r.Classify 可能为 null，需要?.取。因为 ClassifyId 非必填项。\n\n```\nList<ArticleDto> articles4 = _articleRepository\n    .Select\n    .Include(r => r.Classify)\n    .ToList().Select(r =>\n    {\n        ArticleDto articleDto = _mapper.Map<ArticleDto>(r);\n        articleDto.ClassifyName = r.Classify?.ClassifyName;\n        return articleDto;\n    }).ToList();\n\n```\n\n## 直接 Join\n\n5. 不使用关联属性获取文章专栏，这时候类 Article 中的 Classify 属性和 Classify 表中的 List\\<Article>可删除，\n\n```\nList<ArticleDto> articleDtos = _articleRepository\n            .Select\n            .From<Classify>((a, b) =>a.LeftJoin(r => r.ClassifyId == b.Id)\n            ).ToList((s, a) => new\n            {\n                Article = s,\n                a.ClassifyName\n            })\n            .Select(r =>\n            {\n                ArticleDto articleDto = _mapper.Map<ArticleDto>(r.Article);\n                articleDto.ClassifyName = r.ClassifyName;\n                return articleDto;\n            }).ToList();\n```\n\n### 使用 SQL 直接获取文章及其分类名称\n\n6.SQL 需要自己增加 is_deleted 判断。\n\n```\nList<ArticleDto> t9 = _freeSql.Ado.Query<ArticleDto>($@\"\n                SELECT a.*,b.item_name as classifyName\n                FROM blog_article a\n                LEFT JOIN base_item b\n                on a.classify_id=b.id where a.is_deleted=0\"\n);\n```\n\n### 总结\n\n以上取出的数据行数都是一样的。  \n一对多。\n\n1. 写 SQL，很简单。\n2. 使用 ORM 的 Join，再配合 Mapper 就变得复杂了。\n3. 使用导航属性，取关联数据，一个 InClude 就解决问题了\n4. 使用导航属性，取关联数据，然后再配合 Mapper，基本就要看你的 Linq、AutoMapper 的水平了。哈哈。\n\n比如上面把 Article 类中的 Classify 中的某一个值取出转换成 ArticleDto 中的 ClassifyName\n","slug":"re-start/FreeSql-One-To-Many","published":1,"updated":"2019-10-12T06:54:38.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3yccp050003t4uxargjzq8c","content":"<h2 id=\"FreeSql-取多表数据\"><a href=\"#FreeSql-取多表数据\" class=\"headerlink\" title=\"FreeSql 取多表数据\"></a>FreeSql 取多表数据</h2><p>以文章随笔与分类为例。</p>\n<ol>\n<li>表结构<br>部分字段如下，其他省略，为了展示一对多关联，一个分类下可以有多个文章。一个文章属于一个分类。<a id=\"more\"></a>\n\n</li>\n</ol>\n<h4 id=\"blog-article-（随笔表）\"><a href=\"#blog-article-（随笔表）\" class=\"headerlink\" title=\"blog_article （随笔表）\"></a>blog_article （随笔表）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>classify_id</td>\n<td>int</td>\n<td>分类 id</td>\n</tr>\n<tr>\n<td>title</td>\n<td>varchar(50)</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>content</td>\n<td>varchar(4000)</td>\n<td>正文</td>\n</tr>\n</tbody></table>\n<h4 id=\"blog-classify-（随笔分类专栏）\"><a href=\"#blog-classify-（随笔分类专栏）\" class=\"headerlink\" title=\"blog_classify （随笔分类专栏）\"></a>blog_classify （随笔分类专栏）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>ClassifyName</td>\n<td>varchar(50)</td>\n<td>分类名</td>\n</tr>\n</tbody></table>\n<p>其中 FullAduitEntity，Entity，在<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">开源项目</a>中,可以自行搜索，其中就是 ABP 中的创建时间、是否删除等字段</p>\n<h4 id=\"Article-cs\"><a href=\"#Article-cs\" class=\"headerlink\" title=\"Article.cs\"></a>Article.cs</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Table(Name = &quot;blog_article&quot;)]</span><br><span class=\"line\">  public class Article : FullAduitEntity</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 文章所在分类专栏Id</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      public int? ClassifyId &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public Classify Classify &#123; get; set; &#125;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 标题</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      [Column(DbType = &quot;varchar(200)&quot;)]</span><br><span class=\"line\">      public string Title &#123; get; set; &#125;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 正文</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      [Column(DbType = &quot;text&quot;)]</span><br><span class=\"line\">      public string Content &#123; get; set; &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Classify-cs\"><a href=\"#Classify-cs\" class=\"headerlink\" title=\"Classify.cs\"></a>Classify.cs</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> [Table(Name = &quot;blog_classify&quot;)]</span><br><span class=\"line\">public class Classify:FullAduitEntity</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string ClassifyName &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;Article&gt; Articles &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用现有的导航属性\"><a href=\"#使用现有的导航属性\" class=\"headerlink\" title=\"使用现有的导航属性\"></a>使用现有的导航属性</h2><ol>\n<li>属性 Classify 为 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Article&gt; articles1 = _articleRepository</span><br><span class=\"line\">                        .Select</span><br><span class=\"line\">                        .ToList();</span><br></pre></td></tr></table></figure>\n\n<p>2.属性 Classify 会有值<br>我们在前台取数据，也可以直接循环取 Classify 中的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Article&gt;articles2=  _articleRepository</span><br><span class=\"line\">    .Select</span><br><span class=\"line\">    .Include(r =&gt; r.Classify)</span><br><span class=\"line\">    .ToList();</span><br></pre></td></tr></table></figure>\n\n<p>假如，后台有一些字段要想过滤掉，可使用 AutoMapper，传给前台使用 Dto,过滤创建时间，修改时间等审核日志</p>\n<p>创建 ArticleDto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ArticleDto : Entity</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     /// &lt;summary&gt;</span><br><span class=\"line\">     /// 类别Id</span><br><span class=\"line\">     /// &lt;/summary&gt;</span><br><span class=\"line\">     public int? ClassifyId &#123; get; set; &#125;</span><br><span class=\"line\">     /// &lt;summary&gt;</span><br><span class=\"line\">     /// 类别名称</span><br><span class=\"line\">     /// &lt;/summary&gt;</span><br><span class=\"line\">     public string ClassifyName &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、配合 IMapper，转换为 ArticleDto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articles3 = _articleRepository</span><br><span class=\"line\">            .Select</span><br><span class=\"line\">            .ToList(r=&gt;new</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r.Classify,</span><br><span class=\"line\">                Article=r</span><br><span class=\"line\">            &#125;).Select(r=&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ArticleDto articleDto=_mapper.Map&lt;ArticleDto&gt;(r.Article);</span><br><span class=\"line\">                articleDto.ClassifyName = r.Classify.ClassifyName;</span><br><span class=\"line\">                return articleDto;</span><br><span class=\"line\">            &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>同样是使用 IMapper 转换，但这里 Include 进去了，用法稍微有点区别。</li>\n</ol>\n<p>文档介绍 Include”贪婪加载导航属性，如果查询中已经使用了 a.Parent.Parent 类似表达式，则可以无需此操作。。</p>\n<p>这里说的查询使用了 a.Parent.Parent,是指上面的 3 中，ToList 中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.ToList(r=&gt;new</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r.Classify,</span><br><span class=\"line\">          Article=r</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>r.Classify，会生成 Join 功能。如果不想 ToList 去选择需要的数据，可直接使用 Include 把需要关联的数据取出。在后面再使用 Linq 的 Select 把数据转换下，后面要注意 r.Classify 可能为 null，需要?.取。因为 ClassifyId 非必填项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articles4 = _articleRepository</span><br><span class=\"line\">    .Select</span><br><span class=\"line\">    .Include(r =&gt; r.Classify)</span><br><span class=\"line\">    .ToList().Select(r =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArticleDto articleDto = _mapper.Map&lt;ArticleDto&gt;(r);</span><br><span class=\"line\">        articleDto.ClassifyName = r.Classify?.ClassifyName;</span><br><span class=\"line\">        return articleDto;</span><br><span class=\"line\">    &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接-Join\"><a href=\"#直接-Join\" class=\"headerlink\" title=\"直接 Join\"></a>直接 Join</h2><ol start=\"5\">\n<li>不使用关联属性获取文章专栏，这时候类 Article 中的 Classify 属性和 Classify 表中的 List&lt;Article&gt;可删除，</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articleDtos = _articleRepository</span><br><span class=\"line\">            .Select</span><br><span class=\"line\">            .From&lt;Classify&gt;((a, b) =&gt;a.LeftJoin(r =&gt; r.ClassifyId == b.Id)</span><br><span class=\"line\">            ).ToList((s, a) =&gt; new</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Article = s,</span><br><span class=\"line\">                a.ClassifyName</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .Select(r =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ArticleDto articleDto = _mapper.Map&lt;ArticleDto&gt;(r.Article);</span><br><span class=\"line\">                articleDto.ClassifyName = r.ClassifyName;</span><br><span class=\"line\">                return articleDto;</span><br><span class=\"line\">            &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-SQL-直接获取文章及其分类名称\"><a href=\"#使用-SQL-直接获取文章及其分类名称\" class=\"headerlink\" title=\"使用 SQL 直接获取文章及其分类名称\"></a>使用 SQL 直接获取文章及其分类名称</h3><p>6.SQL 需要自己增加 is_deleted 判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; t9 = _freeSql.Ado.Query&lt;ArticleDto&gt;($@&quot;</span><br><span class=\"line\">                SELECT a.*,b.item_name as classifyName</span><br><span class=\"line\">                FROM blog_article a</span><br><span class=\"line\">                LEFT JOIN base_item b</span><br><span class=\"line\">                on a.classify_id=b.id where a.is_deleted=0&quot;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上取出的数据行数都是一样的。<br>一对多。</p>\n<ol>\n<li>写 SQL，很简单。</li>\n<li>使用 ORM 的 Join，再配合 Mapper 就变得复杂了。</li>\n<li>使用导航属性，取关联数据，一个 InClude 就解决问题了</li>\n<li>使用导航属性，取关联数据，然后再配合 Mapper，基本就要看你的 Linq、AutoMapper 的水平了。哈哈。</li>\n</ol>\n<p>比如上面把 Article 类中的 Classify 中的某一个值取出转换成 ArticleDto 中的 ClassifyName</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"FreeSql-取多表数据\"><a href=\"#FreeSql-取多表数据\" class=\"headerlink\" title=\"FreeSql 取多表数据\"></a>FreeSql 取多表数据</h2><p>以文章随笔与分类为例。</p>\n<ol>\n<li>表结构<br>部分字段如下，其他省略，为了展示一对多关联，一个分类下可以有多个文章。一个文章属于一个分类。","more":"</li>\n</ol>\n<h4 id=\"blog-article-（随笔表）\"><a href=\"#blog-article-（随笔表）\" class=\"headerlink\" title=\"blog_article （随笔表）\"></a>blog_article （随笔表）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>classify_id</td>\n<td>int</td>\n<td>分类 id</td>\n</tr>\n<tr>\n<td>title</td>\n<td>varchar(50)</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>content</td>\n<td>varchar(4000)</td>\n<td>正文</td>\n</tr>\n</tbody></table>\n<h4 id=\"blog-classify-（随笔分类专栏）\"><a href=\"#blog-classify-（随笔分类专栏）\" class=\"headerlink\" title=\"blog_classify （随笔分类专栏）\"></a>blog_classify （随笔分类专栏）</h4><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>ClassifyName</td>\n<td>varchar(50)</td>\n<td>分类名</td>\n</tr>\n</tbody></table>\n<p>其中 FullAduitEntity，Entity，在<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener\">开源项目</a>中,可以自行搜索，其中就是 ABP 中的创建时间、是否删除等字段</p>\n<h4 id=\"Article-cs\"><a href=\"#Article-cs\" class=\"headerlink\" title=\"Article.cs\"></a>Article.cs</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Table(Name = &quot;blog_article&quot;)]</span><br><span class=\"line\">  public class Article : FullAduitEntity</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 文章所在分类专栏Id</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      public int? ClassifyId &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public Classify Classify &#123; get; set; &#125;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 标题</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      [Column(DbType = &quot;varchar(200)&quot;)]</span><br><span class=\"line\">      public string Title &#123; get; set; &#125;</span><br><span class=\"line\">      /// &lt;summary&gt;</span><br><span class=\"line\">      /// 正文</span><br><span class=\"line\">      /// &lt;/summary&gt;</span><br><span class=\"line\">      [Column(DbType = &quot;text&quot;)]</span><br><span class=\"line\">      public string Content &#123; get; set; &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Classify-cs\"><a href=\"#Classify-cs\" class=\"headerlink\" title=\"Classify.cs\"></a>Classify.cs</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> [Table(Name = &quot;blog_classify&quot;)]</span><br><span class=\"line\">public class Classify:FullAduitEntity</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string ClassifyName &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;Article&gt; Articles &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用现有的导航属性\"><a href=\"#使用现有的导航属性\" class=\"headerlink\" title=\"使用现有的导航属性\"></a>使用现有的导航属性</h2><ol>\n<li>属性 Classify 为 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Article&gt; articles1 = _articleRepository</span><br><span class=\"line\">                        .Select</span><br><span class=\"line\">                        .ToList();</span><br></pre></td></tr></table></figure>\n\n<p>2.属性 Classify 会有值<br>我们在前台取数据，也可以直接循环取 Classify 中的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Article&gt;articles2=  _articleRepository</span><br><span class=\"line\">    .Select</span><br><span class=\"line\">    .Include(r =&gt; r.Classify)</span><br><span class=\"line\">    .ToList();</span><br></pre></td></tr></table></figure>\n\n<p>假如，后台有一些字段要想过滤掉，可使用 AutoMapper，传给前台使用 Dto,过滤创建时间，修改时间等审核日志</p>\n<p>创建 ArticleDto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ArticleDto : Entity</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     /// &lt;summary&gt;</span><br><span class=\"line\">     /// 类别Id</span><br><span class=\"line\">     /// &lt;/summary&gt;</span><br><span class=\"line\">     public int? ClassifyId &#123; get; set; &#125;</span><br><span class=\"line\">     /// &lt;summary&gt;</span><br><span class=\"line\">     /// 类别名称</span><br><span class=\"line\">     /// &lt;/summary&gt;</span><br><span class=\"line\">     public string ClassifyName &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、配合 IMapper，转换为 ArticleDto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articles3 = _articleRepository</span><br><span class=\"line\">            .Select</span><br><span class=\"line\">            .ToList(r=&gt;new</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r.Classify,</span><br><span class=\"line\">                Article=r</span><br><span class=\"line\">            &#125;).Select(r=&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ArticleDto articleDto=_mapper.Map&lt;ArticleDto&gt;(r.Article);</span><br><span class=\"line\">                articleDto.ClassifyName = r.Classify.ClassifyName;</span><br><span class=\"line\">                return articleDto;</span><br><span class=\"line\">            &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>同样是使用 IMapper 转换，但这里 Include 进去了，用法稍微有点区别。</li>\n</ol>\n<p>文档介绍 Include”贪婪加载导航属性，如果查询中已经使用了 a.Parent.Parent 类似表达式，则可以无需此操作。。</p>\n<p>这里说的查询使用了 a.Parent.Parent,是指上面的 3 中，ToList 中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.ToList(r=&gt;new</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r.Classify,</span><br><span class=\"line\">          Article=r</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>r.Classify，会生成 Join 功能。如果不想 ToList 去选择需要的数据，可直接使用 Include 把需要关联的数据取出。在后面再使用 Linq 的 Select 把数据转换下，后面要注意 r.Classify 可能为 null，需要?.取。因为 ClassifyId 非必填项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articles4 = _articleRepository</span><br><span class=\"line\">    .Select</span><br><span class=\"line\">    .Include(r =&gt; r.Classify)</span><br><span class=\"line\">    .ToList().Select(r =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArticleDto articleDto = _mapper.Map&lt;ArticleDto&gt;(r);</span><br><span class=\"line\">        articleDto.ClassifyName = r.Classify?.ClassifyName;</span><br><span class=\"line\">        return articleDto;</span><br><span class=\"line\">    &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接-Join\"><a href=\"#直接-Join\" class=\"headerlink\" title=\"直接 Join\"></a>直接 Join</h2><ol start=\"5\">\n<li>不使用关联属性获取文章专栏，这时候类 Article 中的 Classify 属性和 Classify 表中的 List&lt;Article&gt;可删除，</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; articleDtos = _articleRepository</span><br><span class=\"line\">            .Select</span><br><span class=\"line\">            .From&lt;Classify&gt;((a, b) =&gt;a.LeftJoin(r =&gt; r.ClassifyId == b.Id)</span><br><span class=\"line\">            ).ToList((s, a) =&gt; new</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Article = s,</span><br><span class=\"line\">                a.ClassifyName</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .Select(r =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ArticleDto articleDto = _mapper.Map&lt;ArticleDto&gt;(r.Article);</span><br><span class=\"line\">                articleDto.ClassifyName = r.ClassifyName;</span><br><span class=\"line\">                return articleDto;</span><br><span class=\"line\">            &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-SQL-直接获取文章及其分类名称\"><a href=\"#使用-SQL-直接获取文章及其分类名称\" class=\"headerlink\" title=\"使用 SQL 直接获取文章及其分类名称\"></a>使用 SQL 直接获取文章及其分类名称</h3><p>6.SQL 需要自己增加 is_deleted 判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ArticleDto&gt; t9 = _freeSql.Ado.Query&lt;ArticleDto&gt;($@&quot;</span><br><span class=\"line\">                SELECT a.*,b.item_name as classifyName</span><br><span class=\"line\">                FROM blog_article a</span><br><span class=\"line\">                LEFT JOIN base_item b</span><br><span class=\"line\">                on a.classify_id=b.id where a.is_deleted=0&quot;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上取出的数据行数都是一样的。<br>一对多。</p>\n<ol>\n<li>写 SQL，很简单。</li>\n<li>使用 ORM 的 Join，再配合 Mapper 就变得复杂了。</li>\n<li>使用导航属性，取关联数据，一个 InClude 就解决问题了</li>\n<li>使用导航属性，取关联数据，然后再配合 Mapper，基本就要看你的 Linq、AutoMapper 的水平了。哈哈。</li>\n</ol>\n<p>比如上面把 Article 类中的 Classify 中的某一个值取出转换成 ArticleDto 中的 ClassifyName</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Oct 12 2019 14:54:38 GMT+0800 (GMT+08:00)","title":"FreeSql取多表数据","path":"2019/10/12/re-start/FreeSql-One-To-Many/","eyeCatchImage":null,"excerpt":"<h2 id=\"FreeSql-取多表数据\"><a href=\"#FreeSql-取多表数据\" class=\"headerlink\" title=\"FreeSql 取多表数据\"></a>FreeSql 取多表数据</h2><p>以文章随笔与分类为例。</p>\n<ol>\n<li>表结构<br>部分字段如下，其他省略，为了展示一对多关联，一个分类下可以有多个文章。一个文章属于一个分类。","date":"2019-10-12T06:43:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":["FreeSql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core Blazor WebAssembly实现一个简单的TODO List","date":"2020-06-06T12:09:07.000Z","_content":"\n\n## 基于blazor实现的一个简单的TODO List\n\n最近看到一些大佬都开始关注blazor，我也想学习一下。做了一个小的demo，todolist，仅是一个小示例，参考此vue项目的实现[http://www.jq22.com/code1339](http://www.jq22.com/code1339)\n\n<!-- more -->\n先看实现的效果图\n\n[![](https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif)](https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif)\n\n不BB,直接可以去看\n### 源码与预览地址\n\n- 示例地址 [http://baimocore.cn:8081/](http://baimocore.cn:8081/)\n- 源码地址 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList](https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList)\n\n\n\n\n### 源码介绍\n\n我们这里删除了默认的一些源码。只保留最简单的结构,在Pages/Index.razor中。\n\n@code代码结构中写如下内容\n\n1. 创建一个类，里面包含 id,label,isdone三个属性值。\n\n```\npublic class TodoItem\n{\n    public TodoItem () { }\n    public TodoItem (int id, string label, bool isDone)\n    {\n        Id = id;\n        Label = label;\n        IsDone = isDone;\n    }\n    public int Id { get; set; }\n    public string Label { get; set; }\n    public bool IsDone { get; set; }\n}\n```\n\n\n2. 我们可以通过override重写初始化，并给Todos设置一些数据。\n```\nprivate IList<TodoItem> Todos;\nprivate int id = 0;\nprotected override void OnInitialized ()\n{\n    Todos = new List<TodoItem> ()\n    {\n        new TodoItem (++id, \"Learn Blazor\", false),\n        new TodoItem (++id, \"Code a todo list\", false),\n        new TodoItem (++id, \"Learn something else\", false)\n    };\n}\n```\n\n\n展示还有多少未完成的任务 \n\n```\n<h1>\n        Todo List(@Todos.Count(todo => !todo.IsDone))\n        <span>Get things done, one item at a time.</span>\n</h1>\n```\n当任务没有时，我们展示默认效果，提示用户无任务\n```\n<p class=\"emptylist\" style=\"display: @(Todos.Count()>0?\"none\":\"\");\">Your todo list is empty.</p>\n```\n\n新增一个任务\n```\n<form name=\"newform\">\n    <label for=\"newitem\">Add to the todo list</label>\n    <input type=\"text\" name=\"newitem\" id=\"newitem\" @bind-value=\"Label\">\n    <button type=\"button\" @onclick=\"AddItem\">Add item</button>\n</form>\n```\n这里我们用了一个Label变量，一个onclick事件。\n```\nprivate string Label;\n\nprivate void AddItem()\n{\n    if (!string.IsNullOrWhiteSpace(Label))\n    {\n        Todos.Add (new TodoItem { Id = ++id, Label = Label });\n        Label = string.Empty;\n    }\n    this.SortByStatus();\n}\n```\n\n**this.SortByStatus**\n因为我们这里还实现一个功能，就是当勾选（当任务完成时，我们将他移到最下面）\n\n```\n<div class=\"togglebutton-wrapper@(IsActive==true?\" togglebutton-checked\":\"\")\">\n    <label for=\"todosort\">\n        <span class=\"togglebutton-Label\">Move done items at the end?</span>\n        <span class=\"tooglebutton-box\"></span>\n    </label>\n    <input type=\"checkbox\" name=\"todosort\" id=\"todosort\" value=\"@IsActive\" @onchange=\"ActiveChanged\">\n</div>\n```\n\n一个IsActive的变量，用于指示当前checkbox的样式，是否开启已完成的任务移动到最下面。当勾选时，改变IsActive的值。并调用排序的功能。\n\n```\nprivate bool IsActive = false;\nprivate void ActiveChanged()\n{\n    this.IsActive = !this.IsActive;\n    this.SortByStatus();\n}\nprivate void SortByStatus()\n{\n    if (this.IsActive)\n    {\n        Todos = Todos.OrderBy(r => r.IsDone).ThenByDescending(r => r.Id).ToList();\n    }\n    else\n    {\n        Todos = Todos.OrderByDescending(r => r.Id).ToList();\n    }\n}\n```\n\n对于列表的展示我们使用如下ul li @for实现\n```\n<ul>\n    @foreach (var item in Todos)\n    {\n        <li stagger=\"5000\" class=\"@(item.IsDone?\"done\":\"\")\">\n            <span class=\"label\">@item.Label</span>\n            <div class=\"actions\">\n                <button class=\"btn-picto\" type=\"button\"\n                        @onclick=\"@((e)=> {MarkAsDoneOrUndone(item);})\"\n                        title=\"@(item.IsDone ? \"Undone\" :\"Done\")\"\n                        aria-label=\"@(item.IsDone ? \"Undone\" :\"Done\")\">\n                    <i aria-hidden=\"true\" class=\"material-icons\">@(item.IsDone ? \"check_box\" : \"check_box_outline_blank\")</i>\n                </button>\n                <button class=\"btn-picto\" type=\"button\"\n                        @onclick=\"@((e)=> { DeleteItemFromList(item); })\"\n                        aria-Label=\"Delete\" title=\"Delete\">\n                    <i aria-hidden=\"true\" class=\"material-icons\">delete</i>\n                </button>\n            </div>\n        </li>\n    }\n</ul>\n```\n循环Todos，然后，根据item.IsDone，改变li的样式，从而实现一个中划线的功能，二个按钮的功能，一个是勾选任务表示此任务已完成，另一个是删除此任务。同理，我们仍然通过IsDone来标识完成任务的图标，标题等。\n\n- 任务设置已完成/设置为未完成： @onclick调用方法MarkAsDoneOrUndone，并将当前的一行记录item传给方法，需要使用一个匿名函数调用@code中的方法,将isDone取相反的值，并重新排序。\n\n```\nprivate void MarkAsDoneOrUndone(TodoItem item)\n{\n    item.IsDone = !item.IsDone;\n    this.SortByStatus();\n}\n```\n- 删除一个任务，同理，使用匿名函数，DeleteItemFromList直接通过IList的方法Remove删除一个对象，并排序。\n```\nprivate void DeleteItemFromList(TodoItem item)\n{\n    Todos.Remove(item);\n    this.SortByStatus();\n}\n```\n\n当然，我们可以 在ul，外包裹一层,根据Count判断有没有任务，从而显示这个列表。\n\n```   \n<div style=\"display: @(Todos.Count()>0?\"\":\"none\");\"><ul>xxx</ul></div>\n```\n\n其他的样式与图标，请看最上面的源码wwwroot/css目录获取。\n\n### deploy(部署)\n\n- 有兴趣的可以看官网 [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio)\n\n在项目根目录执行如下命令\n\n```\ndotnet publish -c Release\n```\n\n我们就能得到一个发布包，他的位置在 **（BlazorAppTodoList\\bin\\Release\\netstandard2.1\\publish）** ，我们把他复制到服务器上，这里我放到/var/www/todolilst目录中。\n\n\n它相当于一个静态文件，你可以将他部署到任何一个web服务器上。\n\n这里我们把他放到nginx中，并在目录/etc/nginx/conf.d/ 新建一个文件 todolist.conf，然后放入如下内容。\n\n```\n server {\n        listen 8081;\n\n        location / {\n            root /var/www/todolist/wwwroot;\n            try_files $uri $uri/ /index.html =404;\n        }\n}\n```\n\n记得在etc/nginx/nginx.conf中配置gzip压缩。\n\n\n```\ngzip  on;\ngzip_min_length 5k; #gzip压缩最小文件大小，超出进行压缩（自行调节）\ngzip_buffers 4 16k; #buffer 不用修改\ngzip_comp_level 8; #压缩级别:1-10，数字越大压缩的越好，时间也越长\ngzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/octet-stream; #  压缩文件类型 \ngzip_vary on; # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩\n```\n\n我遇到dll，wasm，后缀的文件压缩无效。因为gzip_types ，没有配置他们的Content-Type。我们在浏览器中找到响应头**Content-Type: application/octet-stream**\n\n\n最后执行\n```\nnginx -t\nnginx -s reload\n```\n\n### 打开网站看效果\n\n#### [http://baimocore.cn:8081](http://baimocore.cn:8081)","source":"_posts/dotnetcore/Blazor-WebAssembly-ToDoList.md","raw":"\n---\ntitle: ASP.NET Core Blazor WebAssembly实现一个简单的TODO List\ndate: 2020-06-06 20:09:07\ntags:\n- ASP.NET Core\n- Blazor\n- WebAssembly\ncategory:\n- .NET Core\n---\n\n\n## 基于blazor实现的一个简单的TODO List\n\n最近看到一些大佬都开始关注blazor，我也想学习一下。做了一个小的demo，todolist，仅是一个小示例，参考此vue项目的实现[http://www.jq22.com/code1339](http://www.jq22.com/code1339)\n\n<!-- more -->\n先看实现的效果图\n\n[![](https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif)](https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif)\n\n不BB,直接可以去看\n### 源码与预览地址\n\n- 示例地址 [http://baimocore.cn:8081/](http://baimocore.cn:8081/)\n- 源码地址 [https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList](https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList)\n\n\n\n\n### 源码介绍\n\n我们这里删除了默认的一些源码。只保留最简单的结构,在Pages/Index.razor中。\n\n@code代码结构中写如下内容\n\n1. 创建一个类，里面包含 id,label,isdone三个属性值。\n\n```\npublic class TodoItem\n{\n    public TodoItem () { }\n    public TodoItem (int id, string label, bool isDone)\n    {\n        Id = id;\n        Label = label;\n        IsDone = isDone;\n    }\n    public int Id { get; set; }\n    public string Label { get; set; }\n    public bool IsDone { get; set; }\n}\n```\n\n\n2. 我们可以通过override重写初始化，并给Todos设置一些数据。\n```\nprivate IList<TodoItem> Todos;\nprivate int id = 0;\nprotected override void OnInitialized ()\n{\n    Todos = new List<TodoItem> ()\n    {\n        new TodoItem (++id, \"Learn Blazor\", false),\n        new TodoItem (++id, \"Code a todo list\", false),\n        new TodoItem (++id, \"Learn something else\", false)\n    };\n}\n```\n\n\n展示还有多少未完成的任务 \n\n```\n<h1>\n        Todo List(@Todos.Count(todo => !todo.IsDone))\n        <span>Get things done, one item at a time.</span>\n</h1>\n```\n当任务没有时，我们展示默认效果，提示用户无任务\n```\n<p class=\"emptylist\" style=\"display: @(Todos.Count()>0?\"none\":\"\");\">Your todo list is empty.</p>\n```\n\n新增一个任务\n```\n<form name=\"newform\">\n    <label for=\"newitem\">Add to the todo list</label>\n    <input type=\"text\" name=\"newitem\" id=\"newitem\" @bind-value=\"Label\">\n    <button type=\"button\" @onclick=\"AddItem\">Add item</button>\n</form>\n```\n这里我们用了一个Label变量，一个onclick事件。\n```\nprivate string Label;\n\nprivate void AddItem()\n{\n    if (!string.IsNullOrWhiteSpace(Label))\n    {\n        Todos.Add (new TodoItem { Id = ++id, Label = Label });\n        Label = string.Empty;\n    }\n    this.SortByStatus();\n}\n```\n\n**this.SortByStatus**\n因为我们这里还实现一个功能，就是当勾选（当任务完成时，我们将他移到最下面）\n\n```\n<div class=\"togglebutton-wrapper@(IsActive==true?\" togglebutton-checked\":\"\")\">\n    <label for=\"todosort\">\n        <span class=\"togglebutton-Label\">Move done items at the end?</span>\n        <span class=\"tooglebutton-box\"></span>\n    </label>\n    <input type=\"checkbox\" name=\"todosort\" id=\"todosort\" value=\"@IsActive\" @onchange=\"ActiveChanged\">\n</div>\n```\n\n一个IsActive的变量，用于指示当前checkbox的样式，是否开启已完成的任务移动到最下面。当勾选时，改变IsActive的值。并调用排序的功能。\n\n```\nprivate bool IsActive = false;\nprivate void ActiveChanged()\n{\n    this.IsActive = !this.IsActive;\n    this.SortByStatus();\n}\nprivate void SortByStatus()\n{\n    if (this.IsActive)\n    {\n        Todos = Todos.OrderBy(r => r.IsDone).ThenByDescending(r => r.Id).ToList();\n    }\n    else\n    {\n        Todos = Todos.OrderByDescending(r => r.Id).ToList();\n    }\n}\n```\n\n对于列表的展示我们使用如下ul li @for实现\n```\n<ul>\n    @foreach (var item in Todos)\n    {\n        <li stagger=\"5000\" class=\"@(item.IsDone?\"done\":\"\")\">\n            <span class=\"label\">@item.Label</span>\n            <div class=\"actions\">\n                <button class=\"btn-picto\" type=\"button\"\n                        @onclick=\"@((e)=> {MarkAsDoneOrUndone(item);})\"\n                        title=\"@(item.IsDone ? \"Undone\" :\"Done\")\"\n                        aria-label=\"@(item.IsDone ? \"Undone\" :\"Done\")\">\n                    <i aria-hidden=\"true\" class=\"material-icons\">@(item.IsDone ? \"check_box\" : \"check_box_outline_blank\")</i>\n                </button>\n                <button class=\"btn-picto\" type=\"button\"\n                        @onclick=\"@((e)=> { DeleteItemFromList(item); })\"\n                        aria-Label=\"Delete\" title=\"Delete\">\n                    <i aria-hidden=\"true\" class=\"material-icons\">delete</i>\n                </button>\n            </div>\n        </li>\n    }\n</ul>\n```\n循环Todos，然后，根据item.IsDone，改变li的样式，从而实现一个中划线的功能，二个按钮的功能，一个是勾选任务表示此任务已完成，另一个是删除此任务。同理，我们仍然通过IsDone来标识完成任务的图标，标题等。\n\n- 任务设置已完成/设置为未完成： @onclick调用方法MarkAsDoneOrUndone，并将当前的一行记录item传给方法，需要使用一个匿名函数调用@code中的方法,将isDone取相反的值，并重新排序。\n\n```\nprivate void MarkAsDoneOrUndone(TodoItem item)\n{\n    item.IsDone = !item.IsDone;\n    this.SortByStatus();\n}\n```\n- 删除一个任务，同理，使用匿名函数，DeleteItemFromList直接通过IList的方法Remove删除一个对象，并排序。\n```\nprivate void DeleteItemFromList(TodoItem item)\n{\n    Todos.Remove(item);\n    this.SortByStatus();\n}\n```\n\n当然，我们可以 在ul，外包裹一层,根据Count判断有没有任务，从而显示这个列表。\n\n```   \n<div style=\"display: @(Todos.Count()>0?\"\":\"none\");\"><ul>xxx</ul></div>\n```\n\n其他的样式与图标，请看最上面的源码wwwroot/css目录获取。\n\n### deploy(部署)\n\n- 有兴趣的可以看官网 [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio)\n\n在项目根目录执行如下命令\n\n```\ndotnet publish -c Release\n```\n\n我们就能得到一个发布包，他的位置在 **（BlazorAppTodoList\\bin\\Release\\netstandard2.1\\publish）** ，我们把他复制到服务器上，这里我放到/var/www/todolilst目录中。\n\n\n它相当于一个静态文件，你可以将他部署到任何一个web服务器上。\n\n这里我们把他放到nginx中，并在目录/etc/nginx/conf.d/ 新建一个文件 todolist.conf，然后放入如下内容。\n\n```\n server {\n        listen 8081;\n\n        location / {\n            root /var/www/todolist/wwwroot;\n            try_files $uri $uri/ /index.html =404;\n        }\n}\n```\n\n记得在etc/nginx/nginx.conf中配置gzip压缩。\n\n\n```\ngzip  on;\ngzip_min_length 5k; #gzip压缩最小文件大小，超出进行压缩（自行调节）\ngzip_buffers 4 16k; #buffer 不用修改\ngzip_comp_level 8; #压缩级别:1-10，数字越大压缩的越好，时间也越长\ngzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/octet-stream; #  压缩文件类型 \ngzip_vary on; # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩\n```\n\n我遇到dll，wasm，后缀的文件压缩无效。因为gzip_types ，没有配置他们的Content-Type。我们在浏览器中找到响应头**Content-Type: application/octet-stream**\n\n\n最后执行\n```\nnginx -t\nnginx -s reload\n```\n\n### 打开网站看效果\n\n#### [http://baimocore.cn:8081](http://baimocore.cn:8081)","slug":"dotnetcore/Blazor-WebAssembly-ToDoList","published":1,"updated":"2020-06-06T12:54:08.188Z","_id":"ckb3n24k500002ouxucocswfp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基于blazor实现的一个简单的TODO-List\"><a href=\"#基于blazor实现的一个简单的TODO-List\" class=\"headerlink\" title=\"基于blazor实现的一个简单的TODO List\"></a>基于blazor实现的一个简单的TODO List</h2><p>最近看到一些大佬都开始关注blazor，我也想学习一下。做了一个小的demo，todolist，仅是一个小示例，参考此vue项目的实现<a href=\"http://www.jq22.com/code1339\" target=\"_blank\" rel=\"noopener\">http://www.jq22.com/code1339</a></p>\n<a id=\"more\"></a>\n<p>先看实现的效果图</p>\n<p><a href=\"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif\" alt></a></p>\n<p>不BB,直接可以去看</p>\n<h3 id=\"源码与预览地址\"><a href=\"#源码与预览地址\" class=\"headerlink\" title=\"源码与预览地址\"></a>源码与预览地址</h3><ul>\n<li>示例地址 <a href=\"http://baimocore.cn:8081/\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn:8081/</a></li>\n<li>源码地址 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList</a></li>\n</ul>\n<h3 id=\"源码介绍\"><a href=\"#源码介绍\" class=\"headerlink\" title=\"源码介绍\"></a>源码介绍</h3><p>我们这里删除了默认的一些源码。只保留最简单的结构,在Pages/Index.razor中。</p>\n<p>@code代码结构中写如下内容</p>\n<ol>\n<li>创建一个类，里面包含 id,label,isdone三个属性值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class TodoItem</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public TodoItem () &#123; &#125;</span><br><span class=\"line\">    public TodoItem (int id, string label, bool isDone)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Id = id;</span><br><span class=\"line\">        Label = label;</span><br><span class=\"line\">        IsDone = isDone;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int Id &#123; get; set; &#125;</span><br><span class=\"line\">    public string Label &#123; get; set; &#125;</span><br><span class=\"line\">    public bool IsDone &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>我们可以通过override重写初始化，并给Todos设置一些数据。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private IList&lt;TodoItem&gt; Todos;</span><br><span class=\"line\">private int id = 0;</span><br><span class=\"line\">protected override void OnInitialized ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Todos = new List&lt;TodoItem&gt; ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        new TodoItem (++id, &quot;Learn Blazor&quot;, false),</span><br><span class=\"line\">        new TodoItem (++id, &quot;Code a todo list&quot;, false),</span><br><span class=\"line\">        new TodoItem (++id, &quot;Learn something else&quot;, false)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>展示还有多少未完成的任务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">        Todo List(@Todos.Count(todo =&gt; !todo.IsDone))</span><br><span class=\"line\">        &lt;span&gt;Get things done, one item at a time.&lt;/span&gt;</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当任务没有时，我们展示默认效果，提示用户无任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p class=&quot;emptylist&quot; style=&quot;display: @(Todos.Count()&gt;0?&quot;none&quot;:&quot;&quot;);&quot;&gt;Your todo list is empty.&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新增一个任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;newform&quot;&gt;</span><br><span class=\"line\">    &lt;label for=&quot;newitem&quot;&gt;Add to the todo list&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;newitem&quot; id=&quot;newitem&quot; @bind-value=&quot;Label&quot;&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @onclick=&quot;AddItem&quot;&gt;Add item&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们用了一个Label变量，一个onclick事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string Label;</span><br><span class=\"line\"></span><br><span class=\"line\">private void AddItem()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!string.IsNullOrWhiteSpace(Label))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos.Add (new TodoItem &#123; Id = ++id, Label = Label &#125;);</span><br><span class=\"line\">        Label = string.Empty;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>this.SortByStatus</strong><br>因为我们这里还实现一个功能，就是当勾选（当任务完成时，我们将他移到最下面）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;togglebutton-wrapper@(IsActive==true?&quot; togglebutton-checked&quot;:&quot;&quot;)&quot;&gt;</span><br><span class=\"line\">    &lt;label for=&quot;todosort&quot;&gt;</span><br><span class=\"line\">        &lt;span class=&quot;togglebutton-Label&quot;&gt;Move done items at the end?&lt;/span&gt;</span><br><span class=\"line\">        &lt;span class=&quot;tooglebutton-box&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; name=&quot;todosort&quot; id=&quot;todosort&quot; value=&quot;@IsActive&quot; @onchange=&quot;ActiveChanged&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一个IsActive的变量，用于指示当前checkbox的样式，是否开启已完成的任务移动到最下面。当勾选时，改变IsActive的值。并调用排序的功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private bool IsActive = false;</span><br><span class=\"line\">private void ActiveChanged()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.IsActive = !this.IsActive;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private void SortByStatus()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (this.IsActive)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos = Todos.OrderBy(r =&gt; r.IsDone).ThenByDescending(r =&gt; r.Id).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos = Todos.OrderByDescending(r =&gt; r.Id).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于列表的展示我们使用如下ul li @for实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    @foreach (var item in Todos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &lt;li stagger=&quot;5000&quot; class=&quot;@(item.IsDone?&quot;done&quot;:&quot;&quot;)&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;label&quot;&gt;@item.Label&lt;/span&gt;</span><br><span class=\"line\">            &lt;div class=&quot;actions&quot;&gt;</span><br><span class=\"line\">                &lt;button class=&quot;btn-picto&quot; type=&quot;button&quot;</span><br><span class=\"line\">                        @onclick=&quot;@((e)=&gt; &#123;MarkAsDoneOrUndone(item);&#125;)&quot;</span><br><span class=\"line\">                        title=&quot;@(item.IsDone ? &quot;Undone&quot; :&quot;Done&quot;)&quot;</span><br><span class=\"line\">                        aria-label=&quot;@(item.IsDone ? &quot;Undone&quot; :&quot;Done&quot;)&quot;&gt;</span><br><span class=\"line\">                    &lt;i aria-hidden=&quot;true&quot; class=&quot;material-icons&quot;&gt;@(item.IsDone ? &quot;check_box&quot; : &quot;check_box_outline_blank&quot;)&lt;/i&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">                &lt;button class=&quot;btn-picto&quot; type=&quot;button&quot;</span><br><span class=\"line\">                        @onclick=&quot;@((e)=&gt; &#123; DeleteItemFromList(item); &#125;)&quot;</span><br><span class=\"line\">                        aria-Label=&quot;Delete&quot; title=&quot;Delete&quot;&gt;</span><br><span class=\"line\">                    &lt;i aria-hidden=&quot;true&quot; class=&quot;material-icons&quot;&gt;delete&lt;/i&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>循环Todos，然后，根据item.IsDone，改变li的样式，从而实现一个中划线的功能，二个按钮的功能，一个是勾选任务表示此任务已完成，另一个是删除此任务。同理，我们仍然通过IsDone来标识完成任务的图标，标题等。</p>\n<ul>\n<li>任务设置已完成/设置为未完成： @onclick调用方法MarkAsDoneOrUndone，并将当前的一行记录item传给方法，需要使用一个匿名函数调用@code中的方法,将isDone取相反的值，并重新排序。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void MarkAsDoneOrUndone(TodoItem item)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    item.IsDone = !item.IsDone;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除一个任务，同理，使用匿名函数，DeleteItemFromList直接通过IList的方法Remove删除一个对象，并排序。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void DeleteItemFromList(TodoItem item)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Todos.Remove(item);</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>当然，我们可以 在ul，外包裹一层,根据Count判断有没有任务，从而显示这个列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;display: @(Todos.Count()&gt;0?&quot;&quot;:&quot;none&quot;);&quot;&gt;&lt;ul&gt;xxx&lt;/ul&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其他的样式与图标，请看最上面的源码wwwroot/css目录获取。</p>\n<h3 id=\"deploy-部署\"><a href=\"#deploy-部署\" class=\"headerlink\" title=\"deploy(部署)\"></a>deploy(部署)</h3><ul>\n<li>有兴趣的可以看官网 <a href=\"https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&amp;tabs=visual-studio</a></li>\n</ul>\n<p>在项目根目录执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet publish -c Release</span><br></pre></td></tr></table></figure>\n\n<p>我们就能得到一个发布包，他的位置在 <strong>（BlazorAppTodoList\\bin\\Release\\netstandard2.1\\publish）</strong> ，我们把他复制到服务器上，这里我放到/var/www/todolilst目录中。</p>\n<p>它相当于一个静态文件，你可以将他部署到任何一个web服务器上。</p>\n<p>这里我们把他放到nginx中，并在目录/etc/nginx/conf.d/ 新建一个文件 todolist.conf，然后放入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen 8081;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root /var/www/todolist/wwwroot;</span><br><span class=\"line\">            try_files $uri $uri/ /index.html =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记得在etc/nginx/nginx.conf中配置gzip压缩。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gzip  on;</span><br><span class=\"line\">gzip_min_length 5k; #gzip压缩最小文件大小，超出进行压缩（自行调节）</span><br><span class=\"line\">gzip_buffers 4 16k; #buffer 不用修改</span><br><span class=\"line\">gzip_comp_level 8; #压缩级别:1-10，数字越大压缩的越好，时间也越长</span><br><span class=\"line\">gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/octet-stream; #  压缩文件类型 </span><br><span class=\"line\">gzip_vary on; # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span><br></pre></td></tr></table></figure>\n\n<p>我遇到dll，wasm，后缀的文件压缩无效。因为gzip_types ，没有配置他们的Content-Type。我们在浏览器中找到响应头<strong>Content-Type: application/octet-stream</strong></p>\n<p>最后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开网站看效果\"><a href=\"#打开网站看效果\" class=\"headerlink\" title=\"打开网站看效果\"></a>打开网站看效果</h3><h4 id=\"http-baimocore-cn-8081\"><a href=\"#http-baimocore-cn-8081\" class=\"headerlink\" title=\"http://baimocore.cn:8081\"></a><a href=\"http://baimocore.cn:8081\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn:8081</a></h4>","site":{"data":{}},"excerpt":"<h2 id=\"基于blazor实现的一个简单的TODO-List\"><a href=\"#基于blazor实现的一个简单的TODO-List\" class=\"headerlink\" title=\"基于blazor实现的一个简单的TODO List\"></a>基于blazor实现的一个简单的TODO List</h2><p>最近看到一些大佬都开始关注blazor，我也想学习一下。做了一个小的demo，todolist，仅是一个小示例，参考此vue项目的实现<a href=\"http://www.jq22.com/code1339\" target=\"_blank\" rel=\"noopener\">http://www.jq22.com/code1339</a></p>","more":"<p>先看实现的效果图</p>\n<p><a href=\"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif\" alt></a></p>\n<p>不BB,直接可以去看</p>\n<h3 id=\"源码与预览地址\"><a href=\"#源码与预览地址\" class=\"headerlink\" title=\"源码与预览地址\"></a>源码与预览地址</h3><ul>\n<li>示例地址 <a href=\"http://baimocore.cn:8081/\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn:8081/</a></li>\n<li>源码地址 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/blazor/BlazorAppTodoList</a></li>\n</ul>\n<h3 id=\"源码介绍\"><a href=\"#源码介绍\" class=\"headerlink\" title=\"源码介绍\"></a>源码介绍</h3><p>我们这里删除了默认的一些源码。只保留最简单的结构,在Pages/Index.razor中。</p>\n<p>@code代码结构中写如下内容</p>\n<ol>\n<li>创建一个类，里面包含 id,label,isdone三个属性值。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class TodoItem</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public TodoItem () &#123; &#125;</span><br><span class=\"line\">    public TodoItem (int id, string label, bool isDone)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Id = id;</span><br><span class=\"line\">        Label = label;</span><br><span class=\"line\">        IsDone = isDone;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int Id &#123; get; set; &#125;</span><br><span class=\"line\">    public string Label &#123; get; set; &#125;</span><br><span class=\"line\">    public bool IsDone &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>我们可以通过override重写初始化，并给Todos设置一些数据。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private IList&lt;TodoItem&gt; Todos;</span><br><span class=\"line\">private int id = 0;</span><br><span class=\"line\">protected override void OnInitialized ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Todos = new List&lt;TodoItem&gt; ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        new TodoItem (++id, &quot;Learn Blazor&quot;, false),</span><br><span class=\"line\">        new TodoItem (++id, &quot;Code a todo list&quot;, false),</span><br><span class=\"line\">        new TodoItem (++id, &quot;Learn something else&quot;, false)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>展示还有多少未完成的任务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">        Todo List(@Todos.Count(todo =&gt; !todo.IsDone))</span><br><span class=\"line\">        &lt;span&gt;Get things done, one item at a time.&lt;/span&gt;</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当任务没有时，我们展示默认效果，提示用户无任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p class=&quot;emptylist&quot; style=&quot;display: @(Todos.Count()&gt;0?&quot;none&quot;:&quot;&quot;);&quot;&gt;Your todo list is empty.&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新增一个任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;newform&quot;&gt;</span><br><span class=\"line\">    &lt;label for=&quot;newitem&quot;&gt;Add to the todo list&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;newitem&quot; id=&quot;newitem&quot; @bind-value=&quot;Label&quot;&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @onclick=&quot;AddItem&quot;&gt;Add item&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们用了一个Label变量，一个onclick事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string Label;</span><br><span class=\"line\"></span><br><span class=\"line\">private void AddItem()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!string.IsNullOrWhiteSpace(Label))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos.Add (new TodoItem &#123; Id = ++id, Label = Label &#125;);</span><br><span class=\"line\">        Label = string.Empty;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>this.SortByStatus</strong><br>因为我们这里还实现一个功能，就是当勾选（当任务完成时，我们将他移到最下面）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;togglebutton-wrapper@(IsActive==true?&quot; togglebutton-checked&quot;:&quot;&quot;)&quot;&gt;</span><br><span class=\"line\">    &lt;label for=&quot;todosort&quot;&gt;</span><br><span class=\"line\">        &lt;span class=&quot;togglebutton-Label&quot;&gt;Move done items at the end?&lt;/span&gt;</span><br><span class=\"line\">        &lt;span class=&quot;tooglebutton-box&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; name=&quot;todosort&quot; id=&quot;todosort&quot; value=&quot;@IsActive&quot; @onchange=&quot;ActiveChanged&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一个IsActive的变量，用于指示当前checkbox的样式，是否开启已完成的任务移动到最下面。当勾选时，改变IsActive的值。并调用排序的功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private bool IsActive = false;</span><br><span class=\"line\">private void ActiveChanged()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.IsActive = !this.IsActive;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private void SortByStatus()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (this.IsActive)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos = Todos.OrderBy(r =&gt; r.IsDone).ThenByDescending(r =&gt; r.Id).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Todos = Todos.OrderByDescending(r =&gt; r.Id).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于列表的展示我们使用如下ul li @for实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    @foreach (var item in Todos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &lt;li stagger=&quot;5000&quot; class=&quot;@(item.IsDone?&quot;done&quot;:&quot;&quot;)&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;label&quot;&gt;@item.Label&lt;/span&gt;</span><br><span class=\"line\">            &lt;div class=&quot;actions&quot;&gt;</span><br><span class=\"line\">                &lt;button class=&quot;btn-picto&quot; type=&quot;button&quot;</span><br><span class=\"line\">                        @onclick=&quot;@((e)=&gt; &#123;MarkAsDoneOrUndone(item);&#125;)&quot;</span><br><span class=\"line\">                        title=&quot;@(item.IsDone ? &quot;Undone&quot; :&quot;Done&quot;)&quot;</span><br><span class=\"line\">                        aria-label=&quot;@(item.IsDone ? &quot;Undone&quot; :&quot;Done&quot;)&quot;&gt;</span><br><span class=\"line\">                    &lt;i aria-hidden=&quot;true&quot; class=&quot;material-icons&quot;&gt;@(item.IsDone ? &quot;check_box&quot; : &quot;check_box_outline_blank&quot;)&lt;/i&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">                &lt;button class=&quot;btn-picto&quot; type=&quot;button&quot;</span><br><span class=\"line\">                        @onclick=&quot;@((e)=&gt; &#123; DeleteItemFromList(item); &#125;)&quot;</span><br><span class=\"line\">                        aria-Label=&quot;Delete&quot; title=&quot;Delete&quot;&gt;</span><br><span class=\"line\">                    &lt;i aria-hidden=&quot;true&quot; class=&quot;material-icons&quot;&gt;delete&lt;/i&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>循环Todos，然后，根据item.IsDone，改变li的样式，从而实现一个中划线的功能，二个按钮的功能，一个是勾选任务表示此任务已完成，另一个是删除此任务。同理，我们仍然通过IsDone来标识完成任务的图标，标题等。</p>\n<ul>\n<li>任务设置已完成/设置为未完成： @onclick调用方法MarkAsDoneOrUndone，并将当前的一行记录item传给方法，需要使用一个匿名函数调用@code中的方法,将isDone取相反的值，并重新排序。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void MarkAsDoneOrUndone(TodoItem item)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    item.IsDone = !item.IsDone;</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除一个任务，同理，使用匿名函数，DeleteItemFromList直接通过IList的方法Remove删除一个对象，并排序。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void DeleteItemFromList(TodoItem item)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Todos.Remove(item);</span><br><span class=\"line\">    this.SortByStatus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>当然，我们可以 在ul，外包裹一层,根据Count判断有没有任务，从而显示这个列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;display: @(Todos.Count()&gt;0?&quot;&quot;:&quot;none&quot;);&quot;&gt;&lt;ul&gt;xxx&lt;/ul&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其他的样式与图标，请看最上面的源码wwwroot/css目录获取。</p>\n<h3 id=\"deploy-部署\"><a href=\"#deploy-部署\" class=\"headerlink\" title=\"deploy(部署)\"></a>deploy(部署)</h3><ul>\n<li>有兴趣的可以看官网 <a href=\"https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&tabs=visual-studio\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/blazor/?view=aspnetcore-3.1&amp;tabs=visual-studio</a></li>\n</ul>\n<p>在项目根目录执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet publish -c Release</span><br></pre></td></tr></table></figure>\n\n<p>我们就能得到一个发布包，他的位置在 <strong>（BlazorAppTodoList\\bin\\Release\\netstandard2.1\\publish）</strong> ，我们把他复制到服务器上，这里我放到/var/www/todolilst目录中。</p>\n<p>它相当于一个静态文件，你可以将他部署到任何一个web服务器上。</p>\n<p>这里我们把他放到nginx中，并在目录/etc/nginx/conf.d/ 新建一个文件 todolist.conf，然后放入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen 8081;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root /var/www/todolist/wwwroot;</span><br><span class=\"line\">            try_files $uri $uri/ /index.html =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记得在etc/nginx/nginx.conf中配置gzip压缩。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gzip  on;</span><br><span class=\"line\">gzip_min_length 5k; #gzip压缩最小文件大小，超出进行压缩（自行调节）</span><br><span class=\"line\">gzip_buffers 4 16k; #buffer 不用修改</span><br><span class=\"line\">gzip_comp_level 8; #压缩级别:1-10，数字越大压缩的越好，时间也越长</span><br><span class=\"line\">gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/octet-stream; #  压缩文件类型 </span><br><span class=\"line\">gzip_vary on; # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span><br></pre></td></tr></table></figure>\n\n<p>我遇到dll，wasm，后缀的文件压缩无效。因为gzip_types ，没有配置他们的Content-Type。我们在浏览器中找到响应头<strong>Content-Type: application/octet-stream</strong></p>\n<p>最后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开网站看效果\"><a href=\"#打开网站看效果\" class=\"headerlink\" title=\"打开网站看效果\"></a>打开网站看效果</h3><h4 id=\"http-baimocore-cn-8081\"><a href=\"#http-baimocore-cn-8081\" class=\"headerlink\" title=\"http://baimocore.cn:8081\"></a><a href=\"http://baimocore.cn:8081\" target=\"_blank\" rel=\"noopener\">http://baimocore.cn:8081</a></h4>","popularPost_tmp_postPath":false,"eyeCatchImage":"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif","popularPost_tmp_gaData":{"updated":"Sat Jun 06 2020 20:54:08 GMT+0800 (GMT+08:00)","title":"ASP.NET Core Blazor WebAssembly实现一个简单的TODO List","path":"2020/06/06/dotnetcore/Blazor-WebAssembly-ToDoList/","eyeCatchImage":"https://pic.downk.cc/item/5edb68bec2a9a83be5a8ef20.gif","excerpt":"<h2 id=\"基于blazor实现的一个简单的TODO-List\"><a href=\"#基于blazor实现的一个简单的TODO-List\" class=\"headerlink\" title=\"基于blazor实现的一个简单的TODO List\"></a>基于blazor实现的一个简单的TODO List</h2><p>最近看到一些大佬都开始关注blazor，我也想学习一下。做了一个小的demo，todolist，仅是一个小示例，参考此vue项目的实现<a href=\"http://www.jq22.com/code1339\" target=\"_blank\" rel=\"noopener\">http://www.jq22.com/code1339</a></p>","date":"2020-06-06T12:09:07.000Z","pv":0,"totalPV":0,"categories":".NET Core","tags":["ASP.NET Core","Blazor","WebAssembly"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"SPA+.NET Core3.1 GitHub第三方授权登录 使用AspNet.Security.OAuth.GitHub","date":"2019-12-27T15:12:00.000Z","_content":"\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n","source":"_posts/lin-cms-dotnetcore/spa-github-login.md","raw":"---\ntitle: SPA+.NET Core3.1 GitHub第三方授权登录 使用AspNet.Security.OAuth.GitHub\ndate: 2019-12-27 23:12\ntags:\n- 开源\n- .NET Core\n- lin-cms\n- GitHub\ncategory:\n- lin-cms-dotnetcore\n---\n\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n## GitHub第三方授权登录\n使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios\n\n## AspNet.Security.OAuth.GitHub\n- GitHub [https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers)\n\n## GitHub授权登录\n什么配置的过程不说了。。有一推。\n\n- [GitHub 第三方登录](https://www.jianshu.com/p/78d186aeb526)\n- [给你的网站添加第三方登录以及短信验证功能](https://juejin.im/post/5dfb04cee51d45583a66c2f3)\n\n\n下面为示例\n\n```\nclient_id:0be6b05fc717bfc4fb67\nclient_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609\n```\nGet\n```\nhttps://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&redirect_uri=https://localhost:5001/signin-github\n```\n会重定向到\n\n[https://localhost:5001/signin-github?code=07537a84d12bbae08361](https://localhost:5001/signin-github?code=07537a84d12bbae08361)\n\n这个code放到下面的请求中，获取access_token\nPOST方式（PostMan去请求）\n```\nhttps://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&code=07537a84d12bbae08361\n```\n\nGet方式\n```\nhttps://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n```\n\n然后就能获取用户信息\n\n ```\n{\n    \"login\": \"luoyunchong\",\n    \"id\": 18613266,\n    \"node_id\": \"MDQ6VXNlcjE4NjEzMjY2\",\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18613266?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/luoyunchong\",\n    \"html_url\": \"https://github.com/luoyunchong\",\n    \"followers_url\": \"https://api.github.com/users/luoyunchong/followers\",\n    \"following_url\": \"https://api.github.com/users/luoyunchong/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/luoyunchong/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/luoyunchong/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/luoyunchong/orgs\",\n    \"repos_url\": \"https://api.github.com/users/luoyunchong/repos\",\n    \"events_url\": \"https://api.github.com/users/luoyunchong/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/luoyunchong/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": \"IGeekFan\",\n    \"company\": null,\n    \"blog\": \"https://blog.igeekfan.cn\",\n    \"location\": null,\n    \"email\": \"luoyunchong@foxmail.com\",\n    \"hireable\": null,\n    \"bio\": \"学习之路漫漫无期。\",\n    \"public_repos\": 14,\n    \"public_gists\": 0,\n    \"followers\": 16,\n    \"following\": 11,\n    \"created_at\": \"2016-04-22T10:33:44Z\",\n    \"updated_at\": \"2019-12-21T14:49:33Z\"\n}\n  ```\n  \n\n## .NET Core3.1\n以下代码为主要代码，完整代码看下面的DEMO链接。\n\n使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。\n\n- 前端运行在:http://localhost:8081\n- 后端运行在:https://localhost:5001\n### 前后端分离的SPA 配合第三方授权登录流程如下\n\n本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github\n- 如: https://localhost:5001/signin-github。\n\n#### 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\n\n前端请求**https://localhost:5001/signin?provider=GitHub&redirectUrl=http://localhost:8080/login-result**\n- 提供参数provider为GitHub，\n- redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。\n    \n#### 2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\n[google-登录，微软文档](https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1)，其中有一个**更改默认回调 URI**,通过 AddGitHub中的CallbackPath属性配置。\n\n介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。\n\n#### 3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\n\n具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。\n\n一个方法SignIn,只要**return Challenge(properties, provider);**，\n- provider 为 GitHub，\n- properties  var properties = new AuthenticationProperties { RedirectUri = url };\n\n这个url为另一个获取用户信息的路由，只要拼接好地址即可。\n\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n```\n需要注入\n```\nprivate readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n```\n### 代码部署（简化）\n\n打开NuGet包管理,安装包\n```\nInstall-Package AspNet.Security.OAuth.GitHub\n```\n\nappSettings.json\n```\n\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n    }\n}\n```\n\nadd扩展方法 \n\n```\npublic static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n```\n默认情况下，如头像，email，是没有获取的。\n```\n.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n```\nstartup.cs\n\nConfigureServices中配置此服务\n```\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n```\n\n创建AuthenticationController.cs\n增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。\n```\n        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n        \n        [HttpGet(\"~/signin\")]\n        public async Task<IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n```\n\n在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：http://localhost:8081/login-result.\n```\n[HttpGet(\"~/signin-callback\")]\npublic async Task<IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息 \n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n```\n\n这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。\n\n- 浏览器直接打开能得到github的id。\n- axios GET请求 https://localhost:5001/OpenId 得到null\n ```\n[HttpGet(\"~/OpenId\")]\npublic async Task<string> OpenId(string provider = null)\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return null;\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    return openIdClaim?.Value;\n}\n ```\n\n我记得之前传Token时，后台是可以这样获取的。\n```\n[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n ```\n \nLoginResult.vue在created生命周期中。都是得到null\n```\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n```\n\n### 为什么呢？？？\n\n因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。\n\n安装包\n```\nInstall-Package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nAppSettings.json配置改成\n```\n\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"dcaced9f176afba64e89d88b9b06ffc4a887a609\"\n}\n}\n```\n\n\n在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)\n```\nvar authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring token = this.CreateToken(authenticateResult.Principal);\n```\n根据ClaimsPrincipal值生成token值。\n```\nprivate string CreateToken(ClaimsPrincipal claimsPrincipal)\n{\n\n    var handler = new JwtSecurityTokenHandler();\n    var key = new SymmetricSecurityKey(\n        Encoding.UTF8.GetBytes(_configuration[\"Authentication:JwtBearer:SecurityKey\"]));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var token = new JwtSecurityToken(\n        _configuration[\"Authentication:JwtBearer:Issuer\"],\n        _configuration[\"Authentication:JwtBearer:Audience\"],\n        claimsPrincipal.Claims,\n        expires: DateTime.Now.AddMinutes(30),\n        signingCredentials: credentials\n    );\n\n    return handler.WriteToken(token);\n}\n```\n\n这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。\n\n\n| Claim                           | ClaimsIdentity                                            | ClaimsPrincipal        |\n| ------------------------------- | --------------------------------------------------------- | ---------------------- |\n| id、name,url,email,avatar_url等 | 由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。 | ClaimsIdentity的持有者 |\n\n具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）[https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n\n\n\nAddJwtConfiguration改成如下内容\n```\npublic static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n{\n\n    services.AddAuthentication(opts =>\n        {\n            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        }).AddCookie(options =>\n    {\n        options.LoginPath = \"/signin\";\n        options.LogoutPath = \"/signout\";\n    }).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // The signing key must match!\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n\n            // Validate the JWT Issuer (iss) claim\n            ValidateIssuer = true,\n            ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n\n            // Validate the JWT Audience (aud) claim\n            ValidateAudience = true,\n            ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n\n            // Validate the token expiry\n            ValidateLifetime = true,\n\n            // If you want to allow a certain amount of clock drift, set that here\n            //ClockSkew = TimeSpan.Zero\n        };\n    }).AddGitHub(options =>\n    {\n        options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n        options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n        options.Scope.Add(\"user:email\");\n        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n    });\n}\n```\n\n[前端LoginResult.vue代码](https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue)\n\n前端运行\n```\nyarn install\nyarn serve\n```\n点击GitHub登录\n\nGetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。\n```\ndata: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n```\n\n\nOpenId?provider=GitHub则得不到数据，只能浏览器直接请求https://localhost:5001/OpenId?provider=GitHub，才能到github 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。\n\n## 参考 \n- [.net Core2.2 WebApi通过OAuth2.0实现微信登录](https://www.cnblogs.com/rsls/p/10522649.html)\n- [AspNetCore3.0 和 JWT](https://blog.csdn.net/weixin_30414305/article/details/101389325)\n- [用户系统设计：第三方授权、账号绑定及解绑（下）](http://www.woshipm.com/pd/509712.html)\n\n## Demo  示例\n- GitHub [https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2](https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2)\n\n\n","slug":"lin-cms-dotnetcore/spa-github-login","published":1,"updated":"2020-03-06T05:28:47.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb3n24sn00072ouxjcxslk7m","content":"<h2 id=\"GitHub第三方授权登录\"><a href=\"#GitHub第三方授权登录\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub\"><a href=\"#AspNet-Security-OAuth-GitHub\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录\"><a href=\"#GitHub授权登录\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1\"><a href=\"#NET-Core3-1\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）\"><a href=\"#代码部署（简化）\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？\"><a href=\"#为什么呢？？？\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例\"><a href=\"#Demo-示例\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n<h2 id=\"GitHub第三方授权登录-1\"><a href=\"#GitHub第三方授权登录-1\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub-1\"><a href=\"#AspNet-Security-OAuth-GitHub-1\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录-1\"><a href=\"#GitHub授权登录-1\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1-1\"><a href=\"#NET-Core3-1-1\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下-1\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下-1\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-1\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-1\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-1\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-1\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-1\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-1\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）-1\"><a href=\"#代码部署（简化）-1\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？-1\"><a href=\"#为什么呢？？？-1\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例-1\"><a href=\"#Demo-示例-1\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n<h2 id=\"GitHub第三方授权登录-2\"><a href=\"#GitHub第三方授权登录-2\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub-2\"><a href=\"#AspNet-Security-OAuth-GitHub-2\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录-2\"><a href=\"#GitHub授权登录-2\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1-2\"><a href=\"#NET-Core3-1-2\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下-2\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下-2\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-2\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-2\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-2\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-2\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-2\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-2\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）-2\"><a href=\"#代码部署（简化）-2\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？-2\"><a href=\"#为什么呢？？？-2\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例-2\"><a href=\"#Demo-示例-2\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GitHub第三方授权登录\"><a href=\"#GitHub第三方授权登录\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub\"><a href=\"#AspNet-Security-OAuth-GitHub\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录\"><a href=\"#GitHub授权登录\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1\"><a href=\"#NET-Core3-1\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）\"><a href=\"#代码部署（简化）\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？\"><a href=\"#为什么呢？？？\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例\"><a href=\"#Demo-示例\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n<h2 id=\"GitHub第三方授权登录-1\"><a href=\"#GitHub第三方授权登录-1\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub-1\"><a href=\"#AspNet-Security-OAuth-GitHub-1\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录-1\"><a href=\"#GitHub授权登录-1\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1-1\"><a href=\"#NET-Core3-1-1\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下-1\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下-1\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-1\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-1\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-1\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-1\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-1\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-1\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）-1\"><a href=\"#代码部署（简化）-1\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？-1\"><a href=\"#为什么呢？？？-1\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例-1\"><a href=\"#Demo-示例-1\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n<h2 id=\"GitHub第三方授权登录-2\"><a href=\"#GitHub第三方授权登录-2\" class=\"headerlink\" title=\"GitHub第三方授权登录\"></a>GitHub第三方授权登录</h2><p>使用SPA+.NET Core3.1实现 GitHub第三方授权登录 类似使用AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"AspNet-Security-OAuth-GitHub-2\"><a href=\"#AspNet-Security-OAuth-GitHub-2\" class=\"headerlink\" title=\"AspNet.Security.OAuth.GitHub\"></a>AspNet.Security.OAuth.GitHub</h2><ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"GitHub授权登录-2\"><a href=\"#GitHub授权登录-2\" class=\"headerlink\" title=\"GitHub授权登录\"></a>GitHub授权登录</h2><p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_id:0be6b05fc717bfc4fb67</span><br><span class=\"line\">client_secret:dcaced9f176afba64e89d88b9b06ffc4a887a609</span><br></pre></td></tr></table></figure>\n\n<p>Get</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github</span><br></pre></td></tr></table></figure>\n\n<p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个code放到下面的请求中，获取access_token<br>POST方式（PostMan去请求）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=dcaced9f176afba64e89d88b9b06ffc4a887a609&amp;code=07537a84d12bbae08361</span><br></pre></td></tr></table></figure>\n\n<p>Get方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4</span><br></pre></td></tr></table></figure>\n\n<p>然后就能获取用户信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;login&quot;: &quot;luoyunchong&quot;,</span><br><span class=\"line\">    &quot;id&quot;: 18613266,</span><br><span class=\"line\">    &quot;node_id&quot;: &quot;MDQ6VXNlcjE4NjEzMjY2&quot;,</span><br><span class=\"line\">    &quot;avatar_url&quot;: &quot;https://avatars1.githubusercontent.com/u/18613266?v=4&quot;,</span><br><span class=\"line\">    &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://api.github.com/users/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;html_url&quot;: &quot;https://github.com/luoyunchong&quot;,</span><br><span class=\"line\">    &quot;followers_url&quot;: &quot;https://api.github.com/users/luoyunchong/followers&quot;,</span><br><span class=\"line\">    &quot;following_url&quot;: &quot;https://api.github.com/users/luoyunchong/following&#123;/other_user&#125;&quot;,</span><br><span class=\"line\">    &quot;gists_url&quot;: &quot;https://api.github.com/users/luoyunchong/gists&#123;/gist_id&#125;&quot;,</span><br><span class=\"line\">    &quot;starred_url&quot;: &quot;https://api.github.com/users/luoyunchong/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class=\"line\">    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/luoyunchong/subscriptions&quot;,</span><br><span class=\"line\">    &quot;organizations_url&quot;: &quot;https://api.github.com/users/luoyunchong/orgs&quot;,</span><br><span class=\"line\">    &quot;repos_url&quot;: &quot;https://api.github.com/users/luoyunchong/repos&quot;,</span><br><span class=\"line\">    &quot;events_url&quot;: &quot;https://api.github.com/users/luoyunchong/events&#123;/privacy&#125;&quot;,</span><br><span class=\"line\">    &quot;received_events_url&quot;: &quot;https://api.github.com/users/luoyunchong/received_events&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;User&quot;,</span><br><span class=\"line\">    &quot;site_admin&quot;: false,</span><br><span class=\"line\">    &quot;name&quot;: &quot;IGeekFan&quot;,</span><br><span class=\"line\">    &quot;company&quot;: null,</span><br><span class=\"line\">    &quot;blog&quot;: &quot;https://blog.igeekfan.cn&quot;,</span><br><span class=\"line\">    &quot;location&quot;: null,</span><br><span class=\"line\">    &quot;email&quot;: &quot;luoyunchong@foxmail.com&quot;,</span><br><span class=\"line\">    &quot;hireable&quot;: null,</span><br><span class=\"line\">    &quot;bio&quot;: &quot;学习之路漫漫无期。&quot;,</span><br><span class=\"line\">    &quot;public_repos&quot;: 14,</span><br><span class=\"line\">    &quot;public_gists&quot;: 0,</span><br><span class=\"line\">    &quot;followers&quot;: 16,</span><br><span class=\"line\">    &quot;following&quot;: 11,</span><br><span class=\"line\">    &quot;created_at&quot;: &quot;2016-04-22T10:33:44Z&quot;,</span><br><span class=\"line\">    &quot;updated_at&quot;: &quot;2019-12-21T14:49:33Z&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NET-Core3-1-2\"><a href=\"#NET-Core3-1-2\" class=\"headerlink\" title=\".NET Core3.1\"></a>.NET Core3.1</h2><p>以下代码为主要代码，完整代码看下面的DEMO链接。</p>\n<p>使用WebApi时，看了一些项目，全是基于MVC结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:<a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></li>\n<li>后端运行在:<a href=\"https://localhost:5001\" target=\"_blank\" rel=\"noopener\">https://localhost:5001</a><h3 id=\"前后端分离的SPA-配合第三方授权登录流程如下-2\"><a href=\"#前后端分离的SPA-配合第三方授权登录流程如下-2\" class=\"headerlink\" title=\"前后端分离的SPA 配合第三方授权登录流程如下\"></a>前后端分离的SPA 配合第三方授权登录流程如下</h3></li>\n</ul>\n<p>本地测试时，gitHub回调地址设置 http(s)://ip:端口/signin-github</p>\n<ul>\n<li>如: <a href=\"https://localhost:5001/signin-github。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin-github。</a></li>\n</ul>\n<h4 id=\"1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-2\"><a href=\"#1-上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？-2\" class=\"headerlink\" title=\"1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？\"></a>1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4><p>前端请求<strong><a href=\"https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</a></strong></p>\n<ul>\n<li>提供参数provider为GitHub，</li>\n<li>redirectUrl为GitHub授权登录后，回调signin-github后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-2\"><a href=\"#2-后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？-2\" class=\"headerlink\" title=\"2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？\"></a>2. 后端只提供了signin，signin-callback路由，没有signin-github，那github上配置的路由是怎么回调回来呢？</h4><p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub中的CallbackPath属性配置。</p>\n<p>介绍了回调地址应配置signin-google,所以这里应该是signin-github，他是可以配置的，不需要自己写程序处理signin-google这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-2\"><a href=\"#3-回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。-2\" class=\"headerlink\" title=\"3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。\"></a>3. 回调到signin-github后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4><p>具体上面的根据code获取access_token，根据access_token获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties  var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个url为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br></pre></td></tr></table></figure>\n\n<p>需要注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">public AuthenticationController( IHttpContextAccessor contextAccessor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码部署（简化）-2\"><a href=\"#代码部署（简化）-2\" class=\"headerlink\" title=\"代码部署（简化）\"></a>代码部署（简化）</h3><p>打开NuGet包管理,安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package AspNet.Security.OAuth.GitHub</span><br></pre></td></tr></table></figure>\n\n<p>appSettings.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">    &quot;GitHub&quot;: &#123;</span><br><span class=\"line\">      &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">      &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add扩展方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static class JwtConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">            &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">            options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">        &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">            options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，如头像，email，是没有获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.AddGitHub(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">    options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">    //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">    options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">#其中LinConsts类为静态常量</span><br><span class=\"line\">public static class LinConsts</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static class Claims</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public const string BIO = &quot;urn:github:bio&quot;;</span><br><span class=\"line\">        public const string AvatarUrl = &quot;urn:github:avatar_url&quot;;</span><br><span class=\"line\">        public const string BlogAddress = &quot;urn:github:blog&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startup.cs</p>\n<p>ConfigureServices中配置此服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">services.AddJwtConfiguration(Configuration);</span><br></pre></td></tr></table></figure>\n\n<p>创建AuthenticationController.cs<br>增加SignIn，用于处理用户授权成功后，重定回signin-callback,并将参数带回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private readonly IHttpContextAccessor _contextAccessor;</span><br><span class=\"line\">private readonly IConfiguration _configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _contextAccessor = contextAccessor;</span><br><span class=\"line\">    _configuration = configuration;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[HttpGet(&quot;~/signin&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; SignIn(string provider, string redirectUrl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var request = _contextAccessor.HttpContext.Request;</span><br><span class=\"line\">    var url =</span><br><span class=\"line\">        $&quot;&#123;request.Scheme&#125;://&#123;request.Host&#125;&#123;request.PathBase&#125;&#123;request.Path&#125;-callback?provider=&#123;provider&#125;&amp;redirectUrl=&#123;redirectUrl&#125;&quot;;</span><br><span class=\"line\">    var properties = new AuthenticationProperties &#123; RedirectUri = url &#125;;</span><br><span class=\"line\">    properties.Items[&quot;LoginProviderKey&quot;] = provider;</span><br><span class=\"line\">    return Challenge(properties, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin方法中，用户点击授权后（第一次），会根据其传递的URL，重定向到这个地址，signin-callback,参数也会一同携带。provider为GitHub,redirectUrl为：<a href=\"http://localhost:8081/login-result\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/login-result</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/signin-callback&quot;)]</span><br><span class=\"line\">public async Task&lt;IActionResult&gt; Home(string provider = null, string redirectUrl = &quot;&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span><br><span class=\"line\">        return Redirect(redirectUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">    //TODO 记录授权成功后的信息 </span><br><span class=\"line\"></span><br><span class=\"line\">    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;</span><br><span class=\"line\">    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;</span><br><span class=\"line\">    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;</span><br><span class=\"line\">    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;</span><br><span class=\"line\">    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Redirect($&quot;&#123;redirectUrl&#125;?openId=&#123;openIdClaim.Value&#125;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到github的id。</li>\n<li>axios GET请求 <a href=\"https://localhost:5001/OpenId\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId</a> 得到null<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/OpenId&quot;)]</span><br><span class=\"line\">public async Task&lt;string&gt; OpenId(string provider = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">    if (!authenticateResult.Succeeded) return null;</span><br><span class=\"line\">    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span><br><span class=\"line\">    return openIdClaim?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我记得之前传Token时，后台是可以这样获取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[HttpGet(&quot;~/GetOpenIdByToken&quot;)]</span><br><span class=\"line\">public string GetOpenIdByToken()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>LoginResult.vue在created生命周期中。都是得到null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/OpenId?provider=GitHub&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  methods: &quot;get&quot;,</span><br><span class=\"line\">  url: &quot;https://localhost:5001/GetOpenIdByToken&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function(response) &#123;</span><br><span class=\"line\">    // handle success</span><br><span class=\"line\">    console.log(response);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么呢？？？-2\"><a href=\"#为什么呢？？？-2\" class=\"headerlink\" title=\"为什么呢？？？\"></a>为什么呢？？？</h3><p>因为前后端分离，不是基于Cookies的。http是无状态的。每次请求无法区分用户的。我们可以根据当前的ClaimsPrincipal，根据JWT生成相应的Token，axios请求时，放到headers中。</p>\n<p>安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package Microsoft.AspNetCore.Authentication.JwtBearer</span><br></pre></td></tr></table></figure>\n\n<p>AppSettings.json配置改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Authentication&quot;: &#123;</span><br><span class=\"line\">&quot;JwtBearer&quot;: &#123;</span><br><span class=\"line\">  &quot;SecurityKey&quot;: &quot;JWTStudyWebsite_DI20DXU3&quot;,</span><br><span class=\"line\">  &quot;Issuer&quot;: &quot;JWTStudy&quot;,</span><br><span class=\"line\">  &quot;Audience&quot;: &quot;JWTStudyWebsite&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;GitHub&quot;: &#123;</span><br><span class=\"line\">  &quot;ClientId&quot;: &quot;0be6b05fc717bfc4fb67&quot;,</span><br><span class=\"line\">  &quot;ClientSecret&quot;: &quot;dcaced9f176afba64e89d88b9b06ffc4a887a609&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在signin-callback路由中，得到authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到eamil，另外MapJsonKey扩展了以下字段（avatar_url、bio、blog)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span><br><span class=\"line\">string token = this.CreateToken(authenticateResult.Principal);</span><br></pre></td></tr></table></figure>\n\n<p>根据ClaimsPrincipal值生成token值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private string CreateToken(ClaimsPrincipal claimsPrincipal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var handler = new JwtSecurityTokenHandler();</span><br><span class=\"line\">    var key = new SymmetricSecurityKey(</span><br><span class=\"line\">        Encoding.UTF8.GetBytes(_configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;]));</span><br><span class=\"line\">    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\">    var token = new JwtSecurityToken(</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\">        _configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\">        claimsPrincipal.Claims,</span><br><span class=\"line\">        expires: DateTime.Now.AddMinutes(30),</span><br><span class=\"line\">        signingCredentials: credentials</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    return handler.WriteToken(token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的claimsPrincipal是什么呢。简单的说就是一个存有github授权信息的对象，可以解析出对应的Clamis，这里其实就是用了Clamis的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id、name,url,email,avatar_url等</td>\n<td>由多组Claim组成，这里可指GitHub授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity的持有者</td>\n</tr>\n</tbody></table>\n<p>具体Jwt的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration改成如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(opts =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;</span><br><span class=\"line\">            opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class=\"line\">        &#125;).AddCookie(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.LoginPath = &quot;/signin&quot;;</span><br><span class=\"line\">        options.LogoutPath = &quot;/signout&quot;;</span><br><span class=\"line\">    &#125;).AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Audience = configuration[&quot;Authentication:JwtBearer:Audience&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        options.TokenValidationParameters = new TokenValidationParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // The signing key must match!</span><br><span class=\"line\">            ValidateIssuerSigningKey = true,</span><br><span class=\"line\">            IssuerSigningKey = new SymmetricSecurityKey(</span><br><span class=\"line\">                Encoding.ASCII.GetBytes(configuration[&quot;Authentication:JwtBearer:SecurityKey&quot;])),</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Issuer (iss) claim</span><br><span class=\"line\">            ValidateIssuer = true,</span><br><span class=\"line\">            ValidIssuer = configuration[&quot;Authentication:JwtBearer:Issuer&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the JWT Audience (aud) claim</span><br><span class=\"line\">            ValidateAudience = true,</span><br><span class=\"line\">            ValidAudience = configuration[&quot;Authentication:JwtBearer:Audience&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">            // Validate the token expiry</span><br><span class=\"line\">            ValidateLifetime = true,</span><br><span class=\"line\"></span><br><span class=\"line\">            // If you want to allow a certain amount of clock drift, set that here</span><br><span class=\"line\">            //ClockSkew = TimeSpan.Zero</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;).AddGitHub(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.ClientId = configuration[&quot;Authentication:GitHub:ClientId&quot;];</span><br><span class=\"line\">        options.ClientSecret = configuration[&quot;Authentication:GitHub:ClientSecret&quot;];</span><br><span class=\"line\">        //options.CallbackPath = new PathString(&quot;~/signin-github&quot;);//与GitHub上的回调地址相同，默认即是/signin-github</span><br><span class=\"line\">        options.Scope.Add(&quot;user:email&quot;);</span><br><span class=\"line\">        //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, &quot;avatar_url&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, &quot;bio&quot;);</span><br><span class=\"line\">        options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, &quot;blog&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener\">前端LoginResult.vue代码</a></p>\n<p>前端运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn install</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n<p>点击GitHub登录</p>\n<p>GetOpenIdByToken根据生成的token值，解析出了用户id,这样前端在login-result这个组件中，把token保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: 18613266</span><br><span class=\"line\">status: 200</span><br><span class=\"line\">config: &#123;url: &quot;https://localhost:5001/GetOpenIdByToken&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OpenId?provider=GitHub则得不到数据，只能浏览器直接请求<a href=\"https://localhost:5001/OpenId?provider=GitHub，才能到github\" target=\"_blank\" rel=\"noopener\">https://localhost:5001/OpenId?provider=GitHub，才能到github</a> 的id。这个适应于前后端不分离，或者属于之前我们经常使用MVC结构，同一域名下，同一端口，基于Cookies登录的判断。</p>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener\">.net Core2.2 WebApi通过OAuth2.0实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"Demo-示例-2\"><a href=\"#Demo-示例-2\" class=\"headerlink\" title=\"Demo  示例\"></a>Demo  示例</h2><ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnetcore3.1/VoVo.AspNetCore.OAuth2</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Mar 06 2020 13:28:47 GMT+0800 (GMT+08:00)","title":"SPA+.NET Core3.1 GitHub第三方授权登录 使用AspNet.Security.OAuth.GitHub","path":"2019/12/27/lin-cms-dotnetcore/spa-github-login/","eyeCatchImage":null,"excerpt":null,"date":"2019-12-27T15:12:00.000Z","pv":0,"totalPV":0,"categories":"lin-cms-dotnetcore","tags":[".NET Core","开源","lin-cms","GitHub"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ck2362yeg0006m0twqjv44abz","category_id":"ck2362yew0008m0twn3k8dgwn","_id":"ck2362yfk000im0tw428wdnlf"},{"post_id":"ck2362yet0007m0twowmfbxkh","category_id":"ck2362yfb000dm0tw6mcdh58v","_id":"ck2362yfx000pm0twus2law8p"},{"post_id":"ck2362yfh000hm0twigg50wc2","category_id":"ck2362yfb000dm0tw6mcdh58v","_id":"ck2362yg5000sm0tw01n93ra1"},{"post_id":"ck2362yf0000am0twffqdo1i5","category_id":"ck2362yfb000dm0tw6mcdh58v","_id":"ck2362ygc000vm0twruxsjnyb"},{"post_id":"ck2362yf4000bm0twdnrdo2kg","category_id":"ck2362yfv000om0twqzn7bnk0","_id":"ck2362ygn0010m0twginlx43v"},{"post_id":"ck2362yf7000cm0tw2xuiv2pe","category_id":"ck2362ygc000wm0twk7sftmac","_id":"ck2362yh10016m0twyt9mh3ev"},{"post_id":"ck2362yfe000gm0twnqgkozxc","category_id":"ck2362yfv000om0twqzn7bnk0","_id":"ck2362yhc001bm0twqj750gur"},{"post_id":"ck2362yfu000nm0tw1xnnljcm","category_id":"ck2362ygz0015m0twmj64hpao","_id":"ck2362yho001hm0tw9omk6h41"},{"post_id":"ck2362yg0000rm0twxozcep2s","category_id":"ck2362yhf001dm0twozih51g1","_id":"ck2362yi0001nm0twoplek0l8"},{"post_id":"ck2362yg8000um0twl1vsofbt","category_id":"ck2362yhf001dm0twozih51g1","_id":"ck2362yi7001qm0tw0gght6rm"},{"post_id":"ck2362ygf000ym0twliumf707","category_id":"ck2362yhy001mm0twc70zcjvj","_id":"ck2362yib001tm0twq5ucis5g"},{"post_id":"ck2362ygk000zm0twkomcb93n","category_id":"ck2362yi7001rm0twa2d9c4wc","_id":"ck2362yil001ym0twn0rnfrui"},{"post_id":"ck2362ygp0012m0tw9pzb8izi","category_id":"ck2362yhy001mm0twc70zcjvj","_id":"ck2362yio0021m0twcjq04kem"},{"post_id":"ck2362ygu0014m0tw16kyq24l","category_id":"ck2362yij001xm0twcwqs4rw6","_id":"ck2362yiq0026m0twwh7a68ty"},{"post_id":"ck2362yh20017m0twfpdscazy","category_id":"ck2362yhy001mm0twc70zcjvj","_id":"ck2362yiq0029m0tw402t2qts"},{"post_id":"ck2362yh80019m0twskjkfq6t","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yis002dm0tw706old28"},{"post_id":"ck2362yhd001cm0twffaa5q6g","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yit002hm0twlalv2izp"},{"post_id":"ck2362ykn003am0tw3lk75wru","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yl6003hm0twrokc5mvt"},{"post_id":"ck2362yks003bm0tw149nhz3y","category_id":"ck2362yl0003em0tw9jc6hkh3","_id":"ck2362ylq003om0twz7d1smzw"},{"post_id":"ck2362ylh003mm0twdjsmz53h","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362ym9003um0tw72cowdks"},{"post_id":"ck2362ykx003dm0twi2y2wkmf","category_id":"ck2362yle003km0twt1xauj3y","_id":"ck2362ymg003zm0twfmgvl49t"},{"post_id":"ck2362yl2003gm0twg6lxdrqg","category_id":"ck2362yl0003em0tw9jc6hkh3","_id":"ck2362ymq0042m0twfsrxciy7"},{"post_id":"ck2362yl9003im0twrldf7uax","category_id":"ck2362ymb003wm0twj2hiy79z","_id":"ck2362yn70048m0tw08o1q923"},{"post_id":"ck2362ylc003jm0twxdqyz4bb","category_id":"ck2362yms0043m0twqavdx9zu","_id":"ck2362yna004em0tw6abum9vl"},{"post_id":"ck2362yn20047m0twinhcwsg7","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362ynb004im0twqd6f39ul"},{"post_id":"ck2362ylk003nm0twwwyrgxw8","category_id":"ck2362yn80049m0twv88fjqki","_id":"ck2362ync004km0tw9p12zjks"},{"post_id":"ck2362ylw003rm0tw3lv1sj8k","category_id":"ck2362yna004fm0twytd7chgu","_id":"ck2362yne004pm0twqb6gc787"},{"post_id":"ck2362yme003ym0tw6xzief9h","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck2362ynf004tm0twtsgqpiqj"},{"post_id":"ck2362yml0041m0tw7tqknhl8","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck2362ynk004xm0twqd9okg20"},{"post_id":"ck2362ymv0045m0twch0q2rhc","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck2362ynp0051m0twmkreinjo"},{"post_id":"ck2362yn8004am0twj5i26zfr","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck2362ynt0054m0twwatenajw"},{"post_id":"ck2362ypd005bm0tw1w5tifyi","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck2362ypy005im0twmbo48nu1"},{"post_id":"ck2362yph005cm0twoycc15uv","category_id":"ck2362yi7001rm0twa2d9c4wc","_id":"ck2362yq5005lm0twk2m4fojj"},{"post_id":"ck2362ypk005em0twpx3mwb7w","category_id":"ck2362yn80049m0twv88fjqki","_id":"ck2362yq8005nm0twoc3o43o4"},{"post_id":"ck2362ypq005hm0tw2oe8qck6","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yqc005pm0tweyb31it4"},{"post_id":"ck2362yq1005km0twe6w948pf","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yqf005rm0twvokoa6bn"},{"post_id":"ck2362yqv005xm0twzza9946s","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ck2362yr50061m0twg28gx9kp"},{"post_id":"ck2362yqy005ym0twocuk6nuu","category_id":"ck2362yfb000dm0tw6mcdh58v","_id":"ck2362yr70062m0twl3oknjmi"},{"post_id":"ck3yccozv0000t4uxqfjrqix9","category_id":"ck2362yn80049m0twv88fjqki","_id":"ck3yccp070005t4uxp9gnd2xq"},{"post_id":"ck3yccp010001t4uxcgamj1eq","category_id":"ck2362yn80049m0twv88fjqki","_id":"ck3yccp080007t4ux1mzh3wm2"},{"post_id":"ck3yccp050003t4uxargjzq8c","category_id":"ck2362ync004lm0twkl7uc6sz","_id":"ck3yccp090009t4ux0pcpi6p6"},{"post_id":"ckb3n24k500002ouxucocswfp","category_id":"ck2362yip0025m0twpj0zyadp","_id":"ckb3n24km00022ouxd929d98e"},{"post_id":"ckb3n24sn00072ouxjcxslk7m","category_id":"ck2362yn80049m0twv88fjqki","_id":"ckb3n24sp00092ouxm88eao9v"}],"PostTag":[{"post_id":"ck2362yeg0006m0twqjv44abz","tag_id":"ck2362yey0009m0twdarx071w","_id":"ck2362yfe000fm0tw640mp7rz"},{"post_id":"ck2362yet0007m0twowmfbxkh","tag_id":"ck2362yfd000em0tw5r56p1mj","_id":"ck2362yfs000mm0twd4p1mr02"},{"post_id":"ck2362yf0000am0twffqdo1i5","tag_id":"ck2362yfo000km0tw4ltvq999","_id":"ck2362yg6000tm0twer07wy8d"},{"post_id":"ck2362yf4000bm0twdnrdo2kg","tag_id":"ck2362yfz000qm0twxjxflb6a","_id":"ck2362yha001am0twm9syiz5t"},{"post_id":"ck2362yf4000bm0twdnrdo2kg","tag_id":"ck2362yge000xm0twji3cyxql","_id":"ck2362yhh001em0tw11nb2x7s"},{"post_id":"ck2362yf4000bm0twdnrdo2kg","tag_id":"ck2362ygr0013m0twx6sf9faz","_id":"ck2362yhl001gm0tw9hcupjai"},{"post_id":"ck2362yf7000cm0tw2xuiv2pe","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck2362yhp001im0twfxq3gs24"},{"post_id":"ck2362yfe000gm0twnqgkozxc","tag_id":"ck2362yhk001fm0twidjo3qij","_id":"ck2362yhw001lm0twjdd2r9qu"},{"post_id":"ck2362yfh000hm0twigg50wc2","tag_id":"ck2362yfo000km0tw4ltvq999","_id":"ck2362yi5001pm0twrp9zgj9d"},{"post_id":"ck2362yfq000lm0twjbp0jrv6","tag_id":"ck2362yi2001om0twgiidnt4r","_id":"ck2362yii001wm0twx2018dl2"},{"post_id":"ck2362yfq000lm0twjbp0jrv6","tag_id":"ck2362yi9001sm0tws4vzb18u","_id":"ck2362yim001zm0twizbuq34s"},{"post_id":"ck2362yfu000nm0tw1xnnljcm","tag_id":"ck2362yif001vm0twbvxk50cw","_id":"ck2362yip0024m0twhqyao9k3"},{"post_id":"ck2362yfu000nm0tw1xnnljcm","tag_id":"ck2362yin0020m0twfo5w09u3","_id":"ck2362yiq0027m0twr1zqxe7u"},{"post_id":"ck2362yg0000rm0twxozcep2s","tag_id":"ck2362yip0023m0twcoqsel3h","_id":"ck2362yir002cm0tw2sb6uliq"},{"post_id":"ck2362yg0000rm0twxozcep2s","tag_id":"ck2362yiq0028m0tw94wrr59w","_id":"ck2362yis002em0twvjsk71k7"},{"post_id":"ck2362yg8000um0twl1vsofbt","tag_id":"ck2362yip0023m0twcoqsel3h","_id":"ck2362yis002gm0twyzxs8h29"},{"post_id":"ck2362yg8000um0twl1vsofbt","tag_id":"ck2362yfo000km0tw4ltvq999","_id":"ck2362yit002im0tw850ort9p"},{"post_id":"ck2362ygf000ym0twliumf707","tag_id":"ck2362yis002fm0twcf13kk6m","_id":"ck2362yiw002km0twpkkyt3fc"},{"post_id":"ck2362ygk000zm0twkomcb93n","tag_id":"ck2362yiu002jm0twim8vxja9","_id":"ck2362yj1002om0tw8yf7dzd2"},{"post_id":"ck2362ygk000zm0twkomcb93n","tag_id":"ck2362yix002lm0tw0og9qwho","_id":"ck2362yj2002pm0tw9yvmhk6q"},{"post_id":"ck2362ygk000zm0twkomcb93n","tag_id":"ck2362yiy002mm0twy6cmvtzi","_id":"ck2362yj4002rm0tw9phq5ts8"},{"post_id":"ck2362ygp0012m0tw9pzb8izi","tag_id":"ck2362yiz002nm0twbnobjv1l","_id":"ck2362yj5002sm0twnu4pzbxg"},{"post_id":"ck2362ygu0014m0tw16kyq24l","tag_id":"ck2362yj2002qm0twl05b8cdx","_id":"ck2362yj8002vm0tw3nc9v22i"},{"post_id":"ck2362ygu0014m0tw16kyq24l","tag_id":"ck2362yj6002tm0twm2egv89i","_id":"ck2362yj9002wm0twwm2d36zs"},{"post_id":"ck2362yh20017m0twfpdscazy","tag_id":"ck2362yj8002um0twctv5wruf","_id":"ck2362yjc0030m0twkb6p7hkl"},{"post_id":"ck2362yh20017m0twfpdscazy","tag_id":"ck2362yif001vm0twbvxk50cw","_id":"ck2362yjd0031m0twa7d9on0m"},{"post_id":"ck2362yh20017m0twfpdscazy","tag_id":"ck2362yj9002ym0twoefml0ga","_id":"ck2362yjg0033m0twf5nnrlgx"},{"post_id":"ck2362yh80019m0twskjkfq6t","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ck2362yjj0035m0twqjn60ouw"},{"post_id":"ck2362yh80019m0twskjkfq6t","tag_id":"ck2362yfz000qm0twxjxflb6a","_id":"ck2362yjj0036m0twguiacm17"},{"post_id":"ck2362yh80019m0twskjkfq6t","tag_id":"ck2362yin0020m0twfo5w09u3","_id":"ck2362yjk0037m0tw8n0uej7l"},{"post_id":"ck2362yhd001cm0twffaa5q6g","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ck2362yjk0038m0twg6rjcfel"},{"post_id":"ck2362yhd001cm0twffaa5q6g","tag_id":"ck2362yfz000qm0twxjxflb6a","_id":"ck2362yjm0039m0tw7puhhrjl"},{"post_id":"ck2362ykn003am0tw3lk75wru","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ck2362ykv003cm0twjyjuoa6o"},{"post_id":"ck2362yks003bm0tw149nhz3y","tag_id":"ck2362yl1003fm0twadgilp2n","_id":"ck2362ym0003sm0tw0bb753yw"},{"post_id":"ck2362yks003bm0tw149nhz3y","tag_id":"ck2362ylf003lm0twn04lsn16","_id":"ck2362yma003vm0twfcgh2hha"},{"post_id":"ck2362yks003bm0tw149nhz3y","tag_id":"ck2362yfz000qm0twxjxflb6a","_id":"ck2362ymh0040m0tw0vws1n8c"},{"post_id":"ck2362yml0041m0tw7tqknhl8","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck2362yn10046m0twjwybj56w"},{"post_id":"ck2362yn20047m0twinhcwsg7","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck2362yna004cm0twzjewdka3"},{"post_id":"ck2362yl9003im0twrldf7uax","tag_id":"ck2362yls003qm0twxp6u2fms","_id":"ck2362yna004dm0twk27etdh8"},{"post_id":"ck2362yl9003im0twrldf7uax","tag_id":"ck2362ymc003xm0tw91c5q5en","_id":"ck2362ynb004hm0twdgwd0kgj"},{"post_id":"ck2362yl9003im0twrldf7uax","tag_id":"ck2362ymu0044m0twxq0metee","_id":"ck2362ynb004jm0twmwyhk5dq"},{"post_id":"ck2362ylc003jm0twxdqyz4bb","tag_id":"ck2362yn9004bm0tw3e8e68h4","_id":"ck2362ynd004nm0tw1l7j1po6"},{"post_id":"ck2362ylh003mm0twdjsmz53h","tag_id":"ck2362ynb004gm0tw6qfm91gx","_id":"ck2362ynd004om0twfokq15jc"},{"post_id":"ck2362ylk003nm0twwwyrgxw8","tag_id":"ck2362ynd004mm0twv9lkbgbs","_id":"ck2362ynj004vm0tw56h0onpb"},{"post_id":"ck2362ylk003nm0twwwyrgxw8","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck2362ynm004ym0tw5gzmnd74"},{"post_id":"ck2362ylk003nm0twwwyrgxw8","tag_id":"ck2362yne004rm0twtco3929e","_id":"ck2362ynn0050m0twb4ogabb7"},{"post_id":"ck2362ylw003rm0tw3lv1sj8k","tag_id":"ck2362ynh004um0tw8uquycj6","_id":"ck2362yns0053m0tw1154cz8u"},{"post_id":"ck2362ylw003rm0tw3lv1sj8k","tag_id":"ck2362ynm004zm0twannjexa9","_id":"ck2362ynu0055m0twy754jgpe"},{"post_id":"ck2362ym4003tm0twna9wz730","tag_id":"ck2362ynq0052m0twweocjtlk","_id":"ck2362ynv0057m0twx1xzdha2"},{"post_id":"ck2362yme003ym0tw6xzief9h","tag_id":"ck2362ynu0056m0twczkyhh32","_id":"ck2362ynv0059m0twgfn5kpw3"},{"post_id":"ck2362ymv0045m0twch0q2rhc","tag_id":"ck2362ynv0058m0twr74599i7","_id":"ck2362ynw005am0twbh1f0d8b"},{"post_id":"ck2362ypd005bm0tw1w5tifyi","tag_id":"ck2362yge000xm0twji3cyxql","_id":"ck2362ypj005dm0twxv2zyi0c"},{"post_id":"ck2362ypd005bm0tw1w5tifyi","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ck2362ypp005gm0twot663gjh"},{"post_id":"ck2362ypk005em0twpx3mwb7w","tag_id":"ck2362ynd004mm0twv9lkbgbs","_id":"ck2362yq0005jm0tw4bu3rcnq"},{"post_id":"ck2362ypk005em0twpx3mwb7w","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck2362yq6005mm0twsrre6xyh"},{"post_id":"ck2362ypk005em0twpx3mwb7w","tag_id":"ck2362yne004rm0twtco3929e","_id":"ck2362yqb005om0tw9zp71i5q"},{"post_id":"ck2362ypq005hm0tw2oe8qck6","tag_id":"ck2362yge000xm0twji3cyxql","_id":"ck2362yqe005qm0twnv16rvm9"},{"post_id":"ck2362ypq005hm0tw2oe8qck6","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ck2362yqg005sm0tw04mw0in6"},{"post_id":"ck2362yq1005km0twe6w948pf","tag_id":"ck2362ynu0056m0twczkyhh32","_id":"ck2362yqh005tm0twi1c5f4wm"},{"post_id":"ck2362yph005cm0twoycc15uv","tag_id":"ck2362yfo000km0tw4ltvq999","_id":"ck2362yqi005um0twl9734mmr"},{"post_id":"ck2362yph005cm0twoycc15uv","tag_id":"ck2362yiu002jm0twim8vxja9","_id":"ck2362yqk005vm0tw6qc9vx1r"},{"post_id":"ck2362yph005cm0twoycc15uv","tag_id":"ck2362ypo005fm0twg0cf4lnn","_id":"ck2362yqk005wm0twu62q9ac8"},{"post_id":"ck2362yqv005xm0twzza9946s","tag_id":"ck2362ynu0056m0twczkyhh32","_id":"ck2362yr1005zm0twdebql6m4"},{"post_id":"ck2362yqy005ym0twocuk6nuu","tag_id":"ck2362yfo000km0tw4ltvq999","_id":"ck2362yr40060m0twyir3lon3"},{"post_id":"ck3yccozv0000t4uxqfjrqix9","tag_id":"ck2362ynd004mm0twv9lkbgbs","_id":"ck3yccp040002t4uxxkte5aek"},{"post_id":"ck3yccozv0000t4uxqfjrqix9","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck3yccp070004t4uxecex5l9w"},{"post_id":"ck3yccozv0000t4uxqfjrqix9","tag_id":"ck2362yne004rm0twtco3929e","_id":"ck3yccp080006t4ux3g795e6h"},{"post_id":"ck3yccp010001t4uxcgamj1eq","tag_id":"ck2362ynd004mm0twv9lkbgbs","_id":"ck3yccp090008t4uxiu71bdf1"},{"post_id":"ck3yccp010001t4uxcgamj1eq","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ck3yccp0a000at4ux46r48v1r"},{"post_id":"ck3yccp010001t4uxcgamj1eq","tag_id":"ck2362yne004rm0twtco3929e","_id":"ck3yccp0a000bt4uxpqaw4w8h"},{"post_id":"ck3yccp050003t4uxargjzq8c","tag_id":"ck2362ynu0056m0twczkyhh32","_id":"ck3yccp0b000ct4uxda44kx41"},{"post_id":"ckb3n24k500002ouxucocswfp","tag_id":"ck2362yja002zm0twjedxh0hq","_id":"ckb3n24kn00042ouxo7r4xdxq"},{"post_id":"ckb3n24k500002ouxucocswfp","tag_id":"ckb3n24ke00012ouxbg4b5i48","_id":"ckb3n24kn00052ouxpxr9077c"},{"post_id":"ckb3n24k500002ouxucocswfp","tag_id":"ckb3n24km00032ouxs2943ja7","_id":"ckb3n24ko00062ouxzn6i6whw"},{"post_id":"ckb3n24sn00072ouxjcxslk7m","tag_id":"ck2362ynd004mm0twv9lkbgbs","_id":"ckb3n24sp000a2ouxe9p3njyu"},{"post_id":"ckb3n24sn00072ouxjcxslk7m","tag_id":"ck2362yh60018m0tw0ickim7u","_id":"ckb3n24sp000b2ouxdfhpmzcq"},{"post_id":"ckb3n24sn00072ouxjcxslk7m","tag_id":"ck2362yne004rm0twtco3929e","_id":"ckb3n24sp000c2oux6wt3psut"},{"post_id":"ckb3n24sn00072ouxjcxslk7m","tag_id":"ckb3n24so00082ouxzfhsbtaq","_id":"ckb3n24sq000d2ouxjizhl3g7"}],"Tag":[{"name":"学习记录","_id":"ck2362yey0009m0twdarx071w"},{"name":"ABP 代码生成器","_id":"ck2362yfd000em0tw5r56p1mj"},{"name":"ABP","_id":"ck2362yfo000km0tw4ltvq999"},{"name":"Ubuntu","_id":"ck2362yfz000qm0twxjxflb6a"},{"name":"Redis","_id":"ck2362yge000xm0twji3cyxql"},{"name":"IIS","_id":"ck2362ygr0013m0twx6sf9faz"},{"name":".NET Core","_id":"ck2362yh60018m0tw0ickim7u"},{"name":"Git","_id":"ck2362yhk001fm0twidjo3qij"},{"name":"RabbitMQ","_id":"ck2362yi2001om0twgiidnt4r"},{"name":"Mongodb","_id":"ck2362yi9001sm0tws4vzb18u"},{"name":"nginx","_id":"ck2362yif001vm0twbvxk50cw"},{"name":"Docker","_id":"ck2362yin0020m0twfo5w09u3"},{"name":"MySQL","_id":"ck2362yip0023m0twcoqsel3h"},{"name":"Navicat Premium 12","_id":"ck2362yiq0028m0tw94wrr59w"},{"name":"Node.js","_id":"ck2362yis002fm0twcf13kk6m"},{"name":".NET Framework","_id":"ck2362yiu002jm0twim8vxja9"},{"name":"RazorEngine","_id":"ck2362yix002lm0tw0og9qwho"},{"name":"代码生成器","_id":"ck2362yiy002mm0twy6cmvtzi"},{"name":"Rshiny","_id":"ck2362yiz002nm0twbnobjv1l"},{"name":".NET","_id":"ck2362yj2002qm0twl05b8cdx"},{"name":"Visual Studio","_id":"ck2362yj6002tm0twm2egv89i"},{"name":"ubuntu","_id":"ck2362yj8002um0twctv5wruf"},{"name":"https","_id":"ck2362yj9002ym0twoefml0ga"},{"name":"ASP.NET Core","_id":"ck2362yja002zm0twjedxh0hq"},{"name":"travis-cli","_id":"ck2362yl1003fm0twadgilp2n"},{"name":"ssl","_id":"ck2362ylf003lm0twn04lsn16"},{"name":"hexo","_id":"ck2362yls003qm0twxp6u2fms"},{"name":"material-x","_id":"ck2362ymc003xm0tw91c5q5en"},{"name":"gitalk","_id":"ck2362ymu0044m0twxq0metee"},{"name":"spring-boot","_id":"ck2362yn9004bm0tw3e8e68h4"},{"name":"对象存储","_id":"ck2362ynb004gm0tw6qfm91gx"},{"name":"开源","_id":"ck2362ynd004mm0twv9lkbgbs"},{"name":"lin-cms","_id":"ck2362yne004rm0twtco3929e"},{"name":"账号安全","_id":"ck2362ynh004um0tw8uquycj6"},{"name":"隐私","_id":"ck2362ynm004zm0twannjexa9"},{"name":"TypeScript","_id":"ck2362ynq0052m0twweocjtlk"},{"name":"FreeSql","_id":"ck2362ynu0056m0twczkyhh32"},{"name":"webpack","_id":"ck2362ynv0058m0twr74599i7"},{"name":"R.NET","_id":"ck2362ypo005fm0twg0cf4lnn"},{"name":"Blazor","_id":"ckb3n24ke00012ouxbg4b5i48"},{"name":"WebAssembly","_id":"ckb3n24km00032ouxs2943ja7"},{"name":"GitHub","_id":"ckb3n24so00082ouxzfhsbtaq"}]}}